<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Ma3k4H3d</title>
  
  <subtitle>想要把自己活成一场梦，一首歌，一部电影~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maskhed.github.io/"/>
  <updated>2018-11-27T13:31:05.032Z</updated>
  <id>http://maskhed.github.io/</id>
  
  <author>
    <name>Mr.Ma3k4H3d</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>即使风雨兼程，也能守得云开见月明</title>
    <link href="http://maskhed.github.io/2020/12/08/%E9%A3%8E%E9%9B%A8%E5%85%BC%E7%A8%8B/"/>
    <id>http://maskhed.github.io/2020/12/08/风雨兼程/</id>
    <published>2020-12-08T00:58:56.000Z</published>
    <updated>2018-11-27T13:31:05.032Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是某次刷知乎时偶然看到的，虽然作者以“读博”为例，但“修真之旅”却并不仅限于此。每次读来都深以为然，无论如何，愿自己在“修真之旅”中也能够“守得云开见月明”。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://maskhed.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>PPT-test</title>
    <link href="http://maskhed.github.io/2019/03/06/PPT-test/"/>
    <id>http://maskhed.github.io/2019/03/06/PPT-test/</id>
    <published>2019-03-06T02:34:55.000Z</published>
    <updated>2019-03-06T02:47:47.352Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Normal-PDF&quot;&gt;&lt;a href=&quot;#Normal-PDF&quot; class=&quot;headerlink&quot; title=&quot;Normal PDF&quot;&gt;&lt;/a&gt;Normal PDF&lt;/h2&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;http
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rex：源码分析 -- Crash Analysis</title>
    <link href="http://maskhed.github.io/2019/01/23/rex-crash/"/>
    <id>http://maskhed.github.io/2019/01/23/rex-crash/</id>
    <published>2019-01-23T08:54:13.000Z</published>
    <updated>2019-01-23T09:15:46.442Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文用以梳理 Rex 复现、分析 Crash 时的原理及工程实现。相关代码，位于 Crash 类中。复现原理，论文中描述如下：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Vulnerable States.&lt;/strong&gt; Unlike AEG/Mayhem, but similar to AXGEN, we generate exploits by performing concolic execution on crashing program inputs using angr. We drive concolic execution forward, forcing it to follow the same path as a dynamic trace gathered by concretely executing the crashing input applied to the program. Concolic execution is stopped at the point where the program crashed, and we inspect the symbolic state to determine the cause of the crash and measure exploitability. By counting the number of symbolic bits in certain registers, we can triage a crash into a number of categories such as &lt;em&gt;frame pointer overwrite, instruction pointer overwrite, or arbitrary write,&lt;/em&gt; among others.  &lt;/p&gt;
    
    </summary>
    
      <category term="AEG" scheme="http://maskhed.github.io/categories/AEG/"/>
    
    
      <category term="CGC" scheme="http://maskhed.github.io/tags/CGC/"/>
    
  </entry>
  
  <entry>
    <title>Rex AEG：栈溢出之 Exploit 自动生成</title>
    <link href="http://maskhed.github.io/2019/01/17/Rex-stacksmash/"/>
    <id>http://maskhed.github.io/2019/01/17/Rex-stacksmash/</id>
    <published>2019-01-17T07:47:40.000Z</published>
    <updated>2019-03-01T07:18:47.583Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文通过调试 test_rex.py 中的 test_linux_stacksmash() 函数，以加深对 Rex 的理解。测试函数 test_linux_stacksmash() 是 Rex 开发团队给出的测试代码，用以展示 Rex 对栈溢出漏洞的自动利用能力。官方提供的测试样例 vuln_stacksmash 为 elf 格式的可执行文件，其中存在栈溢出漏洞，Rex 通过 rop2system、rop2text、jmpesp 三种方式实现了对该漏洞的自动化利用。下文为学习笔记，若存在理解有误的地方，请各位师傅批评指正。&lt;/p&gt;
    
    </summary>
    
      <category term="AEG" scheme="http://maskhed.github.io/categories/AEG/"/>
    
    
      <category term="CGC" scheme="http://maskhed.github.io/tags/CGC/"/>
    
  </entry>
  
  <entry>
    <title>angr AEG：缓冲区溢出之 Exploit 自动生成</title>
    <link href="http://maskhed.github.io/2019/01/09/insomnihack-aeg/"/>
    <id>http://maskhed.github.io/2019/01/09/insomnihack-aeg/</id>
    <published>2019-01-09T13:37:50.000Z</published>
    <updated>2019-03-01T07:17:00.048Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/angr/angr-doc/tree/master/examples/insomnihack_aeg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;insomnihack_aeg&lt;/a&gt; 为官方提供的示例，用以展示 Angr 利用符号执行进行漏洞挖掘并自动生成 Exploit 的能力。代码 &lt;a href=&quot;https://github.com/angr/angr-doc/blob/master/examples/insomnihack_aeg/demo_bin.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;demo_bin.c&lt;/a&gt; 中存在堆溢出漏洞，通过脚本 &lt;a href=&quot;https://github.com/angr/angr-doc/blob/master/examples/insomnihack_aeg/solve.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;solver.py&lt;/a&gt; 成功挖掘出该漏洞并自动生成 Exploit。&lt;/p&gt;
    
    </summary>
    
      <category term="Angr" scheme="http://maskhed.github.io/categories/Angr/"/>
    
    
  </entry>
  
</feed>
