<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Ma3k4H3d</title>
  
  <subtitle>竹杖芒鞋轻胜马，一蓑烟雨任平生。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maskhed.github.io/"/>
  <updated>2018-11-27T13:31:05.032Z</updated>
  <id>http://maskhed.github.io/</id>
  
  <author>
    <name>Mr.Ma3k4H3d</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>即使风雨兼程，也能守得云开见月明</title>
    <link href="http://maskhed.github.io/2020/12/08/%E9%A3%8E%E9%9B%A8%E5%85%BC%E7%A8%8B/"/>
    <id>http://maskhed.github.io/2020/12/08/风雨兼程/</id>
    <published>2020-12-08T00:58:56.000Z</published>
    <updated>2018-11-27T13:31:05.032Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是某次刷知乎时偶然看到的，虽然作者以“读博”为例，但“修真之旅”却并不仅限于此。每次读来都深以为然，无论如何，愿自己在“修真之旅”中也能够“守得云开见月明”。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://maskhed.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>iwconfig 缓冲区溢出分析及复现（CVE-2003-0947）</title>
    <link href="http://maskhed.github.io/2019/03/14/CVE-2003-0947/"/>
    <id>http://maskhed.github.io/2019/03/14/CVE-2003-0947/</id>
    <published>2019-03-14T01:20:12.000Z</published>
    <updated>2019-03-14T01:32:08.618Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iwconfig 是 Linux Wireless Extensions(LWE) 的用户层配置工具之一。LWE 是 Linux 下对无线网络配置的工具，包括内核的支持、用户层配置工具和驱动接口的支持三部分。&lt;br&gt;目前很多无线网卡都支持 LWE，而且主流的 Linux 发布版本，比如 Redhat Linux、Ubuntu Linux 都已经带了这个配置工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;right&quot;&gt; –《百度百科》 &lt;/p&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://maskhed.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Baab through automatic exploit generation</title>
    <link href="http://maskhed.github.io/2019/03/06/PPT-test/"/>
    <id>http://maskhed.github.io/2019/03/06/PPT-test/</id>
    <published>2019-03-06T02:34:55.000Z</published>
    <updated>2019-03-11T02:25:03.036Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Baab (Bug as a Backdoor) through automatic exploit generation (CRAX)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rex：源码分析 -- Crash Analysis</title>
    <link href="http://maskhed.github.io/2019/01/23/rex-crash/"/>
    <id>http://maskhed.github.io/2019/01/23/rex-crash/</id>
    <published>2019-01-23T08:54:13.000Z</published>
    <updated>2019-01-23T09:15:46.442Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文用以梳理 Rex 复现、分析 Crash 时的原理及工程实现。相关代码，位于 Crash 类中。复现原理，论文中描述如下：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Vulnerable States.&lt;/strong&gt; Unlike AEG/Mayhem, but similar to AXGEN, we generate exploits by performing concolic execution on crashing program inputs using angr. We drive concolic execution forward, forcing it to follow the same path as a dynamic trace gathered by concretely executing the crashing input applied to the program. Concolic execution is stopped at the point where the program crashed, and we inspect the symbolic state to determine the cause of the crash and measure exploitability. By counting the number of symbolic bits in certain registers, we can triage a crash into a number of categories such as &lt;em&gt;frame pointer overwrite, instruction pointer overwrite, or arbitrary write,&lt;/em&gt; among others.  &lt;/p&gt;
    
    </summary>
    
      <category term="AEG" scheme="http://maskhed.github.io/categories/AEG/"/>
    
    
      <category term="CGC" scheme="http://maskhed.github.io/tags/CGC/"/>
    
  </entry>
  
  <entry>
    <title>Rex AEG：栈溢出之 Exploit 自动生成</title>
    <link href="http://maskhed.github.io/2019/01/17/Rex-stacksmash/"/>
    <id>http://maskhed.github.io/2019/01/17/Rex-stacksmash/</id>
    <published>2019-01-17T07:47:40.000Z</published>
    <updated>2019-03-01T07:18:47.583Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文通过调试 test_rex.py 中的 test_linux_stacksmash() 函数，以加深对 Rex 的理解。测试函数 test_linux_stacksmash() 是 Rex 开发团队给出的测试代码，用以展示 Rex 对栈溢出漏洞的自动利用能力。官方提供的测试样例 vuln_stacksmash 为 elf 格式的可执行文件，其中存在栈溢出漏洞，Rex 通过 rop2system、rop2text、jmpesp 三种方式实现了对该漏洞的自动化利用。下文为学习笔记，若存在理解有误的地方，请各位师傅批评指正。&lt;/p&gt;
    
    </summary>
    
      <category term="AEG" scheme="http://maskhed.github.io/categories/AEG/"/>
    
    
      <category term="CGC" scheme="http://maskhed.github.io/tags/CGC/"/>
    
  </entry>
  
</feed>
